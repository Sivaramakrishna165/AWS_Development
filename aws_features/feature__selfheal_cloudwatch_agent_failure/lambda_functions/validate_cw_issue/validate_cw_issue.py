"""
    This Lambda function is used Validate whether CW logs are present or not.

    This Lambda is a part of Selfheal cloudwatch agent failure.
    In dxcms_sh_cw_sfn_resolution state machine(ValidateCWIssue)
    gets executed after ReconfigureCWAgent.

     Input event of the lambda function is:
        {
            "instance_id":"<instance-id>",
            "platform_type":"Windows/Linux"
        }

    In resolution state machine,
    On successful check, next state - Parallel State(SelfHealResolutionResult,StateMachineInfo) is called.
    On FAILURE, next State ValidateCWIssueError and then NotifyForLambaFunctionFailure.

"""

import json
import boto3
import datetime
import traceback
from botocore.config import Config

config=Config(retries=dict(max_attempts=10,mode='standard'))

ec2_client = boto3.client('ec2',config=config)
ec2_resource = boto3.resource('ec2',config=config)
cwl_client = boto3.client('logs',config=config)

def success_token(event,task_token):
    try:
        print("success_token() triggered.")
        sf = boto3.client('stepfunctions',config=config)
        sf_output = json.dumps(event)
        sf_response = sf.send_task_success(
            taskToken=task_token,
            output=str(sf_output)
        )
        print("success task token sent - ", sf_response)
        return sf_response
    except Exception as e:
        print("Error success_token() - ",e)
        print("not able to send task success token.")
        input = {"error" : str(e), "resource_id" : instance_id, "resource_type" : "EC2 Instance"}
        failure_token(task_token, input, traceback.format_exc())

def failure_token(taskToken, error, err_cause):
    try:
        print("failure_token() triggered.")
        if isinstance(err_cause, dict):
            cause = json.dumps(err_cause)
        else:
            cause = str(err_cause)
        sf = boto3.client('stepfunctions',config=config)
        sf_response = sf.send_task_failure(
            taskToken=taskToken,
            error = json.dumps(error),
            cause = cause
        )
        print('failure task token sent - ',sf_response)
    except Exception as e:
        print("Error failure_token() - ", e)
        print("not able to send failure task token")
        raise

def check_instance_platform(instance_id):
    error_status = False
    try:
        print("check_instance_platform triggered.")
        instance = ec2_resource.Instance(instance_id)
        platform = instance.platform

        return platform, error_status
    except Exception as e:
        print("Error check_instance_platform() - ",e)
        error_status = traceback.format_exc()
        return "", error_status

def check_logging(instance_id,time_stamp):
    error_status = False
    try:
        print("check_logging triggered.")
        platform, error_status = check_instance_platform(instance_id)
        if not error_status:
            if(platform == 'windows'):
                print("Windows Platform")
                log_group_name = "Default-Log-Group"
            else:
                print("Linux Platform")
                log_group_name = "/var/log/messages"

            log_grp = cwl_client.describe_log_groups(
                logGroupNamePrefix=log_group_name
            )

            if not log_grp['logGroups'] == []:
                log_stream = cwl_client.describe_log_streams(
                    logGroupName=log_group_name,
                    logStreamNamePrefix=instance_id,
                )
                if not log_stream['logStreams'] == []:
                    logs_generated = cwl_client.get_log_events(
                        logGroupName=log_group_name,
                        logStreamName=instance_id,
                        startTime=time_stamp
                    )
                    if logs_generated["events"]:
                        CloudWatch_Logs_Status = "present"
                        print("Logs are generated by instance {}".format(instance_id))
                        latest_log = datetime.datetime.fromtimestamp((logs_generated["events"][-1]["timestamp"])/1000)
                        print("Last log generated at time {}".format(str(latest_log)))
                    else:
                        CloudWatch_Logs_Status = "not_present"
                        print("Logs are missing for instance {} in last 24 hours.".format(instance_id))
                        latest_log = ""
                        print("Last log generated at time {}".format(str(latest_log)))
                else:
                    CloudWatch_Logs_Status = "not_present"
                    latest_log = ""
                    print("log stream {} not available in log group {}".format(instance_id, log_group_name))
                    print("Last log generated at time {}".format(str(latest_log)))
            else:
                CloudWatch_Logs_Status = "not_present"
                latest_log = ""
                print("log group {} is not available.".format(log_group_name))
                print("Last log generated at time {}".format(str(latest_log)))
        else:
            raise Exception(f"Error check_instance_platform() - Error while checking instance platform for {instance_id}")

        return CloudWatch_Logs_Status, str(latest_log), error_status
    
    except Exception as e:
        print("Error check_logging() - ",e)
        if not error_status:
            error_status = traceback.format_exc()
        return "", "", error_status

def lambda_handler(event, context):
    global task_token, instance_id
        
    print("input recieved to this script - " + str(event))
    task_token = event["token"]
    event = event["Payload"]
    instance_id = event["instance_id"]
    error_status = False
    try:
        time_stamp = event["time_stamp"]

        CloudWatch_Logs_Status, latest_log, error_status = check_logging(instance_id,time_stamp)
        if not error_status:
            if (CloudWatch_Logs_Status == "present"):
                event["cw_agent_status"] = "installed_and_running"
                event["configfile_status"] = "configured"
            else:
                event["cw_agent_status"] = "not_installed"
                event["configfile_status"] = "not_configured"

            print("latest_cloudwatch_logs is {}".format(CloudWatch_Logs_Status))
            event["latest_cloudwatch_logs"] = CloudWatch_Logs_Status
            event["latest_log_after_fix"] = latest_log
        else:
            raise Exception(f"Error check_logging() - error while checking platform/logs for instance {instance_id}")

        return success_token(event,task_token)
    except Exception as e:
        print("Error lambda_handler() - ",e)
        if not error_status:
            error_status = traceback.format_exc()
        input = {"error" : f"Error lambda_handler() - {str(e)}", "resource_id" : instance_id, "resource_type" : "EC2 Instance"}
        return failure_token(task_token, input, error_status)