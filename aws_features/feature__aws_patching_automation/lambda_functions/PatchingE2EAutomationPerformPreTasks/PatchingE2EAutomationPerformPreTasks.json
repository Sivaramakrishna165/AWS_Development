{
    "Comment": "An example of the Amazon States Language using a parallel state to execute two branches at the same time.",
    "StartAt": "Parallel",
    "States": {
        "Parallel": {
            "Type": "Parallel",
            "Next": "SFN_output_processing",
            "Branches": [
                {
                    "StartAt": "start_stopped_state_instances",
                    "States": {
                        "start_stopped_state_instances": {
                            "Type": "Task",
                            "Resource": "${start_stopped_state_instances}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "start_stopped_state_instances_error"
                                }
                            ],
                            "Next": "Wait"
                        },
                        "start_stopped_state_instances_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "start_stopped_state_instances Function"
                            },
                            "End": true
                        },
                        "Wait": {
                            "Type": "Wait",
                            "Seconds": 900,
                            "Next": "ssm_agent_validation"
                        },
                        "ssm_agent_validation": {
                            "Type": "Task",
                            "Resource": "${ssm_agent_validation}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 20
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "ssm_agent_validation_error"
                                }
                            ],
                            "Next": "generate_unique_name_for_health_check_SFN"
                        },
                        "ssm_agent_validation_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "ssm_agent_validation Function"
                            },
                            "End": true
                        },
                        "generate_unique_name_for_health_check_SFN": {
                            "Type": "Task",
                            "Resource": "${generate_unique_name_for_health_check_SFN}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "generate_unique_name_for_health_check_SFN_error"
                                }
                            ],
                            "Next": "Call_SFN_to_perform_health_check"
                        },
                        "generate_unique_name_for_health_check_SFN_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_name_for_health_check_SFN Function"
                            },
                            "End": true
                        },
                        "Call_SFN_to_perform_health_check": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.sync:2",
                            "Parameters": {
                                "StateMachineArn": "${Call_SFN_to_perform_health_check}",
                                "Name.$": "$.SubSFName",
                                "Input": {
                                    "Patching_Type.$": "$.Patching_Type",
                                    "PatchInstallOn.$": "$.PatchInstallOn",
                                    "Phase": "pre",
                                    "S3_Bucket.$": "$.S3_Bucket",
                                    "S3_directory_name.$": "$.S3_directory_name",
                                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                                    "region.$": "$.region"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Call_SFN_to_perform_health_check_error"
                                }
                            ],
                            "ResultPath": "$.Output",
                            "Next": "check_backup_requirement_status"
                        },
                        "Call_SFN_to_perform_health_check_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Call_SFN_to_perform_health_check"
                            },
                            "End": true
                        },
                        "check_backup_requirement_status": {
                            "Type": "Task",
                            "Resource": "${check_backup_requirement_status}",
                            "TimeoutSeconds": 900,
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "check_backup_requirement_status_error"
                                }
                            ],
                            "Next": "choose_backup_requirement_status"
                        },
                        "check_backup_requirement_status_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "Execution.$": "$$.Execution.Id",
                                "StateMachine": "$$.StateMachine",
                                "ErrorMessageFrom": "generate_patchTags Function"
                            },
                            "End": true
                        },
                        "choose_backup_requirement_status": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.Backup_Requirement_Status",
                                    "StringEquals": "ROOTVOL",
                                    "Next": "generate_unique_name_for_backup_SFN"
                                },
                                {
                                    "Variable": "$.Backup_Requirement_Status",
                                    "StringEquals": "AMI",
                                    "Next": "generate_unique_name_for_backup_SFN"
                                },
                                {
                                    "Variable": "$.Backup_Requirement_Status",
                                    "StringEquals": "OFF",
                                    "Next": "update_tag_for_backup_requirement"
                                }
                            ]
                        },
                        "update_tag_for_backup_requirement": {
                            "Type": "Task",
                            "Resource": "${update_tag_for_backup_requirement}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "update_tag_for_backup_requirement_error"
                                }
                            ],
                            "Next": "End_State"
                        },
                        "update_tag_for_backup_requirement_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "update_tag_for_backup_requirement_SFN Function"
                            },
                            "End": true
                        },
                        "End_State": {
                            "Type": "Pass",
                            "End": true
                        },
                        "generate_unique_name_for_backup_SFN": {
                            "Type": "Task",
                            "Resource": "${generate_unique_name_for_backup_SFN}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "generate_unique_name_for_backup_SFN_error"
                                }
                            ],
                            "Next": "Call_SFN_to_Execute_Backup"
                        },
                        "generate_unique_name_for_backup_SFN_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_name_for_backup_SFN Function"
                            },
                            "End": true
                        },
                        "Call_SFN_to_Execute_Backup": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.sync:2",
                            "Parameters": {
                                "StateMachineArn": "${Call_SFN_to_Execute_Backup}",
                                "Name.$": "$.SubSFName",
                                "Input": {
                                    "Patching_Type.$": "$.Patching_Type",
                                    "PatchInstallOn.$": "$.PatchInstallOn",
                                    "S3_Bucket.$": "$.S3_Bucket",
                                    "S3_directory_name.$": "$.S3_directory_name",
                                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                                    "region.$": "$.region"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Call_SFN_to_Execute_Backup_error"
                                }
                            ],
                            "ResultPath": "$.Output",
                            "End": true
                        },
                        "Call_SFN_to_Execute_Backup_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Call_SFN_to_Execute_Backup"
                            },
                            "End": true
                        }
                    }
                },
                {
                    "StartAt": "Pass",
                    "States": {
                        "Pass": {
                            "Type": "Pass",
                            "Parameters": {
                                "Input.$": "$",
                                "Execution.$": "$$.Execution.Id",
                                "StateMachine.$": "$$.StateMachine"
                            },
                            "End": true
                        }
                    }
                }
            ]
        },
        "SFN_output_processing": {
            "Type": "Task",
            "Resource": "${SFN_output_processing}",
            "End": true
        }
    }
}