{
    "Comment": "An example of the Amazon States Language using a parallel state to execute two branches at the same time.",
    "StartAt": "Parallel",
    "States": {
      "Parallel": {
        "Type": "Parallel",
        "Next": "SFN_output_processing",
        "Branches": [
          {
            "StartAt": "wait",
            "States": {
              "wait": {
                "Type": "Wait",
                "Seconds": 10,
                "Next": "check_command_status"
              },
              "check_command_status": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.Status",
                    "StringEquals": "completed",
                    "Next": "End State"
                  },
                  {
                    "Variable": "$.Status",
                    "StringEquals": "pending",
                    "Next": "Check_count"
                  }
                ]
              },
              "Check_count": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.Count",
                    "NumericEquals": 0,
                    "Next": "Terminate_command"
                  },
                  {
                    "Variable": "$.Count",
                    "NumericGreaterThan": 0,
                    "Next": "wait_for_completion"
                  }
                ]
              },
              "Terminate_command": {
                "Type": "Task",
                "Resource": "${Terminate_command}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.Timeout",
                      "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.DataLimitExceeded",
                      "States.Runtime",
                      "States.TaskFailed",
                      "States.Permissions",
                      "States.Timeout",
                      "Lambda.Unknown"
                    ],
                    "Next": "Terminate_command_error"
                  }
                ],
                "End": true
              },
              "Terminate_command_error": {
                "Type": "Pass",
                "Parameters": {
                  "Cause.$": "$.Cause",
                  "State.$": "$$.State",
                  "ErrorMessageFrom": "Terminate_command Function"
                },
                "End": true
              },
              "wait_for_completion": {
                "Type": "Wait",
                "SecondsPath": "$.WaitSeconds",
                "Next": "check_ssm_command_status"
              },
              "check_ssm_command_status": {
                "Type": "Task",
                "Resource": "${check_ssm_command_status}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.Timeout",
                      "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.DataLimitExceeded",
                      "States.Runtime",
                      "States.TaskFailed",
                      "States.Permissions",
                      "States.Timeout",
                      "Lambda.Unknown"
                    ],
                    "Next": "check_ssm_command_status_error"
                  }
                ],
                "Next": "check_command_status"
              },
              "check_ssm_command_status_error": {
                "Type": "Pass",
                "Parameters": {
                  "Cause.$": "$.Cause",
                  "State.$": "$$.State",
                  "ErrorMessageFrom": "check_ssm_command_status Function"
                },
                "End": true
              },
              "End State": {
                "Type": "Pass",
                "End": true
              }
            }
          },
          {
            "StartAt": "Pass",
            "States": {
              "Pass": {
                "Type": "Pass",
                "Parameters": {
                  "Input.$": "$",
                  "Execution.$": "$$.Execution.Id",
                  "StateMachine.$": "$$.StateMachine"
                },
                "End": true
              }
            }
          }
        ]
      },
      "SFN_output_processing": {
        "Type": "Task",
        "Resource": "${SFN_output_processing}",
        "End": true
      }
    }
  }