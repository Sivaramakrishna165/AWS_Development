{
    "Comment": "An example of the Amazon States Language using a parallel state to execute two branches at the same time.",
    "StartAt": "Parallel",
    "States": {
        "Parallel": {
            "Type": "Parallel",
            "Next": "SFN_output_processing",
            "Branches": [
                {
                    "StartAt": "send_Install_Patch_phase_mail",
                    "States": {
                        "send_Install_Patch_phase_mail": {
                            "Type": "Task",
                            "Resource": "${send_Install_Patch_phase_mail}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "send_Install_Patch_phase_mail_error"
                                }
                            ],
                            "Next": "supress_alerts"
                        },
                        "send_Install_Patch_phase_mail_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "send_Install_Patch_phase_mail Function"
                            },
                            "End": true
                        },
                        "supress_alerts": {
                            "Type": "Task",
                            "Resource": "${supress_alerts}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "supress_alerts_error"
                                }
                            ],
                            "Next": "check_stop_apps_condition"
                        },
                        "supress_alerts_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "supress_alerts Function"
                            },
                            "End": true
                        },
                        "check_stop_apps_condition": {
                            "Type": "Task",
                            "Resource": "${check_stop_apps_condition}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "check_stop_apps_condition_error"
                                }
                            ],
                            "Next": "choose_stop_apps_condition"
                        },
                        "check_stop_apps_condition_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "check_stop_apps_condition Function"
                            },
                            "End": true
                        },
                        "choose_stop_apps_condition": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.Stop_Apps_Status",
                                    "StringEquals": "ON",
                                    "Next": "Stop_Apps"
                                },
                                {
                                    "Variable": "$.Stop_Apps_Status",
                                    "StringEquals": "OFF",
                                    "Next": "update_tag_for_app_OFF"
                                }
                            ]
                        },
                        "update_tag_for_app_OFF": {
                            "Type": "Task",
                            "Resource": "${update_tag_for_app_OFF}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "update_tag_for_app_OFF_error"
                                }
                            ],
                            "Next": "Wait"
                        },
                        "update_tag_for_app_OFF_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "update_tag_for_app_OFF Function"
                            },
                            "End": true
                        },
                        "Stop_Apps": {
                            "Type": "Task",
                            "Resource": "${Stop_Apps}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Stop_Apps_error"
                                }
                            ],
                            "Next": "generate_unique_time_for_SFN_stop_apps"
                        },
                        "Stop_Apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Stop_Apps Function"
                            },
                            "End": true
                        },
                        "generate_unique_time_for_SFN_stop_apps": {
                            "Type": "Task",
                            "Resource": "${generate_unique_time_for_SFN_stop_apps}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "generate_unique_time_for_SFN_stop_apps_error"
                                }
                            ],
                            "Next": "Call_SFN_to_Stop_Apps"
                        },
                        "generate_unique_time_for_SFN_stop_apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_time_for_SFN_stop_apps Function"
                            },
                            "End": true
                        },
                        "Call_SFN_to_Stop_Apps": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.sync:2",
                            "Parameters": {
                                "StateMachineArn": "${Call_SFN_to_Start_Apps}",
                                "Name.$": "$.SubSFName",
                                "Input": {
                                    "Patching_Type.$": "$.Patching_Type",
                                    "PatchInstallOn.$": "$.PatchInstallOn",
                                    "CommandId.$": "$.CommandId",
                                    "Status.$": "$.Status",
                                    "Count.$": "$.Count",
                                    "WaitSeconds.$": "$.WaitSeconds",
                                    "S3_Bucket.$": "$.S3_Bucket",
                                    "S3_directory_name.$": "$.S3_directory_name",
                                    "app_action.$": "$.app_action",
                                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                                    "region.$": "$.region"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Call_SFN_to_Stop_Apps_error"
                                }
                            ],
                            "ResultPath": "$.Output",
                            "Next": "update_tag_for_app_ON"
                        },
                        "Call_SFN_to_Stop_Apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Call_SFN_to_Stop_Apps SFN"
                            },
                            "End": true
                        },
                        "update_tag_for_app_ON": {
                            "Type": "Task",
                            "Resource": "${update_tag_for_app_ON}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "update_tag_for_app_ON_error"
                                }
                            ],
                            "Next": "Wait"
                        },
                        "update_tag_for_app_ON_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "update_tag_for_app_ON Function"
                            },
                            "End": true
                        },
                        "Wait": {
                            "Type": "Wait",
                            "Seconds": 600,
                            "Next": "ssm_agent_validation"
                        },
                        "ssm_agent_validation": {
                            "Type": "Task",
                            "Resource": "${ssm_agent_validation}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 20
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "ssm_agent_validation_error"
                                }
                            ],
                            "Next": "Install_Patches"
                        },
                        "ssm_agent_validation_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "ssm_agent_validation Function"
                            },
                            "End": true
                        },
                        "Install_Patches": {
                            "Type": "Task",
                            "Resource": "${Install_Patches}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Install_Patches_error"
                                }
                            ],
                            "Next": "generate_unique_time_for_SFN_install_patches"
                        },
                        "Install_Patches_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Install_Patches Function"
                            },
                            "End": true
                        },
                        "generate_unique_time_for_SFN_install_patches": {
                            "Type": "Task",
                            "Resource": "${generate_unique_time_for_SFN_install_patches}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "generate_unique_time_for_SFN_install_patches_error"
                                }
                            ],
                            "Next": "Call_SFN_to_Install_Patches"
                        },
                        "generate_unique_time_for_SFN_install_patches_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_time_for_SFN_install_patches Function"
                            },
                            "End": true
                        },
                        "Call_SFN_to_Install_Patches": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.sync:2",
                            "Parameters": {
                                "StateMachineArn": "${Call_SFN_to_Install_Patches}",
                                "Name.$": "$.SubSFName",
                                "Input": {
                                    "Patching_Type.$": "$.Patching_Type",
                                    "PatchInstallOn.$": "$.PatchInstallOn",
                                    "CommandId.$": "$.CommandId",
                                    "Status.$": "$.Status",
                                    "Count.$": "$.Count",
                                    "WaitSeconds.$": "$.WaitSeconds",
                                    "S3_Bucket.$": "$.S3_Bucket",
                                    "S3_directory_name.$": "$.S3_directory_name",
                                    "app_action.$": "$.app_action",
                                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                                    "region.$": "$.region"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Call_SFN_to_Install_Patches_error"
                                }
                            ],
                            "ResultPath": "$.Output",
                            "Next": "update_instance_patch_installation_status"
                        },
                        "Call_SFN_to_Install_Patches_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Call_SFN_to_Install_Patches SFN"
                            },
                            "End": true
                        },
                        "update_instance_patch_installation_status": {
                            "Type": "Task",
                            "Resource": "${update_instance_patch_installation_status}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "update_instance_patch_installation_status_error"
                                }
                            ],
                            "Next": "reboot_instances"
                        },
                        "update_instance_patch_installation_status_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "update_instance_patch_installation_status Function"
                            },
                            "End": true
                        },
                        "reboot_instances": {
                            "Type": "Task",
                            "Resource": "${reboot_instances}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "reboot_instances_error"
                                }
                            ],
                            "Next": "Wait_for_reboot_instances"
                        },
                        "reboot_instances_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "reboot_instances Function"
                            },
                            "End": true
                        },
                        "Wait_for_reboot_instances": {
                            "Type": "Wait",
                            "Next": "check_reboot_status",
                            "SecondsPath": "$.Wait_time"
                        },
                        "check_reboot_status": {
                            "Type": "Task",
                            "Resource": "${check_reboot_status}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException",
                                        "Lambda.TooManyRequestsException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "check_dependents_left"
                        },
                        "check_dependents_left": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Or": [
                                        {
                                            "Variable": "$.Updated_reboot_sequence",
                                            "IsPresent": true
                                        },
                                        {
                                            "Variable": "$.Updated_reboot_status_check",
                                            "IsPresent": true
                                        }
                                    ],
                                    "Next": "reboot_dependent_instances"
                                }
                            ],
                            "Default": "check_start_apps_condition"
                        },
                        "reboot_dependent_instances": {
                            "Type": "Task",
                            "Resource": "${reboot_dependent_instances}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException",
                                        "Lambda.TooManyRequestsException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "Wait_for_reboot_dependent_instances"
                        },
                        "Wait_for_reboot_dependent_instances": {
                            "Type": "Wait",
                            "Next": "check_reboot_status",
                            "SecondsPath": "$.Wait_time"
                        },
                        "check_start_apps_condition": {
                            "Type": "Task",
                            "Resource": "${check_start_apps_condition}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "check_start_apps_condition_error"
                                }
                            ],
                            "Next": "choose_start_apps_condition"
                        },
                        "check_start_apps_condition_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "check_start_apps_condition Function"
                            },
                            "End": true
                        },
                        "choose_start_apps_condition": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.Stop_Apps_Status",
                                    "StringEquals": "ON",
                                    "Next": "Start_Apps"
                                },
                                {
                                    "Variable": "$.Stop_Apps_Status",
                                    "StringEquals": "OFF",
                                    "Next": "desupress_alerts"
                                }
                            ]
                        },
                        "Start_Apps": {
                            "Type": "Task",
                            "Resource": "${Start_Apps}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Start_Apps_error"
                                }
                            ],
                            "Next": "generate_unique_time_for_SFN_start_apps"
                        },
                        "Start_Apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Start_Apps Function"
                            },
                            "End": true
                        },
                        "generate_unique_time_for_SFN_start_apps": {
                            "Type": "Task",
                            "Resource": "${generate_unique_time_for_SFN_start_apps}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "generate_unique_time_for_SFN_start_apps_error"
                                }
                            ],
                            "Next": "Call_SFN_to_Start_Apps"
                        },
                        "generate_unique_time_for_SFN_start_apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_time_for_SFN_start_apps"
                            },
                            "End": true
                        },
                        "Call_SFN_to_Start_Apps": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.sync:2",
                            "Parameters": {
                                "StateMachineArn": "${Call_SFN_to_Start_Apps}",
                                "Name.$": "$.SubSFName",
                                "Input": {
                                    "Patching_Type.$": "$.Patching_Type",
                                    "PatchInstallOn.$": "$.PatchInstallOn",
                                    "CommandId.$": "$.CommandId",
                                    "Status.$": "$.Status",
                                    "Count.$": "$.Count",
                                    "WaitSeconds.$": "$.WaitSeconds",
                                    "S3_Bucket.$": "$.S3_Bucket",
                                    "S3_directory_name.$": "$.S3_directory_name",
                                    "app_action.$": "$.app_action",
                                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                                    "region.$": "$.region"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "Call_SFN_to_Start_Apps_error"
                                }
                            ],
                            "ResultPath": "$.Output",
                            "Next": "desupress_alerts"
                        },
                        "Call_SFN_to_Start_Apps_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "Call_SFN_to_Start_Apps SFN"
                            },
                            "End": true
                        },
                        "desupress_alerts": {
                            "Type": "Task",
                            "Resource": "${desupress_alerts}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "desupress_alerts_error"
                                }
                            ],
                            "Next": "trigger_post_task_SFN"
                        },
                        "desupress_alerts_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "supress_alerts Function"
                            },
                            "End": true
                        },
                        "trigger_post_task_SFN": {
                            "Type": "Task",
                            "Resource": "${trigger_post_task_SFN}",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "IntervalSeconds": 3,
                                    "BackoffRate": 2,
                                    "MaxAttempts": 3
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.DataLimitExceeded",
                                        "States.Runtime",
                                        "States.TaskFailed",
                                        "States.Permissions",
                                        "States.Timeout",
                                        "Lambda.Unknown"
                                    ],
                                    "Next": "trigger_post_task_SFN_error"
                                }
                            ],
                            "End": true
                        },
                        "trigger_post_task_SFN_error": {
                            "Type": "Pass",
                            "Parameters": {
                                "Cause.$": "$.Cause",
                                "State.$": "$$.State",
                                "ErrorMessageFrom": "generate_unique_time_for_post_task_SFN Function"
                            },
                            "End": true
                        }
                    }
                },
                {
                    "StartAt": "Pass",
                    "States": {
                        "Pass": {
                            "Type": "Pass",
                            "Parameters": {
                                "Input.$": "$",
                                "Execution.$": "$$.Execution.Id",
                                "StateMachine.$": "$$.StateMachine"
                            },
                            "End": true
                        }
                    }
                }
            ]
        },
        "SFN_output_processing": {
            "Type": "Task",
            "Resource": "${SFN_output_processing}",
            "End": true
        }
    }
}