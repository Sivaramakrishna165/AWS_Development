{
  "Comment": "An example of the Amazon States Language using a parallel state to execute two branches at the same time.",
  "StartAt": "Parallel",
  "States": {
    "Parallel": {
      "Type": "Parallel",
      "Next": "SFN_output_processing",
      "Branches": [
        {
          "StartAt": "trigger_backup_root_volumes",
          "States": {
            "trigger_backup_root_volumes": {
              "Type": "Task",
              "Resource": "${trigger_backup_root_volumes}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "IntervalSeconds": 3,
                  "BackoffRate": 2,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.DataLimitExceeded",
                    "States.Runtime",
                    "States.TaskFailed",
                    "States.Permissions",
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "Next": "trigger_backup_root_volumes_error"
                }
              ],
              "Next": "Wait_for_status_check"
            },
            "trigger_backup_root_volumes_error": {
              "Type": "Pass",
              "Parameters": {
                "Cause.$": "$.Cause",
                "State.$": "$$.State",
                "ErrorMessageFrom": "trigger_backup_root_volumes Function"
              },
              "End": true
            },
            "Wait_for_status_check": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "check_snapshot_backup_status"
            },
            "check_snapshot_backup_status": {
              "Type": "Task",
              "Resource": "${check_snapshot_backup_status}",
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "IntervalSeconds": 3,
                  "BackoffRate": 2,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.DataLimitExceeded",
                    "States.Runtime",
                    "States.TaskFailed",
                    "States.Permissions",
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "Next": "check_snapshot_backup_status_error"
                }
              ],
              "Next": "check_command_status"
            },
            "check_snapshot_backup_status_error": {
              "Type": "Pass",
              "Parameters": {
                "Cause.$": "$.Cause",
                "State.$": "$$.State",
                "ErrorMessageFrom": "check_snapshot_backup_status Function"
              },
              "End": true
            },
            "check_command_status": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.status",
                  "StringEquals": "completed",
                  "Next": "update_tag_backup_status"
                },
                {
                  "Variable": "$.status",
                  "StringEquals": "pending",
                  "Next": "Check_count"
                }
              ]
            },
            "Check_count": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.count",
                  "NumericEquals": 0,
                  "Next": "update_tag_backup_status"
                },
                {
                  "Variable": "$.count",
                  "NumericGreaterThan": 0,
                  "Next": "Wait"
                }
              ]
            },
            "Wait": {
              "Type": "Wait",
              "Seconds": 900,
              "Next": "check_snapshot_backup_status"
            },
            "update_tag_backup_status": {
              "Type": "Task",
              "Resource": "${update_tag_backup_status}",
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "IntervalSeconds": 3,
                  "BackoffRate": 2,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.DataLimitExceeded",
                    "States.Runtime",
                    "States.TaskFailed",
                    "States.Permissions",
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "Next": "update_tag_backup_status_error"
                }
              ],
              "Next": "send_backup_report_to_team"
            },
            "update_tag_backup_status_error": {
              "Type": "Pass",
              "Parameters": {
                "Cause.$": "$.Cause",
                "State.$": "$$.State",
                "ErrorMessageFrom": "update_tag_backup_status Function"
              },
              "End": true
            },
            "send_backup_report_to_team": {
              "Type": "Task",
              "Resource": "${send_backup_report_to_team}",
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "IntervalSeconds": 3,
                  "BackoffRate": 2,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.DataLimitExceeded",
                    "States.Runtime",
                    "States.TaskFailed",
                    "States.Permissions",
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "Next": "send_backup_report_to_team_error"
                }
              ],
              "End": true
            },
            "send_backup_report_to_team_error": {
              "Type": "Pass",
              "Parameters": {
                "Cause.$": "$.Cause",
                "State.$": "$$.State",
                "ErrorMessageFrom": "send_backup_report_to_team"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Pass",
          "States": {
            "Pass": {
              "Type": "Pass",
              "Parameters": {
                "Input.$": "$",
                "Execution.$": "$$.Execution.Id",
                "StateMachine.$": "$$.StateMachine"
              },
              "End": true
            }
          }
        }
      ]
    },
    "SFN_output_processing": {
      "Type": "Task",
      "Resource": "${SFN_output_processing}",
      "End": true
    }
  }
}