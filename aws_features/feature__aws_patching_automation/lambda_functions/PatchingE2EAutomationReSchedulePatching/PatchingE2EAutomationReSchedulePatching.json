{
    "Comment": "State Machine for Pre-Patching activity.",
    "StartAt": "update_patchTags",
    "States": {
        "update_patchTags": {
            "Type": "Task",
            "Resource": "${update_patchTags}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "update_patchTags_error"
                }
            ],
            "Next": "update_configFile"
        },
        "update_patchTags_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "update_patchTags Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "update_configFile": {
            "Type": "Task",
            "Resource": "${update_configFile}",
            "TimeoutSeconds": 300,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "update_configFile_error"
                }
            ],
            "Next": "generate_server_report"
        },
        "update_configFile_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "update_configFile Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "generate_server_report": {
            "Type": "Task",
            "Resource": "${generate_server_report}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 20
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "generate_server_report_error"
                }
            ],
            "Next": "generate_unique_sfn_name"
        },
        "generate_server_report_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "generate_server_report Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "generate_unique_sfn_name": {
            "Type": "Task",
            "Resource": "${generate_unique_sfn_name}",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 20
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "generate_unique_sfn_name_error"
                }
            ],
            "Next": "Call_patch_scan_schedule_phase_SFN"
        },
        "generate_unique_sfn_name_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "execute_patch_scan_error Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "Call_patch_scan_schedule_phase_SFN": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Parameters": {
                "StateMachineArn": "${Call_patch_scan_schedule_phase_SFN}",
                "Name.$": "$.SubSFName",
                "Input": {
                    "TagName.$": "$.TagName",
                    "TagValues.$": "$.TagValues",
                    "S3_Bucket.$": "$.S3_Bucket",
                    "S3_directory_name.$": "$.S3_directory_name",
                    "S3_Folder_Name.$": "$.S3_Folder_Name",
                    "region.$": "$.region"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "Call_patch_scan_schedule_phase_SFN_error"
                }
            ],
            "ResultPath": "$.Output",
            "Next": "generate_patch_scan_report"
        },
        "Call_patch_scan_schedule_phase_SFN_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "Call_patch_scan_schedule_phase_SFN Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "generate_patch_scan_report": {
            "Type": "Task",
            "Resource": "${generate_patch_scan_report}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "generate_patch_scan_report_error"
                }
            ],
            "Next": "check_snow_integration_status"
        },
        "generate_patch_scan_report_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "generate_patch_scan_report Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "check_snow_integration_status": {
            "Type": "Task",
            "Resource": "${check_snow_integration_status}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "check_snow_integration_status_error"
                }
            ],
            "Next": "choose_snow_integration"
        },
        "check_snow_integration_status_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "update_patchTags Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "choose_snow_integration": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.Snow_Integration_Status",
                    "StringEquals": "ON",
                    "Next": "update_change_request"
                },
                {
                    "Variable": "$.Snow_Integration_Status",
                    "StringEquals": "OFF",
                    "Next": "update_CloudWatchRules"
                }
            ]
        },
        "update_change_request": {
            "Type": "Task",
            "Resource": "${update_change_request}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 20
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "update_change_request_error"
                }
            ],
            "Next": "update_CloudWatchRules"
        },
        "update_change_request_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "update_change_request Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "update_CloudWatchRules": {
            "Type": "Task",
            "Resource": "${update_CloudWatchRules}",
            "TimeoutSeconds": 900,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "update_CloudWatchRules_error"
                }
            ],
            "Next": "send_rescheduled_server_list_mail"
        },
        "update_CloudWatchRules_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "update_CloudWatchRules Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "send_rescheduled_server_list_mail": {
            "Type": "Task",
            "Resource": "${send_rescheduled_server_list_mail}",
            "TimeoutSeconds": 300,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "IntervalSeconds": 3,
                    "BackoffRate": 2,
                    "MaxAttempts": 3
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.DataLimitExceeded",
                        "States.Runtime",
                        "States.TaskFailed",
                        "States.Permissions",
                        "States.Timeout",
                        "Lambda.Unknown"
                    ],
                    "Next": "send_rescheduled_server_list_mail_error"
                }
            ],
            "End": true
        },
        "send_rescheduled_server_list_mail_error": {
            "Type": "Pass",
            "Parameters": {
                "Cause.$": "$.Cause",
                "Execution.$": "$$.Execution.Id",
                "StateMachine": "$$.StateMachine",
                "ErrorMessageFrom": "send_rescheduled_server_list_mail Function"
            },
            "Next": "notify_failure_from_reschedule_stepfunction"
        },
        "notify_failure_from_reschedule_stepfunction": {
            "Type": "Task",
            "Resource": "${notify_failure_from_reschedule_stepfunction}",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 2,
                    "BackoffRate": 1.5
                }
            ],
            "End": true
        }
    }
}