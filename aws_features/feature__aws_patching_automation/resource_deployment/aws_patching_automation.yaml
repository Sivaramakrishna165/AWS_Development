AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional template for AWS Patching End to End Automation which will perform the patching activity using Step Function and lambda function and will create the Change Request in SNOW.'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/Module/AwsPatchingAutomation/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pSecretManager:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Notification/DXCSecretsManagerSecretName
    Description: SSM Parameter Secret Manager's Name
  pBackupOptions:
    Description: Enter the Back_up_requirement_option as AMI/ROOTVOL/OFF.
    Type: String
    Default: 'OFF'
  pCloudOpsTeamsChannel:
    Description: Enter the Cloudops teams channel email id.
    Type: String
    Default: 'user@example.com' 
  pPatchScanTriggerDay:
    Description: Enter the numbers of days to run patch scan prior to Patching. example- 2
    Type: String
    Default: '2'
  pEnableSNOWIntegration:
    Description: Enter the Snow_Integration Status as ON/OFF.
    Type: String
    Default: 'OFF'
  pBackupTriggerTime:
    Description: "Enter the Backup Trigger Time in hours."
    Type: 'String'
    Default: '4'

Mappings: 
  RegionMap: 
    us-east-2:
      x64: 'arn:aws:lambda:us-east-2:336392948345:layer:AWSSDKPandas-Python311:16'
    us-east-1:
      x64: 'arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:16'
    us-west-1:
      x64: 'arn:aws:lambda:us-west-1:336392948345:layer:AWSSDKPandas-Python311:16'
    us-west-2:
      x64: 'arn:aws:lambda:us-west-2:336392948345:layer:AWSSDKPandas-Python311:16'
    af-south-1:
      x64: 'arn:aws:lambda:af-south-1:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-east-1:
      x64: 'arn:aws:lambda:ap-east-1:839552336658:layer:AWSSDKPandas-Python311:18'
    ap-south-2:
      x64: 'arn:aws:lambda:ap-south-2:246107603503:layer:AWSSDKPandas-Python311:17'
    ap-southeast-3:
      x64: 'arn:aws:lambda:ap-southeast-3:258944054355:layer:AWSSDKPandas-Python311:18'
    ap-southeast-4:
      x64: 'arn:aws:lambda:ap-southeast-4:945386623051:layer:AWSSDKPandas-Python311:17'
    ap-south-1:
      x64: 'arn:aws:lambda:ap-south-1:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-northeast-3:
      x64: 'arn:aws:lambda:ap-northeast-3:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-northeast-2:
      x64: 'arn:aws:lambda:ap-northeast-2:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-southeast-1:
      x64: 'arn:aws:lambda:ap-southeast-1:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-southeast-2:
      x64: 'arn:aws:lambda:ap-southeast-2:336392948345:layer:AWSSDKPandas-Python311:16'
    ap-northeast-1:
      x64: 'arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python311:16'
    ca-central-1:
      x64: 'arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-central-1:
      x64: 'arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-west-1:
      x64: 'arn:aws:lambda:eu-west-1:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-west-2:
      x64: 'arn:aws:lambda:eu-west-2:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-south-1:
      x64: 'arn:aws:lambda:eu-south-1:774444163449:layer:AWSSDKPandas-Python311:18'
    eu-west-3:
      x64: 'arn:aws:lambda:eu-west-3:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-south-2:
      x64: 'arn:aws:lambda:eu-south-2:982086096842:layer:AWSSDKPandas-Python311:17'
    eu-north-1:
      x64: 'arn:aws:lambda:eu-north-1:336392948345:layer:AWSSDKPandas-Python311:16'
    eu-central-2:
      x64: 'arn:aws:lambda:eu-central-2:956415814219:layer:AWSSDKPandas-Python311:17'
    il-central-1:
      x64: 'arn:aws:lambda:il-central-1:263840725265:layer:AWSSDKPandas-Python311:16'
    me-south-1:
      x64: 'arn:aws:lambda:me-south-1:938046470361:layer:AWSSDKPandas-Python311:18'
    me-central-1:
      x64: 'arn:aws:lambda:me-central-1:593833071574:layer:AWSSDKPandas-Python311:16'
    sa-east-1:
      x64: 'arn:aws:lambda:sa-east-1:336392948345:layer:AWSSDKPandas-Python311:16'
    cn-north-1:
      x64: 'arn:aws-cn:lambda:cn-north-1:406640652441:layer:AWSSDKPandas-Python311:12'
    cn-northwest-1:
      x64: 'arn:aws-cn:lambda:cn-northwest-1:406640652441:layer:AWSSDKPandas-Python311:12'

      
Resources:

  rPatchingTypeSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Patching_Type'
      Type: String
      Value: 'standard_patching'
      Description: provide the type of patching like standard_patching,adhoc_patching

  rBackupRequirementStatusSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Backup_Options'
      Type: String
      Value: !Ref pBackupOptions
      Description: Backup Options- ROOTVOL,AMI,OFF.

  rAdhocBackupRequirementStatusSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AdhocPatchingAutomation/Backup_Options'
      Type: String
      Value: !Ref pBackupOptions
      Description: Backup Options- ROOTVOL,AMI,OFF.

  rSSMBackupTriggerTimeSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Backup_Trigger_Time'
      Type: String
      Value: !Ref pBackupTriggerTime
      Description: Backup Trigger time in hours.

  rAdhocSSMBackupTriggerTimeSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AdhocPatchingAutomation/Backup_Trigger_Time'
      Type: String
      Value: !Ref pBackupTriggerTime
      Description: Backup Trigger time in hours.

  rStopAppsStatusSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Enable_Apps_Stopping'
      Type: String
      Value: 'OFF'
      Description: Enable/Disable App option as OFF/ON.

  rAdhocStopAppsStatusSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AdhocPatchingAutomation/Enable_Apps_Stopping'
      Type: String
      Value: 'OFF'
      Description: Enable/Disable App option as OFF/ON.
  
  rRebootSequenceSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
            - ''
            - - '/DXC/PatchingAutomation/Instance_Reboot_Sequence_'
              - !Ref 'AWS::Region'
      Type: String
      Value: '{}'
      Description: Reboot Sequence for instances in json format.

  rAdhocRebootSequenceSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
            - ''
            - - '/DXC/AdhocPatchingAutomation/Instance_Reboot_Sequence_'
              - !Ref 'AWS::Region'
      Type: String
      Value: '{}'
      Description: Reboot Sequence for instances in json format.


  rPatchGroupOrderSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Patch_Group_Order'
      Type: String
      Value: '{ "totalPatchGroupInOrder": [ "DEV", "PROD" ], "waitDaysBetweenGroups": "7", "windowsPatchingOccurrence": "MONTHLY", "linuxPatchingOccurrence": "QUARTERLY", "quarterlyPatchingMonths_windows": "JAN,APR,JUL,OCT", "quarterlyPatchingMonths_linux": "JAN,APR,JUL,OCT", "weekToStartMontlyPatching_windows": "AFTER_2_TUE_+_7_DAYS", "weekToStartMontlyPatching_linux": "AFTER_2_TUE_+_7_DAYS" }'
      Description: Patch Group Order Information for Patching Automation in json format.

  rAdhocPatchGroupOrderSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AdhocPatchingAutomation/Patch_Group_Order'
      Type: String
      Value: '{ "totalPatchGroupInOrder": [ "DEV", "PROD" ], "waitDaysBetweenGroups": "7", "windowsPatchingOccurrence": "MONTHLY", "linuxPatchingOccurrence": "QUARTERLY", "quarterlyPatchingMonths_windows": "JAN,APR,JUL,OCT", "quarterlyPatchingMonths_linux": "JAN,APR,JUL,OCT", "weekToStartMontlyPatching_windows": "AFTER_2_TUE_+_7_DAYS", "weekToStartMontlyPatching_linux": "AFTER_2_TUE_+_7_DAYS" }'
      Description: Patch Group Order Information for Patching Automation in json format.

  rServicenowIntegrationSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Enable_SNOW_Integration'
      Type: String
      Value: !Ref pEnableSNOWIntegration
      Description: ServiceNow Enable/Disable Options as ON/Off.

  rAdhocServicenowIntegrationSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AdhocPatchingAutomation/Enable_SNOW_Integration'
      Type: String
      Value: !Ref pEnableSNOWIntegration
      Description: ServiceNow Enable/Disable Options as ON/Off.

  rSenderEmailIdSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Sender_Email_ID'
      Type: String
      Value: 'cloudops_user_support@dxc.com'
      Description: SSM Parameter for Sender's Email Id.
      
  rCloudopsTeamsChannelSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/CloudOps_Teams_Channel'
      Type: String
      Value: !Ref pCloudOpsTeamsChannel
      Description: Enter the CloudOps Teams Channel Email_id.
  
  rReferenceCRNumberSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Reference_CR_No'
      Type: String
      Value: '<To be Filled by User, Example: CHG012345>'
      Description: Enter the Reference_CR_No.
      
  rRunPatchScanPriorToPatchingSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Patch_Scan_Trigger_Day'
      Type: String
      Value: !Ref pPatchScanTriggerDay
      Description: Enter the number of days to run Patch Scan Prior to Patching.

  rPatchComplianceReportDestinationSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/Patch_Compliance_Reports_Destination'
      Type: String
      Value: 'cloudops-patching-compliance-reports'
      #Value: Can be Bucket name only or the path inside the bucket separated by /
      Description: DO NOT CHANGE - SSM Parameter for Patch Compliance Reports Destination Bucket Name and path.

  rWaitTimeRetrySSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/PatchingAutomation/WaitTime_And_Retry_After_Reboot'
      Type: String
      Value: '{"Wait": 5,"Retry": 3}'
      Description: Wait time window(in minutes) to check status of source and dependent servers after reboot and specify the number of times to retry status check of the rebooted servers(in json format).
      

  rDxcmsAWSPatchingAutomationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'dxcms.patchingautomation.${AWS::AccountId}.${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: PatchingAutomationBucketRule
            Prefix: patching_reports/PATCHING
            Status: Enabled
            ExpirationInDays: 180
            Transitions:
              - TransitionInDays: 120
                StorageClass: GLACIER
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsPatchingAutomationBucket
      - Key: Owner
        Value: DXC

  rDxcmsAWSPatchingAutomationAdhocBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'dxcms.adhocpatchingautomation.${AWS::AccountId}.${AWS::Region}'
      LifecycleConfiguration:
        Rules:
          - Id: PatchingAutomationBucketRule
            Prefix: patching_reports/PATCHING
            Status: Enabled
            ExpirationInDays: 180
            Transitions:
              - TransitionInDays: 120
                StorageClass: GLACIER
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsPatchingAutomationBucket
      - Key: Owner
        Value: DXC

  pDxcmsPE2EADynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions: 
        - 
          AttributeName: "patchJob_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "patchJob_id"
          KeyType: "HASH"
      TableName: "Ft_dxcms_patching_e2e_automation"

  rDxcmsPatchingAutomationLambdaRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName:  !Sub 'dxcms_pa_iam_lambda_role_${AWS::Region}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: !Sub 'DxcmsPatchingAutomation-AccessPermission-${AWS::Region}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: Ec2Instances
                Action:
                - ec2:CopySnapshot
                - ec2:CreateImage
                - ec2:DescribeImages                
                - ec2:DescribeInstances
                - ec2:DeleteTags
                - ec2:RunScheduledInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeRegions
                - ec2:DescribeSnapshots
                - ec2:DescribeVolumeStatus
                - ec2:StartInstances
                - ec2:RebootInstances
                - ec2:DescribeScheduledInstanceAvailability
                - ec2:DescribeVolumes
                - ec2:CreateSnapshot
                - ec2:DescribeInstanceStatus
                - ec2:DescribeTags
                - ec2:CreateTags
                - ec2:RunInstances
                - ec2:StopInstances
                - ec2:DescribeInstanceEventWindows
                - ec2:DescribeInstanceEventNotificationAttributes
                - ec2:DescribeVolumeAttribute
                - ec2:DescribeImportSnapshotTasks
                - ec2:DescribeScheduledInstances
                - ec2:CreateSnapshots
                - ec2:DescribeInstanceTypes
                - ec2:DescribeFleets
                - ec2:CreateInstanceEventWindow
                - elasticloadbalancing:Describe*
                Resource: "*"
                Effect: Allow

              - Sid: 'secretManager'
                Effect: Allow
                Action:
                - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DXC-AWSMS-Offerings-SecretKeys*'

              - Sid: 'S3' 
                Effect: Allow
                Action:
                - s3:CreateBucket
                - s3:GetObjectAcl
                - s3:GetBucketNotification
                - s3:ListMultipartUploadParts
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
                - s3:PutBucketVersioning
                - s3:GetBucketVersioning
                - s3:ListAllMyBuckets
                - s3:PutObjectRetention
                - s3:GetBucketLocation
                - s3:GetObjectVersion
                Resource: 
                  - !Sub 'arn:aws:s3:::dxcms.patchingautomation.${AWS::AccountId}.${AWS::Region}*'
                  - !Sub 'arn:aws:s3:::dxcms.adhocpatchingautomation.${AWS::AccountId}.${AWS::Region}*'

              - Sid: 'sns'
                Effect: Allow
                Action:
                - sns:Publish
                Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms_pa_sns_*'                                
        - PolicyName: !Sub 'DxcmsPatchingAutomation-Lambda-${AWS::Region}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: 'LogGroup'
                Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                  - logs:GetLogGroupFields
                  - logs:GetLogRecord
                  - logs:GetQueryResults
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rDxcmsPA*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/rDxcmsPASfnCWLogGroup*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ssm/dxc_pa_ssm_stdout*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ssm/AWS-RunPatchBaseline:*'


              - Sid: 'CloudWatch'
                Effect: Allow
                Action:
                - cloudwatch:DisableAlarmActions
                - cloudwatch:DescribeAlarmsForMetric
                - cloudwatch:ListTagsForResource
                - cloudwatch:SetAlarmState
                - cloudwatch:DescribeInsightRules
                - cloudwatch:DisableInsightRules
                - cloudwatch:EnableInsightRules
                - cloudwatch:PutCompositeAlarm
                - cloudwatch:PutInsightRule
                - cloudwatch:TagResource
                - cloudwatch:EnableAlarmActions
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAnomalyDetectors
                - cloudwatch:DescribeAlarmHistory
                Resource: "*"

              - Sid: 'EventBridge'
                Effect: Allow
                Action:
                - events:PutEvents
                - events:DeleteRule
                - events:PutTargets
                - events:EnableRule
                - events:PutRule
                - events:DisableRule
                - events:DescribeRule
                - events:ListRuleNamesByTarget
                - events:ListEventSources
                - events:ListTagsForResource
                - events:ListRules
                - events:RemoveTargets
                - events:DescribeEventSource
                - events:ListTargetsByRule
                Resource:
                - !Sub 'arn:aws:events:${AWS::Region}::event-source/*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/DXCSchedulePatching_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/DXCAdhocSchedulePatching_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/Install_Patch_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/PatchScan_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/Peform_PreTask_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/SNOW_CR_Status_*'
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/Patching_Window_Check_*'
                
              - Sid: 'ReadEventBridge'
                Effect: Allow
                Action:
                - events:DescribeRule
                - events:ListRuleNamesByTarget
                - events:ListRules
                Resource:
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'
              - Sid: 'ssm'
                Effect: Allow
                Action: 
                - ssm:SendCommand
                - ssm:CancelCommand
                - ssm:ListCommands
                - ssm:ListDocumentVersions
                - ssm:ListDocumentMetadataHistory
                - ssm:DescribeMaintenanceWindowSchedule
                - ssm:DescribeInstancePatches
                - ssm:ListInstanceAssociations
                - ssm:GetParameter
                - ssm:GetMaintenanceWindowExecutionTaskInvocation
                - ssm:DescribeAutomationExecutions
                - ssm:GetMaintenanceWindowTask
                - ssm:DescribeMaintenanceWindowExecutionTaskInvocations
                - ssm:DescribeAutomationStepExecutions
                - ssm:ListOpsMetadata
                - ssm:DescribeParameters
                - ssm:ListResourceDataSync
                - ssm:ListDocuments
                - ssm:DescribeMaintenanceWindowsForTarget
                - ssm:PutComplianceItems
                - ssm:ListComplianceItems
                - ssm:GetConnectionStatus
                - ssm:GetMaintenanceWindowExecutionTask
                - ssm:GetOpsItem
                - ssm:GetMaintenanceWindowExecution
                - ssm:ListResourceComplianceSummaries
                - ssm:GetParameters
                - ssm:GetOpsMetadata
                - ssm:ListOpsItemRelatedItems
                - ssm:DescribeOpsItems
                - ssm:PutParameter
                - ssm:DescribeMaintenanceWindows
                - ssm:DescribeEffectivePatchesForPatchBaseline
                - ssm:GetServiceSetting
                - ssm:DescribeAssociationExecutions
                - ssm:DescribeDocumentPermission
                - ssm:ListCommandInvocations
                - ssm:GetAutomationExecution
                - ssm:DescribePatchGroups
                - ssm:GetDefaultPatchBaseline
                - ssm:DescribeDocument
                - ssm:DescribeMaintenanceWindowTasks
                - ssm:ListAssociationVersions
                - ssm:GetPatchBaselineForPatchGroup
                - ssm:PutConfigurePackageResult
                - ssm:DescribePatchGroupState
                - ssm:DescribeMaintenanceWindowExecutions
                - ssm:GetManifest
                - ssm:DescribeMaintenanceWindowExecutionTasks
                - ssm:DescribeInstancePatchStates
                - ssm:DescribeInstancePatchStatesForPatchGroup
                - ssm:GetDocument
                - ssm:GetInventorySchema
                - ssm:GetParametersByPath
                - ssm:GetMaintenanceWindow
                - ssm:DescribeInstanceAssociationsStatus
                - ssm:DescribeAssociationExecutionTargets
                - ssm:GetPatchBaseline
                - ssm:DescribeInstanceProperties
                - ssm:ListInventoryEntries
                - ssm:DescribeAssociation
                - ssm:ListOpsItemEvents
                - ssm:GetDeployablePatchSnapshotForInstance
                - ssm:DescribeSessions
                - ssm:GetParameterHistory
                - ssm:DescribeMaintenanceWindowTargets
                - ssm:DescribePatchBaselines
                - ssm:DescribeEffectiveInstanceAssociations
                - ssm:DescribeInventoryDeletions
                - ssm:DescribePatchProperties
                - ssm:GetInventory
                - ssm:GetOpsSummary
                - ssm:DescribeActivations
                - ssm:GetCommandInvocation
                - ssm:ListComplianceSummaries
                - ssm:DescribeInstanceInformation
                - ssm:ListTagsForResource
                - ssm:DescribeDocumentParameters
                - ssm:ListAssociations
                - ssm:GetCalendarState
                - ssm:DescribeAvailablePatches
                Resource: "*"

              - Sid: 'ses'
                Effect: Allow
                Action: 
                - ses:SendEmail
                - ses:SendTemplatedEmail
                - ses:ListVerifiedEmailAddresses
                - ses:ListIdentities
                - ses:VerifyEmailAddress
                - ses:SendRawEmail
                - ses:ListIdentityPolicies
                - ses:DescribeActiveReceiptRuleSet
                - ses:VerifyEmailIdentity
                - ses:SendCustomVerificationEmail
                - ses:CreateTemplate
                - ses:CreateEmailIdentity
                - ses:GetIdentityVerificationAttributes
                Resource: "*"

              - Sid: 'iam'
                Effect: Allow
                Action:
                - iam:GetRole
                - iam:PassRole
                Resource: 
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/dxcms_pa_iam_cw_role_${AWS::Region}'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/dxcms_pa_iam_sns_role_${AWS::Region}'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/dxcms_pa_iam_sfn_exec_role_${AWS::Region}'

              - Sid: 'AccountAliases'
                Effect: Allow
                Action:
                - iam:ListAccountAliases
                Resource: "*"

              - Sid: lambda
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxcms-pa-lam*'

              - Sid: dynamoDB
                Effect: Allow
                Action:
                - dynamodb:ListTagsOfResource
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:BatchGetItem
                - dynamodb:ConditionCheckItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:CreateTable
                - dynamodb:UpdateTable
                - dynamodb:GetRecords
                Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_dxcms_patching_e2e_automation/stream/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_dxcms_patching_e2e_automation/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_dxcms_patching_e2e_automation"

              - Sid: statemachines
                Effect: Allow
                Action:
                - states:StartExecution
                - states:DescribeExecution
                - states:StopExecution
                Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:dxcms_pa_sfn*'

              - Sid: 'S3' 
                Effect: Allow
                Action:
                - s3:PutObject
                - s3:PutObjectAcl
                #Resource: 'arn:aws:s3:::cloudops-patching-compliance-reports*'
                Resource: !Join
                        - ''
                        - - 'arn:aws:s3:::'
                          - !GetAtt [rPatchComplianceReportDestinationSSMParameter, Value]
                          - '*'                    

      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
                
  rDxcmsPatchingAutomationSFNExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'dxcms_pa_iam_sfn_exec_role_${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 'states.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'DxcmsPatchingAutomation-StateMachine-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: GlobalItems
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxcms-pa-lam*'
                
              - Sid: 'CloudWatchLogs'
                Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                  - logs:UpdateLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                  - logs:CreateLogGroup
                Resource: "*"

              - Sid: 'StateMachineExecution'
                Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:StopExecution
                Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:dxcms_pa_sfn*'
                                
              - Sid: 'eventbridge'
                Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'

              - Sid: 'SNSPermission'
                Effect: Allow
                Action:
                - sns:Publish
                - sns:Subscribe
                - sns:ConfirmSubscription
                - sns:CreateTopic
                - sns:ListSubscriptions
                Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms_pa_sns_*'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPatchingAutomationSNSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'dxcms_pa_iam_sns_role_${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ssm.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'DxcmsPatchingAutomation-SNS-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Sid: 'SNS'
              Effect: Allow
              Action:
              - sns:Publish
              Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms_pa_sns_*'

            - Sid: LambdaInvokeFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxcms-pa-lam-*'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
                
  rDxcmsPatchingAutomationCWRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'dxcms_pa_iam_cw_role_${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'events.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'DxcmsPatchingAutomation-CloudWatch-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - states:StartExecution
              Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:dxcms_pa_sfn*'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPatchingAutomationPatchNotifyFailureSNSTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt 
                    - rDxcmsPAPatchNotifyFailureLA
                    - Arn
          Protocol: lambda
        - !Ref 'AWS::NoValue'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
      TopicName: dxcms_pa_sns_notify_patch_failure

  rDxcmsPatchingAutomationPatchNotifyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref rDxcmsPatchingAutomationPatchNotifyFailureSNSTopic
      FunctionName: !GetAtt rDxcmsPAPatchNotifyFailureLA.Arn


  rDxcmsPAAppNotifyFailureSNSTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt 
                    - rDxcmsPANotifyAppsIssueLA
                    - Arn
          Protocol: lambda
        - !Ref 'AWS::NoValue'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
      TopicName: dxcms_pa_sns_app_notify_failure

  rDxcmsPAAppNotifyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref rDxcmsPAAppNotifyFailureSNSTopic
      FunctionName: !GetAtt rDxcmsPANotifyAppsIssueLA.Arn
  
  rDxcmsPAHealthCheckStatusSNSTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt 
                    - rDxcmsPASNSTriggerLambda
                    - Arn
          Protocol: lambda
        - !Ref 'AWS::NoValue'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
      TopicName: dxcms_pa_sns_check_health_status

  rDxcmsPAHealthCheckLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref rDxcmsPAHealthCheckStatusSNSTopic
      FunctionName: !GetAtt rDxcmsPASNSTriggerLambda.Arn

  rDxcmsPACreateDowntimeTagLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: create_downtime_tag.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
             
          Patching_Type: "/DXC/PatchingAutomation/Patching_Type"
      Description: 'Lambda to create the Downtime tag on the eligible EC2 instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/create_downtime_tag.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-create-downtime-tag'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACreateDowntimeTagCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACreateDowntimeTagLA

  rDxcmsPAEnableRerunLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: enable_rerun.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to enable re-run the state machines if failures occures.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/enable_rerun.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-enable-rerun'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAEnableRerunCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAEnableRerunLA

  rDxcmsPANotifyAppsIssueLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: notify_app_issue.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cloudOpsTeamsChannel: "/DXC/PatchingAutomation/CloudOps_Teams_Channel"
      Description: 'Lambda to send the email to notify the app issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/notify_app_issue.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-notify-app-issue'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPANotifyAppsIssueCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPANotifyAppsIssueLA

  rDxcmsPAUpdateDynamodbLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_dynamodb.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the dynamo db table.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_dynamodb.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-dynamodb'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateDynamodbCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateDynamodbLA

  rDxcmsPACreatePatchScheduleLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: enable_patching_automation.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Patching_Type: "/DXC/PatchingAutomation/Patching_Type"
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cloudOpsTeamsChannel: "/DXC/PatchingAutomation/CloudOps_Teams_Channel"
          region: !Ref "AWS::Region"
          Sfnname: !GetAtt 
            - rDxcmsPASchedulePatchingSFN
            - Name
          StepFunArn: !Ref rDxcmsPASchedulePatchingSFN
          StepFunRoleArn: !GetAtt
            - rDxcmsPatchingAutomationCWRole
            - Arn
      Description: 'Lambda to enable the patching automation solution.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/enable_patching_automation.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-enable-patching-automation'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC      

  rDxcmsPACreatePatchScheduleCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACreatePatchScheduleLA
          
  rDxcmsPAGeneratePatchTagsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_patchTags.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          PatchGroupOrder: "/DXC/PatchingAutomation/Patch_Group_Order"
          AdhocPatchGroupOrder: "/DXC/AdhocPatchingAutomation/Patch_Group_Order"
      Description: 'Lambda to create the PatchInstallOn tag on eligible EC2 instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/generate_patchTags.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-patchTags'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAGeneratePatchTagsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGeneratePatchTagsLA
      
  rDxcmsPAGenerateServerReportLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_server_report.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to generate the server report and upload to S3 bucket.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_server_report.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-server-report'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAGenerateServerReportCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGenerateServerReportLA
   
  rDxcmsPAGenerateConfigFileLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_configFile.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          PatchScanTriggerDay: "/DXC/PatchingAutomation/Patch_Scan_Trigger_Day"
          BackupTriggerTime: "/DXC/PatchingAutomation/Backup_Trigger_Time"
          PatchGroupOrder: "/DXC/PatchingAutomation/Patch_Group_Order"
          AdhocBackupTriggerTime: "/DXC/AdhocPatchingAutomation/Backup_Trigger_Time"
          AdhocPatchGroupOrder: "/DXC/AdhocPatchingAutomation/Patch_Group_Order"
      Description: 'Lambda to generate the configuration file and upload to S3 bucket.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_configFile.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-configFile'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAGenerateConfigFileCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGenerateConfigFileLA

  rDxcmsPACreateCloudWatchRulesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: create_cloudwatchRule.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Sfnname_PatchScan: !GetAtt 
            - rDxcmsPAPatchScanReportSFN
            - Name
          StepFunArn_PatchScan: !Ref rDxcmsPAPatchScanReportSFN
          Sfnname_InstallPatch: !GetAtt
            - rDxcmsPATriggerPatchingSFN
            - Name
          StepFunArn_InstallPatch: !Ref rDxcmsPATriggerPatchingSFN
          SfnNamePreTaskExecution: !GetAtt
            - rDxcmsPAPerformPreTasksSFN
            - Name
          SfnArnPreTaskExecution: !Ref rDxcmsPAPerformPreTasksSFN
          StepFunRoleArn: !GetAtt
            - rDxcmsPatchingAutomationCWRole
            - Arn
          Service_now_status_check: !Ref rDxcmsPACheckCRStatusLA
          Service_now_status_check_Arn: !GetAtt
            - rDxcmsPACheckCRStatusLA
            - Arn
          PatchingWindow_status_check: !Ref rDxcmsPACheckPWStatusLA
          PatchingWindow_status_check_Arn: !GetAtt
            - rDxcmsPACheckPWStatusLA
            - Arn                                                                                                           
      Description: 'Lambda to create the required cloudwatch rules for the patching automation.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/create_cloudwatchRule.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-create-cloudwatchRule'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACreateCloudWatchRulesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACreateCloudWatchRulesLA

  rDxcmsPACreateChangeRequestLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: create_change_request.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          Secret_Name: !Ref pSecretManager
          Reference_CR_No: "/DXC/PatchingAutomation/Reference_CR_No"
      Description: 'Lambda to create change request in service-now.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/create_change_request.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-create-change-request'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACreateChangeRequestCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACreateChangeRequestLA

  rDxcmsPACheckCRStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_cr_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Secret_Name: !Ref pSecretManager
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to check the change request status from service-now.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_cr_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-cr-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACheckCRStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckCRStatusLA

  rDxcmsPACheckPWStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_patchingwindow_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Secret_Name: !Ref pSecretManager
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cleanup_lambda_name: "dxcms-pa-lam-cwr-tag-cleanup"
      Description: 'Lambda to check the patching window status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_patchingwindow_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-pw-status'
      Timeout: 300
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACheckPWStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckPWStatusLA

  rDxcmsPASendServerListMailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_server_list_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the server_report & patch_scan_report via mail to cloudops team/owner.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_server_list_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-server-list-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPASendServerListMailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendServerListMailLA

  rDxcmsPANotifyScheduleFailureLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: notify_schedule_failure.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the email to notify about the patching schedule failure.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/notify_schedule_failure.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-notify-schedule-failure'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPANotifyScheduleFailureLACWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPANotifyScheduleFailureLA

  rDxcmsPAExecutePatchScanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: execute_patch_scan.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to perform the patch scan on the eligible instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/execute_patch_scan.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-execute-patch-scan'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAExecutePatchScanLACWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAExecutePatchScanLA

  rDxcmsPAExecutePatchScanForSchedulePhaseLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: execute_patch_scan_for_schedule_phase.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to perform the patch scan on the eligible instances at the schedule phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/execute_patch_scan_for_schedule_phase.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-execute-patch-scan-for-schedule-phase'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAExecutePatchScanForSchedulePhaseLACWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAExecutePatchScanForSchedulePhaseLA

  rDxcmsPAGeneratePatchScanReportLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_patchScan_report.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to generate the patch scan report and upload it to s3 bucket.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_patchScan_report.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-patchScan-report'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAGeneratePatchScanReportLACWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGeneratePatchScanReportLA

  rDxcmsPASendPatchScanReportMailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_patchscan_report_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the patch scan report via email to cloudops team/owner.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_patchscan_report_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-patchscan-report-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPASendPatchScanReportMailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendPatchScanReportMailLA


  rDxcmsPACommunicationMailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_Install_Patch_phase_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the patch scan report via email to cloudops team/owner at the patch installation phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_Install_Patch_phase_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-Install-Patch-phase-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACommunicationMailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACommunicationMailLA

  rDxcmsPAEnableDisableCWAlertsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: enable_disable_alarms.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to enable or disable the cloudwatch alarms based on the input.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/enable_disable_alarms.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-enable-disable-alarms'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAEnableDisableCWAlertsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAEnableDisableCWAlertsLA

  rDxcmsPAStartStopApplicationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: start_stop_application.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          startapp : 'dxcms_pa_start_apps_on_instances'
          stopapp :  'dxcms_pa_stop_apps_on_instances'
          SnsTopic : !Ref rDxcmsPAAppNotifyFailureSNSTopic
          SnsIamRole : !GetAtt 
            - rDxcmsPatchingAutomationSNSRole
            - Arn
      Description: 'Lambda to execute the customized SSM Run command document to start or stop the applications.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/start_stop_application.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-start-stop-application'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAStartStopApplicationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStartStopApplicationLA


  rDxcmsPAExecutePatchInstallationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: install_patches.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          snsTopic: !Ref rDxcmsPatchingAutomationPatchNotifyFailureSNSTopic
          snsIAMRole: !GetAtt 
            - rDxcmsPatchingAutomationSNSRole
            - Arn
      Description: 'Lambda to perform the patch installation on eligible ec2 instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/install_patches.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-install-patches'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPADXCExecutePatchInstallationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAExecutePatchInstallationLA

  rDxcmsPAUpdatePatchInstallStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_instance_patch_installation_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the PatchInstallOn tag value after patch installation phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_instance_patch_installation_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-instance-patch-installation-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAUpdatePatchInstallStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdatePatchInstallStatusLA

  rDxcmsPARebootInstancesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: reboot_instances.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          WaitTimeRetry: "/DXC/PatchingAutomation/WaitTime_And_Retry_After_Reboot"
          InstanceRebootSequence: "/DXC/PatchingAutomation/Instance_Reboot_Sequence_"
          AdhocInstanceRebootSequence: "/DXC/AdhocPatchingAutomation/Instance_Reboot_Sequence_"
      Description: 'Lambda to reboot the ec2-instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/reboot_instances.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-reboot-instances'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPARebootInstancesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPARebootInstancesLA

  rDxcmsPAPatchNotifyFailureLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: notify_patch_issue.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cloudOpsTeamsChannel: "/DXC/PatchingAutomation/CloudOps_Teams_Channel"
      Description: 'Lambda to send the email notification about the patch installation failure'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/notify_patch_issue.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-notify-patch-issue'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPatchNotifyFailureCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAPatchNotifyFailureLA


  rDxcmsPACallPostPatchingSFLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: call_post_patch_step_function.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          SfnArn: !Ref rDxcmsPAPerformPostTasksSFN
      Description: 'Lambda to trigger the PostPatching step function.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/call_post_patch_step_function.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-call-post-patch-step-function'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACallPostPatchingSFCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACallPostPatchingSFLA



  rDxcmsPACheckSSMCmdStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_ssm_command_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to check the ssm command id status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_ssm_command_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-ssm-command-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACheckSSMCmdStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckSSMCmdStatusLA


  rDxcmsPATerminateSSMCommandLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: terminate_ssm_command.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to terminate/cancel the ssm run command.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/terminate_ssm_command.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-terminate-ssm-command'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPATerminateSSMCommandCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPATerminateSSMCommandLA

  rDxcmsPATriggerBackupRootVolumesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_backup_root_volumes.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          BackupOptions: "/DXC/PatchingAutomation/Backup_Options"
          AdhocBackupOptions: "/DXC/AdhocPatchingAutomation/Backup_Options"
      Description: 'Lambda to trigger the root volume backup for the instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_backup_root_volumes.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-trigger-backup-root-volumes'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPATriggerBackupRootVolumesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPATriggerBackupRootVolumesLA

  rDxcmsPACheckSnapshotBackupStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_snapshot_backup_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          BackupOptions: "/DXC/PatchingAutomation/Backup_Options"
          AdhocBackupOptions: "/DXC/AdhocPatchingAutomation/Backup_Options"
      Description: 'Lambda to check the snapshot backup status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_snapshot_backup_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-snapshot-backup-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACheckSnapshotBackupStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckSnapshotBackupStatusLA

  rDxcmsPAUpdateTagForBackupStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_tag_backup_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the PatchInstallOn tag value after the backup creation.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_tag_backup_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-tag-backup-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAUpdateTagForBackupStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateTagForBackupStatusLA

  rDxcmsPASendBackupReportToTeamLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_backupReport_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          BackupOptions: "/DXC/PatchingAutomation/Backup_Options"
          AdhocBackupOptions: "/DXC/AdhocPatchingAutomation/Backup_Options"
      Description: 'Lambda to send the backup report to cloudops team/owner via email.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_backupReport_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-backupReport-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPASendBackupReportToTeamCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendBackupReportToTeamLA

  rDxcmsPAPerformHealthCheckLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: perform_health_check.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          snsTopic: !Ref rDxcmsPAHealthCheckStatusSNSTopic
          snsIAMRole: !GetAtt 
            - rDxcmsPatchingAutomationSNSRole
            - Arn
          SSM_CWLogGroup_Name: !Ref rDxcmsPACWSSMOutLogGroup
      Description: 'Lambda to perform the health checks on the ec2 instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/perform_health_check.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-perform-health-check'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPerformHealthCheckCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAPerformHealthCheckLA

  rDxcmsPASNSTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: SNS_trigger_lambda.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda will be triggered by the sns topic, it will update the dynamo db table for the ssm command id status for health checks.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/SNS_trigger_lambda.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-SNS-trigger-lambda'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPASNSTriggerLambdaCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASNSTriggerLambda


  rDxcmsPAGenerateHealthCheckReportLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_health_check_report.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          SSM_CWLogGroup_Name: !Ref rDxcmsPACWSSMOutLogGroup
      Description: 'Lambda to generate the health check reports for the ec2 instances and upload to it s3.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_health_check_report.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-health-check-report'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAGenerateHealthCheckReportCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGenerateHealthCheckReportLA

  rDxcmsPACheckHCSSMCmdStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_hc_ssm_command_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to check the command id status for health checks.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_hc_ssm_command_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-hc-ssm-command-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPACheckHCSSMCmdStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckHCSSMCmdStatusLA


  rDxcmsPATerminateHCSSMCommandLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: terminate_hc_ssm_command.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to terminate the ssm run command for health checks.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/terminate_hc_ssm_command.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-terminate-hc-ssm-command'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPATerminateHCSSMCommandCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPATerminateHCSSMCommandLA

  rDxcmsPACompareHealthCheckLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: compare_health_check_files.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to compare the pre health checks report with post health check reports and generate the consolidated health check report.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/compare_health_check_files.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-compare-health-check-files'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPACompareHealthCheckCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACompareHealthCheckLA
          
  rDxcmsPASendPostPatchingMailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_post_patch_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the reports to cloudops team/owner via email.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_post_patch_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-post-patch-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPASendPostPatchingMailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendPostPatchingMailLA

  rDxcmsPAUpdatePatchInstallOnTagLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: updating_PatchInstallOn_tag.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the patch install on tag.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/updating_PatchInstallOn_tag.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-Patch-Install-tag'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPADeleteCWRulesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdatePatchInstallOnTagLA

  rDxcmsPADeleteCWRulesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: delete_cloudwatch_rules.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          standard_snow_status: "/DXC/PatchingAutomation/Enable_SNOW_Integration"
          adhoc_snow_status: "/DXC/AdhocPatchingAutomation/Enable_SNOW_Integration"
          PatchingWindow_status_check: !Ref rDxcmsPACheckPWStatusLA
          Service_now_status_check: !Ref rDxcmsPACheckCRStatusLA
      Description: 'Lambda to delete the cloudwatch rules after the patching activity.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/delete_cloudwatch_rules.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-delete-cloudwatch-rules'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPADeleteCWRulesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPADeleteCWRulesLA


  rDxcmsPADeletePatchTagsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: delete_patchTags.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to delete the Tag from the ec2 instances during the post-patching activity.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/delete_patchTags.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-delete-patchTags'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPADeletePatchTagsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPADeletePatchTagsLA

  rDxcmsPAGenerateUniqueSFNameLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_unique_step_function_name.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to generate the unique execution id for the step function.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_unique_step_function_name.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-unique-step-function-name'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAGenerateUniqueSFNameCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGenerateUniqueSFNameLA

  rDxcmsPAProcessSFOutputLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: state_machine_output_processing.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to process the output of the step function.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/state_machine_output_processing.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-state-machine-output-processing'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAProcessSFOutputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAProcessSFOutputLA

  rDxcmsPAStartStoppedStateInstancesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: start_stopped_state_instances.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to Start the Stopped State Instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/start_stopped_state_instances.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-start-stopped-state-instances'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAStartStoppedStateInstancesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStartStoppedStateInstancesLA

  rDxcmsPAStopStoppedStateInstancesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: stop_stopped_state_instances.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to Stop the Stopped State Instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/stop_stopped_state_instances.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-stop-stopped-state-instances'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAStopStoppedStateInstancesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStopStoppedStateInstancesLA

  rDxcmsPAUpdateTagForAppOFFLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_tag_app_start_stop_off.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the tag on Instances based on the Stp App status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_tag_app_start_stop_off.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-tag-app-start-stop-off'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateTagForAppOFFCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateTagForAppOFFLA

  rDxcmsPABackupRequirementStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: backup_requirement_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          BackupOptions: "/DXC/PatchingAutomation/Backup_Options"
          AdhocBackupOptions: "/DXC/AdhocPatchingAutomation/Backup_Options"
      Description: 'Lambda to check the Backup requirement status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/backup_requirement_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-backup-requirement-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPABackupRequirementStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPABackupRequirementStatusLA

  rDxcmsPASnowIntegrationStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: snow_integration_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          SNOWIntegration: "/DXC/PatchingAutomation/Enable_SNOW_Integration"
          AdhocSNOWIntegration: "/DXC/AdhocPatchingAutomation/Enable_SNOW_Integration"
      Description: 'Lambda to check the Snow Integration Status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/snow_integration_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-snow-integration-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPASnowIntegrationStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASnowIntegrationStatusLA

  rDxcmsPAGeneratePatchScanReportSchedulePhaseLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_patchScan_report_schedule_phase.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to perform the Patch scan on instances at the schedule phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_patchScan_report_schedule_phase.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-patchScan-report-schedule-phase'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAGeneratePatchScanReportSchedulePhaseCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGeneratePatchScanReportSchedulePhaseLA

  rDxcmsPAStopAppsStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: stop_apps_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          AdhocEnableAppsStopping: "/DXC/AdhocPatchingAutomation/Enable_Apps_Stopping"
          EnableAppsStopping: "/DXC/PatchingAutomation/Enable_Apps_Stopping"
      Description: 'Lambda to check the Stop App Status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/stop_apps_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-stop-apps-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAStopAppsStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStopAppsStatusLA

  rDxcmsPAUpdateBackupRequirementTagLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_tag_for_backup_requirement.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the Tag on instance based on the Backup Requirement Status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_tag_for_backup_requirement.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-tag-for-backup-requirement'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateBackupRequirementTagCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateBackupRequirementTagLA
      
  rDxcmsPAUpdateStopAppTagLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_tag_app_start_stop.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to update the Tag on instance based on the Stop App Status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_tag_app_start_stop.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-tag-app-start-stop'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateStopAppTagCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateStopAppTagLA

  rDxcmsPAStartStoppedStateInstancesSchedulePhaseLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: start_stopped_state_instances_schedule_phase.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to Start the Stopped State Instances at the Schedule Phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/start_stopped_state_instances_schedule_phase.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-start-stopped-state-instances-schedule-phase'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAStartStoppedStateInstancesSchedulePhaseCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStartStoppedStateInstancesSchedulePhaseLA

  rDxcmsPASSMAgentValidationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: ssm_agent_validation.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to Validate the SSM Agent Status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/ssm_agent_validation.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-ssm-agent-validation'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPASSMAgentValidationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASSMAgentValidationLA
  
  rDxcmsPATerminatePatchScanSsmCmdLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: terminate_patch_scan_ssm_cmd.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to terminate the ssm command id for the patch scan phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/terminate_patch_scan_ssm_cmd.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-terminate-patch-scan-ssm-cmd'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPATerminatePatchScanSsmCmdCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPATerminatePatchScanSsmCmdLA

  rDxcmsPACheckPatchScanCmdStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_patch_scan_cmd_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to check the ssm command id status for the patch scan phase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_patch_scan_cmd_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-patch-scan-cmd-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPACheckPatchScanCmdStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckPatchScanCmdStatusLA
  
  rDxcmsPAStopStoppedStateInstancesSchedulePhaseLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: stop_stopped_state_instances_schedule_phase.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to Stop the Stopped State Instances at SchedulePhase.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/stop_stopped_state_instances_schedule_phase.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-stop-stopped-state-instances-schedule-phase'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAStopStoppedStateInstancesSchedulePhaseCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStopStoppedStateInstancesSchedulePhaseLA

  rDxcmsPACloudWatchRuleCleanupValidationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: cw_rule_cleanup_validation.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to validate amazon evenetbridge rule cleanup .'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/cw_rule_cleanup_validation.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-cw-rule-cleanup-validation'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsCloudWatchRuleCleanupValidationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACloudWatchRuleCleanupValidationLA
      
  rDxcmsPATagCleanupValidationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: tag_cleanup_validation.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to validate PatchInstallOn Tag cleanup .'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/tag_cleanup_validation.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-tag-cleanup-validation'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsTagCleanupValidationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPATagCleanupValidationLA
      
  rDxcmsPASendMailCleanupValidationLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_cleanup_validation_report_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send cleanup validation mail.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/send_cleanup_validation_report_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-cleanup-validation-report-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsSendMailCleanupValidationCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendMailCleanupValidationLA

  rDxcmsPACleanupCloudwatchRuleTagLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: cleanup_cwr_tag.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          PatchingWindow_status_check: !Ref rDxcmsPACheckPWStatusLA
          Service_now_status_check: !Ref rDxcmsPACheckCRStatusLA
      Description: 'Lambda to cleanup the resource in case of patching windows missed.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/cleanup_cwr_tag.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-cwr-tag-cleanup'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPACleanupCloudwatchRuleTagCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACleanupCloudwatchRuleTagLA
      
  rDxcmsPAStateMachinePatchScanOutputProcessingLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: state_machine_patch_scan_output_processing.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to Process the output for the patch scan state machine.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/state_machine_patch_scan_output_processing.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-state-machine-patch-scan-output-processing'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAStateMachinePatchScanOutputProcessingCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAStateMachinePatchScanOutputProcessingLA


  rDxcmsPAGeneratePatchComplianceReportLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_patchcompliance_report.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          destination_bucket_name: "/DXC/PatchingAutomation/Patch_Compliance_Reports_Destination"
          #destination_key: ""
      Description: 'Lambda to generate the Patch compliance report beginning of each month and post patching.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_patchcompliance_report.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-generate-patchcompliance-report'
      Timeout: 300
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
      Layers: 
      - !FindInMap [ RegionMap, !Ref "AWS::Region", x64 ]

  rDxcmsPAGeneratePatchComplianceReportCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAGeneratePatchComplianceReportLA

  rDxcmsPAScheduledPatchComplianceReportCWRule:
      Type: "AWS::Events::Rule"
      Properties:
        Description: "Rule to generate the Patch Compliance Report Every Month and send it to CloudOps Bucket"
        Name: !Sub "Scheduled_PatchComplianceReport_${AWS::Region}"
        ScheduleExpression: cron(00 12 01 * ? *)
        State: "ENABLED"
        Targets:
          - Arn: !GetAtt 
            - rDxcmsPAGeneratePatchComplianceReportLA
            - Arn
            Id: "ScheduledPatchComplianceTargetLambda"
            Input: '{ "Run_type" : "Scheduled" }'
        
  rDxcmsPAScheduledPatchComplianceLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rDxcmsPAScheduledPatchComplianceReportCWRule.Arn
      FunctionName: !GetAtt rDxcmsPAGeneratePatchComplianceReportLA.Arn
      
      
  rDxcmsPAPostPatchComplianceReportCWRule:
      Type: "AWS::Events::Rule"
      Properties:
        Description: "Rule to generate the Patch Compliance Report after every successful Patching activity and send it to CloudOps Bucket"
        Name: !Sub "Post_PatchComplianceReport_${AWS::Region}"
        EventPattern: { 
                        "source": ["aws.states"],  
                        "detail-type": ["Step Functions Execution Status Change"  ],  
                        "detail": { 
                                    "status": ["SUCCEEDED"],    
                                    "stateMachineArn": [!Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:dxcms_pa_sfn_perform_post_tasks"]  
                                    }
                       }
        
        State: "ENABLED"
        Targets:
          - Arn: !GetAtt
            - rDxcmsPAGeneratePatchComplianceReportLA
            - Arn
            Id: "PostPatchComplianceTargetLambda"
            Input: '{ "Run_type": "PostPatching" }'
        
  rDxcmsPAPostPatchComplianceLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt rDxcmsPAPostPatchComplianceReportCWRule.Arn
      FunctionName: !GetAtt rDxcmsPAGeneratePatchComplianceReportLA.Arn

  rDxcmsPAUpcomingPatchingCycleReportLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: generate_upcoming_patching_cycle_report.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          destination_bucket_name: "/DXC/PatchingAutomation/Patch_Compliance_Reports_Destination"
          customer_name: "/DXC/Main/CustomerName"
      Description: 'Lambda to generate the Upcoming Patch cycle report.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/generate_upcoming_patching_cycle_report.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-upcoming-patching-report'
      Timeout: 300
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
        
  rDxcmsPAUpcomingPatchingCycleReportCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpcomingPatchingCycleReportLA

  rDxcmsPAUpcomingPatchingCycleReportCWRule:
      Type: "AWS::Events::Rule"
      Properties:
        Description: "Rule to generate the Upcoming Patch cycle report and send it to CloudOps Bucket(Weekly)"
        Name: !Sub "UpcomingPatchingCycleReport_${AWS::Region}"
        ScheduleExpression: cron(00 12 01,08,15,22,29 * ? *)
        State: "ENABLED"
        Targets:
          - Arn: !GetAtt
            - rDxcmsPAUpcomingPatchingCycleReportLA
            - Arn
            Id: "UpcomingPatchingCycleTargetLambda"

  rDxcmsPAUpcomingPatchingCycleLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt rDxcmsPAUpcomingPatchingCycleReportCWRule.Arn
      FunctionName: !GetAtt rDxcmsPAUpcomingPatchingCycleReportLA.Arn

  rDxcmsPACheckRebootStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_reboot_status.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Description: 'Lambda to check status after reboot of source and dependents servers.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_reboot_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-check-reboot-status'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPACheckRebootStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPACheckRebootStatusLA
          
  rDxcmsPARebootDependentInstancesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: reboot_dependent_instances.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          WaitTimeRetry: "/DXC/PatchingAutomation/WaitTime_And_Retry_After_Reboot"
      Description: 'Lambda to reboot dependents servers(for reboot sequence refer ssm parameter)'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/reboot_dependent_instances.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-reboot-dependent-instances'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
        
  rDxcmsPARebootDependentInstancesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPARebootDependentInstancesLA
       
  rDxcmsPAUpdatePatchTagsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_patchTags.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          PatchGroupOrder: "/DXC/PatchingAutomation/Patch_Group_Order"
      Description: 'Lambda to update PatchInstallOn tags for Reschedule.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/update_patchTags.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-patchTags'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAUpdatePatchTagsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdatePatchTagsLA


  rDxcmsPAUpdateConfigFileLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_configFile.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          PatchScanTriggerDay: "/DXC/PatchingAutomation/Patch_Scan_Trigger_Day"
          BackupTriggerTime: "/DXC/PatchingAutomation/Backup_Trigger_Time"
      Description: 'Lambda to update config file and dynamodb.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_configFile.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-configFile'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateConfigFileCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateConfigFileLA

  rDxcmsPAUpdateChangeRequestLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_change_request.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Secret_Name: "DXC-AWSMS-Offerings-SecretKeys"
          Reference_CR_No: "/DXC/PatchingAutomation/Reference_CR_No"
      Description: 'Lambda to create a new change request for the rescheduled activity.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_change_request.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-change-request'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateChangeRequestCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateChangeRequestLA

  rDxcmsPAUpdateCloudWatchRulesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_cloudwatchRule.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          Sfnname_PatchScan: !GetAtt 
            - rDxcmsPAPatchScanReportSFN
            - Name
          StepFunArn_PatchScan: !Ref rDxcmsPAPatchScanReportSFN
          Sfnname_InstallPatch: !GetAtt
            - rDxcmsPATriggerPatchingSFN
            - Name
          StepFunArn_InstallPatch: !Ref rDxcmsPATriggerPatchingSFN
          SfnNamePreTaskExecution: !GetAtt
            - rDxcmsPAPerformPreTasksSFN
            - Name
          SfnArnPreTaskExecution: !Ref rDxcmsPAPerformPreTasksSFN
          StepFunRoleArn: !GetAtt
            - rDxcmsPatchingAutomationCWRole
            - Arn
          Service_now_status_check: !Ref rDxcmsPACheckCRStatusLA
          Service_now_status_check_Arn: !GetAtt
            - rDxcmsPACheckCRStatusLA
            - Arn
          PatchingWindow_status_check: !Ref rDxcmsPACheckPWStatusLA
          PatchingWindow_status_check_Arn: !GetAtt
            - rDxcmsPACheckPWStatusLA
            - Arn                                                                                                           
      Description: 'Lambda to update cloudwatch rules for the patching automation.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_cloudwatchRule.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-update-cloudwatchRule'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPAUpdateCloudWatchRulesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPAUpdateCloudWatchRulesLA


  rDxcmsPASendRescheduledServerListMailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_rescheduled_server_list_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the server_report & patch_scan_report via mail to cloudops team/owner.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_rescheduled_server_list_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-rescheduled-server-list-mail'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPASendRescheduledServerListMailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendRescheduledServerListMailLA
          
  rDxcmsPASendCancelledCleanupEmailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_cancelled_cleanup_mail.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the notification regarding cancelled patching schedule via mail to cloudops team/owner.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_cancelled_cleanup_mail.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-send-cancelled-cleanup-mail' 
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPASendCancelledCleanupEmailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPASendCancelledCleanupEmailLA


  rDxcmsPANotifyCancelFailureLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: notify_cancel_failure.lambda_handler
      Role: !GetAtt 
        - rDxcmsPatchingAutomationLambdaRole
        - Arn
      Environment:
        Variables:
          cloudOpsEmailId: "/DXC/Notification/DXCNotifyEmail"
          SenderEmailId: "/DXC/PatchingAutomation/Sender_Email_ID"
      Description: 'Lambda to send the email to notify about the patching cancellation failure.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/notify_cancel_failure.zip'
      Runtime: python3.11
      FunctionName: 'dxcms-pa-lam-notify-cancel-failure'
      Timeout: 900
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
          
  rDxcmsPANotifyCancelFailureLACWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsPANotifyCancelFailureLA
          
  rDxcmsPASchedulePatchingSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_schedule_patching'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationSchedulePatching/PatchingE2EAutomationSchedulePatching.json'
      DefinitionSubstitutions:
        generate_patchTags: !GetAtt 
          - rDxcmsPAGeneratePatchTagsLA
          - Arn          
        generate_configFile: !GetAtt 
          - rDxcmsPAGenerateConfigFileLA
          - Arn
        generate_server_report: !GetAtt 
          - rDxcmsPAGenerateServerReportLA
          - Arn
        generate_unique_sfn_name: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_patch_scan_schedule_phase_SFN: !Ref rDxcmsPAPatchSanSchedulePhaseSFN
        generate_patch_scan_report: !GetAtt
          - rDxcmsPAGeneratePatchScanReportSchedulePhaseLA
          - Arn
        check_snow_integration_status: !GetAtt
          - rDxcmsPASnowIntegrationStatusLA
          - Arn
        Create_CloudWatchRules: !GetAtt 
          - rDxcmsPACreateCloudWatchRulesLA
          - Arn
        create_change_request: !GetAtt
          - rDxcmsPACreateChangeRequestLA
          - Arn
        send_server_list_mail: !GetAtt 
          - rDxcmsPASendServerListMailLA
          - Arn
        notify_failure_from_schedule_stepfunction: !GetAtt 
          - rDxcmsPANotifyScheduleFailureLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
  rDxcmsPAReschedulePatchingSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_reschedule_patching'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationReSchedulePatching/PatchingE2EAutomationReSchedulePatching.json'
      DefinitionSubstitutions:
        update_patchTags: !GetAtt 
          - rDxcmsPAUpdatePatchTagsLA
          - Arn          
        update_configFile: !GetAtt 
          - rDxcmsPAUpdateConfigFileLA
          - Arn
        generate_server_report: !GetAtt 
          - rDxcmsPAGenerateServerReportLA
          - Arn
        generate_unique_sfn_name: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_patch_scan_schedule_phase_SFN: !Ref rDxcmsPAPatchSanSchedulePhaseSFN
        generate_patch_scan_report: !GetAtt
          - rDxcmsPAGeneratePatchScanReportSchedulePhaseLA
          - Arn
        check_snow_integration_status: !GetAtt
          - rDxcmsPASnowIntegrationStatusLA
          - Arn
        update_CloudWatchRules: !GetAtt 
          - rDxcmsPAUpdateCloudWatchRulesLA
          - Arn
        update_change_request: !GetAtt
          - rDxcmsPAUpdateChangeRequestLA
          - Arn
        send_rescheduled_server_list_mail: !GetAtt 
          - rDxcmsPASendRescheduledServerListMailLA
          - Arn
        notify_failure_from_reschedule_stepfunction: !GetAtt 
          - rDxcmsPANotifyScheduleFailureLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
  
                                   
  rDxcmsPAPatchSanSchedulePhaseSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_patch_scan_schedule_phase'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPatchScanSchedulePhase/PatchingE2EAutomationPatchScanSchedulePhase.json'
      DefinitionSubstitutions:
        start_stopped_state_instances_schedule_phase: !GetAtt 
          - rDxcmsPAStartStoppedStateInstancesSchedulePhaseLA
          - Arn
        ssm_agent_validation: !GetAtt 
          - rDxcmsPASSMAgentValidationLA
          - Arn
        execute_patch_scan_for_schedule_phase: !GetAtt 
          - rDxcmsPAExecutePatchScanForSchedulePhaseLA
          - Arn          
        check_patch_scan_cmd_status: !GetAtt 
          - rDxcmsPACheckPatchScanCmdStatusLA
          - Arn
        terminate_patch_scan_ssm_cmd: !GetAtt 
          - rDxcmsPATerminatePatchScanSsmCmdLA
          - Arn
        stop_stopped_state_instances_schedule_phase: !GetAtt
          - rDxcmsPAStopStoppedStateInstancesSchedulePhaseLA
          - Arn
        state_machine_patch_scan_output_processing: !GetAtt
          - rDxcmsPAStateMachinePatchScanOutputProcessingLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPACheckCommandStatusSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_check_command_status'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationCheckCommandStatus/PatchingE2EAutomationCheckCommandStatus.json'
      DefinitionSubstitutions:
        check_ssm_command_status: !GetAtt 
          - rDxcmsPACheckSSMCmdStatusLA
          - Arn
        Terminate_command: !GetAtt 
          - rDxcmsPATerminateSSMCommandLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPatchScanReportSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_patch_scan_report'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPatchScanReport/PatchingE2EAutomationPatchScanReport.json'
      DefinitionSubstitutions:
        start_stopped_state_instances: !GetAtt
          - rDxcmsPAStartStoppedStateInstancesLA
          - Arn
        ssm_agent_validation: !GetAtt 
          - rDxcmsPASSMAgentValidationLA
          - Arn
        execute_patch_scan: !GetAtt
          - rDxcmsPAExecutePatchScanLA
          - Arn
        generate_unique_time_for_cmd_status_SFN: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_check_cmd_status_SFN: !Ref rDxcmsPACheckCommandStatusSFN
        generate_PatchScan_Report: !GetAtt
          - rDxcmsPAGeneratePatchScanReportLA
          - Arn
        send_pre_patch_scan_report_mail: !GetAtt 
          - rDxcmsPASendPatchScanReportMailLA
          - Arn
        stop_stopped_state_instances: !GetAtt
          - rDxcmsPAStopStoppedStateInstancesLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAExecuteBackupSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_execute_backup'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationExecuteBackup/PatchingE2EAutomationExecuteBackup.json'
      DefinitionSubstitutions:
        trigger_backup_root_volumes: !GetAtt 
          - rDxcmsPATriggerBackupRootVolumesLA
          - Arn
        check_snapshot_backup_status: !GetAtt 
          - rDxcmsPACheckSnapshotBackupStatusLA
          - Arn
        update_tag_backup_status: !GetAtt
          - rDxcmsPAUpdateTagForBackupStatusLA
          - Arn
        send_backup_report_to_team: !GetAtt 
          - rDxcmsPASendBackupReportToTeamLA
          - Arn
        SFN_output_processing: !GetAtt 
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPATriggerPatchingSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_trigger_patching'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationTriggerPatching/PatchingE2EAutomationTriggerPatching.json'
      DefinitionSubstitutions:
        send_Install_Patch_phase_mail: !GetAtt 
          - rDxcmsPACommunicationMailLA
          - Arn
        supress_alerts: !GetAtt 
          - rDxcmsPAEnableDisableCWAlertsLA
          - Arn
        Stop_Apps: !GetAtt 
          - rDxcmsPAStartStopApplicationLA
          - Arn 
        update_tag_for_app_ON: !GetAtt
          - rDxcmsPAUpdateStopAppTagLA
          - Arn
        update_tag_for_app_OFF: !GetAtt
          - rDxcmsPAUpdateTagForAppOFFLA
          - Arn
        check_stop_apps_condition: !GetAtt
          - rDxcmsPAStopAppsStatusLA
          - Arn
        check_start_apps_condition: !GetAtt
          - rDxcmsPAStopAppsStatusLA
          - Arn
        generate_unique_time_for_SFN_stop_apps: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_SFN_to_Stop_Apps: !Ref rDxcmsPACheckCommandStatusSFN
        ssm_agent_validation: !GetAtt 
          - rDxcmsPASSMAgentValidationLA
          - Arn
        Install_Patches: !GetAtt 
          - rDxcmsPAExecutePatchInstallationLA
          - Arn
        update_instance_patch_installation_status: !GetAtt
          - rDxcmsPAUpdatePatchInstallStatusLA
          - Arn
        reboot_instances: !GetAtt
          - rDxcmsPARebootInstancesLA
          - Arn
        check_reboot_status: !GetAtt
          - rDxcmsPACheckRebootStatusLA
          - Arn
        reboot_dependent_instances: !GetAtt
          - rDxcmsPARebootDependentInstancesLA
          - Arn
        generate_unique_time_for_SFN_install_patches: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_SFN_to_Install_Patches: !Ref rDxcmsPACheckCommandStatusSFN 
        Start_Apps: !GetAtt 
          - rDxcmsPAStartStopApplicationLA
          - Arn
        generate_unique_time_for_SFN_start_apps: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_SFN_to_Start_Apps: !Ref rDxcmsPACheckCommandStatusSFN 
        desupress_alerts: !GetAtt 
          - rDxcmsPAEnableDisableCWAlertsLA
          - Arn
        trigger_post_task_SFN: !GetAtt
          - rDxcmsPACallPostPatchingSFLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPeformHealthCheckSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_peform_health_Check'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPeformHealthCheck/PatchingE2EAutomationPeformHealthCheck.json'
      DefinitionSubstitutions:
        perform_health_checks: !GetAtt 
          - rDxcmsPAPerformHealthCheckLA
          - Arn
        check_hc_ssm_command_status: !GetAtt 
          - rDxcmsPACheckHCSSMCmdStatusLA 
          - Arn
        generate_health_check_report: !GetAtt
          - rDxcmsPAGenerateHealthCheckReportLA
          - Arn
        terminate_hc_ssm_command: !GetAtt
          - rDxcmsPATerminateHCSSMCommandLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPerformPreTasksSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_perform_pre_tasks'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPerformPreTasks/PatchingE2EAutomationPerformPreTasks.json'
      DefinitionSubstitutions:
        start_stopped_state_instances: !GetAtt
          - rDxcmsPAStartStoppedStateInstancesLA
          - Arn
        ssm_agent_validation: !GetAtt
          - rDxcmsPASSMAgentValidationLA
          - Arn
        generate_unique_name_for_health_check_SFN: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        check_backup_requirement_status: !GetAtt
          - rDxcmsPABackupRequirementStatusLA
          - Arn
        Call_SFN_to_perform_health_check: !Ref rDxcmsPAPeformHealthCheckSFN
        generate_unique_name_for_backup_SFN: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        update_tag_for_backup_requirement: !GetAtt
          - rDxcmsPAUpdateBackupRequirementTagLA
          - Arn
        Call_SFN_to_Execute_Backup: !Ref rDxcmsPAExecuteBackupSFN
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPerformPostTasksSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_perform_post_tasks'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPerformPostTasks/PatchingE2EAutomationPerformPostTasks.json'
      DefinitionSubstitutions:
        generate_unique_name_for_health_check_sfn: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_SFN_to_perform_health_check: !Ref  rDxcmsPAPeformHealthCheckSFN
        compare_health_check: !GetAtt 
          - rDxcmsPACompareHealthCheckLA
          - Arn
        generate_unique_name_for_patchscan_report_SFN: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_SFN_to_generate_patch_scan_report: !Ref rDxcmsPAPatchScanReportSFN
        send_post_patching_mail: !GetAtt
          - rDxcmsPASendPostPatchingMailLA
          - Arn
        update_patchInstallOn_tag: !GetAtt
          - rDxcmsPAUpdatePatchInstallOnTagLA
          - Arn
        delete_cloudWatch_rules: !GetAtt
          - rDxcmsPADeleteCWRulesLA
          - Arn
        delete_patch_tags: !GetAtt
          - rDxcmsPADeletePatchTagsLA
          - Arn
        stop_stopped_state_instances: !GetAtt
          - rDxcmsPAStopStoppedStateInstancesLA
          - Arn
        tag_cleanup_validation: !GetAtt
          - rDxcmsPATagCleanupValidationLA
          - Arn
        cw_rule_cleanup_validation: !GetAtt
          - rDxcmsPACloudWatchRuleCleanupValidationLA
          - Arn
        send_cleanup_validation_report_mail: !GetAtt
          - rDxcmsPASendMailCleanupValidationLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL'
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

  rDxcmsPAPatchScanReportAdhocSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_patch_scan_report-adhoc'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationPatchScanReport-Adhoc/PatchingE2EAutomationPatchScanReport-Adhoc.json'
      DefinitionSubstitutions:
        start_stopped_state_instances: !GetAtt
          - rDxcmsPAStartStoppedStateInstancesLA
          - Arn
        ssm_agent_validation: !GetAtt 
          - rDxcmsPASSMAgentValidationLA
          - Arn
        execute_patch_scan: !GetAtt
          - rDxcmsPAExecutePatchScanLA
          - Arn
        generate_unique_time_for_cmd_status_SFN: !GetAtt
          - rDxcmsPAGenerateUniqueSFNameLA
          - Arn
        Call_check_cmd_status_SFN: !Ref rDxcmsPACheckCommandStatusSFN
        generate_PatchScan_Report: !GetAtt
          - rDxcmsPAGeneratePatchScanReportLA
          - Arn
        send_pre_patch_scan_report_mail: !GetAtt 
          - rDxcmsPASendPatchScanReportMailLA
          - Arn
        stop_stopped_state_instances: !GetAtt
          - rDxcmsPAStopStoppedStateInstancesLA
          - Arn
        SFN_output_processing: !GetAtt
          - rDxcmsPAProcessSFOutputLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC 

  rDxcmsPADXCCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/rDxcmsPASfnCWLogGroup"

  # AWSPE-6340 When you create a state machine with logging enabled, 
  # Step Functions must update your CloudWatch Logs resource policy with the 
  # log group you specify. To avoid reaching the CloudWatch Logs resource policy size limit, 
  # prefix your CloudWatch Logs log group names with /aws/vendedlogs/
  rDxcmsPADXCVendedCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/vendedlogs/rDxcmsPADXCVendedCWLogGroup"

  rDxcmsPACWSSMOutLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/ssm/dxc_pa_ssm_stdout"


  rDxcmsPAAppsStopRunCommandDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Run a PowerShell script or specify the paths to scripts to run.
        parameters:
          executionTimeout:
            type: String
            default: '3600'
            description: "(Optional) The time in seconds for a command to be completed
              before it is considered to have failed. Default is 3600 (1 hour). Maximum
              is 172800 (48 hours)."
            allowedPattern: "([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)"
          WindowWorkingDirectory:
            type: String
            default: 'c:\appdbscripts'
            description: "(Optional) The path to the working directory on your instance."
            maxChars: 4096
          LinuxWorkingDirectory:
            type: String
            default: "//usr//appdbscripts"
            description: "(Optional) The path to the working directory on your instance."
            maxChars: 4096
        mainSteps:
        - precondition:
            StringEquals:
            - platformType
            - Windows
          action: aws:runPowerShellScript
          name: runPowerShellScript
          inputs:
            id: 0.aws:runPowerShellScript
            runCommand: ['.\\appstop.ps1']
            workingDirectory: "{{ WindowWorkingDirectory }}"
            timeoutSeconds: "{{ executionTimeout }}"
        - precondition:
            StringEquals:
            - platformType
            - Linux
          action: aws:runShellScript
          name: runShellScript
          inputs:
            id: 0.aws:runShellScript
            timeoutSeconds: "{{ executionTimeout }}"
            workingDirectory: "{{ LinuxWorkingDirectory }}"
            runCommand: ['sh appstop.sh']
      DocumentType: Command
      Name: dxcms_pa_stop_apps_on_instances
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
        
  rDxcmsPAAppsStartRunCommandDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Run a PowerShell script or specify the paths to scripts to run.
        parameters:
          executionTimeout:
            type: String
            default: '3600'
            description: "(Optional) The time in seconds for a command to be completed
              before it is considered to have failed. Default is 3600 (1 hour). Maximum
              is 172800 (48 hours)."
            allowedPattern: "([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)"
          WindowWorkingDirectory:
            type: String
            default: 'c:\appdbscripts'
            description: "(Optional) The path to the working directory on your instance."
            maxChars: 4096
          LinuxWorkingDirectory:
            type: String
            default: "//usr//appdbscripts"
            description: "(Optional) The path to the working directory on your instance."
            maxChars: 4096
        mainSteps:
        - precondition:
            StringEquals:
            - platformType
            - Windows
          action: aws:runPowerShellScript
          name: runPowerShellScript
          inputs:
            id: 0.aws:runPowerShellScript
            runCommand: ['.\\appstart.ps1']
            workingDirectory: "{{ WindowWorkingDirectory }}"
            timeoutSeconds: "{{ executionTimeout }}"
        - precondition:
            StringEquals:
            - platformType
            - Linux
          action: aws:runShellScript
          name: runShellScript
          inputs:
            id: 0.aws:runShellScript
            timeoutSeconds: "{{ executionTimeout }}"
            workingDirectory: "{{ LinuxWorkingDirectory }}"
            runCommand: ['sh appstart.sh']
      DocumentType: Command
      Name: dxcms_pa_start_apps_on_instances
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
        
  rDxcmsPACancelPatchingSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_pa_sfn_cancel_patching'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/PatchingE2EAutomationCancelPatching/PatchingE2EAutomationCancelPatching.json'
      DefinitionSubstitutions:
        cleanup_tags_cloudwatchrules: !GetAtt 
          - rDxcmsPACleanupCloudwatchRuleTagLA
          - Arn          
        update_dynamodb: !GetAtt 
          - rDxcmsPAUpdateDynamodbLA
          - Arn
        send_cancelled_cleanup_email: !GetAtt 
          - rDxcmsPASendCancelledCleanupEmailLA
          - Arn
        notify_failure_from_cancel_stepfunction: !GetAtt
          - rDxcmsPANotifyCancelFailureLA
          - Arn
      RoleArn: !GetAtt 
        - rDxcmsPatchingAutomationSFNExecRole
        - Arn
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsPADXCVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC
