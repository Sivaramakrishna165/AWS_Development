AWSTemplateFormatVersion: "2010-09-09"
Description: "Get the latest falcon sensors(for linux & windows OS) using Crowstrike api's and upload to s3 bucket"

Parameters: 
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/Module/GetLatestFalconSensors/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for Standard Lambda location"
    
  pDXCS3CustomerBucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/CustomerBucket
    Description: "[DO NOT CHANGE] SSM Parameter for Customer bucket location"
  
  pFalconGenerateTokenAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/oauth2/token"
    Description: "Crowstrike falcon API to Generate a bearer token"

  pFalconWinGetSensorAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/sensors/combined/installers/v1?sort=release_date%7Cdesc&filter=platform%3A%22windows%22"
    Description: "Crowstrike falcon API to Get the sensors list for windows"
    
  pFalconLinuxGetSensorAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/sensors/combined/installers/v1?sort=release_date%7Cdesc&filter=platform%3A%22linux%22%2Bos%3A%22*{os}*%22"
    Description: "Crowstrike falcon API to Get the sensors list for Linux"
  
  pFalconAmazonLinuxGetSensorAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/sensors/combined/installers/v1?sort=release_date%7Cdesc&filter=platform%3A%22linux%22%2Bos_version%3A%22{os_ver}%22%2Bos%3A%22*Amazon*%22"
    Description: "Crowstrike falcon API to Get the sensors list for Amazon Linux"
  
  pFalconAmazonLinuxArmGetSensorAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/sensors/combined/installers/v1?sort=release_date%7Cdesc&filter=platform%3A%22linux%22%2Bos_version%3A%22*arm*%22%2Bos%3A%22*Amazon*%22"
    Description: "Crowstrike falcon API to Get the sensors list for Amazon Linux Arm64"
  
  pFalconDownloadSensorAPI:
    Type: "String"
    Default: "https://api.crowdstrike.com/sensors/entities/download-installer/v1?id={sha}"
    Description: "Crowstrike falcon API to download the sensors for the given sha"
  
  pDXCSecretManagerSecrets:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/Notification/DXCSecretsManagerSecretName"
    Description: "AWS Secrets Key where Crowstrike client_id and client_secret is stored"

  pGetLatestFalconSensorFrequency: 
    AllowedValues:
      - "rate(7 days)"
      - "rate(10 days)"
      - "rate(30 days)"
    Default: "rate(10 days)"
    Description: "[Required] The schedule (Rate) to get the latest falcon sensors for windows & linux (Change only if required)"
    Type: "String"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"

Resources:
  rSSMFalconWinGetSensorAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/WinGetSensorAPI"
      Description: "Crowstrike falcon API to Get the sensors list for Windows"
      Type: "String"
      Value: !Ref pFalconWinGetSensorAPI

  rSSMFalconLinuxGetSensorAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/LinuxGetSensorAPI"
      Description: "Crowstrike falcon API to Get the sensors list for Linux"
      Type: "String"
      Value: !Ref pFalconLinuxGetSensorAPI
  
  rSSMFalconAmazonLinuxGetSensorAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/AmazonLinuxGetSensorAPI"
      Description: "Crowstrike falcon API to Get the sensors list for Amazon Linux"
      Type: "String"
      Value: !Ref pFalconAmazonLinuxGetSensorAPI
  
  rSSMFalconAmazonLinuxArmGetSensorAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/AmazonLinuxArmGetSensorAPI"
      Description: "Crowstrike falcon API to Get the sensors list for Amazon Linux Arm64"
      Type: "String"
      Value: !Ref pFalconAmazonLinuxArmGetSensorAPI
    
  rSSMFalconDownloadSensorAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/DownloadSensorAPI"
      Description: "Crowstrike falcon API to Download the sensors for the given sha"
      Type: "String"
      Value: !Ref pFalconDownloadSensorAPI
  
  rSSMFalconGenerateTokenAPI:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/Falcon/GenerateTokenAPI"
      Description: "Crowstrike falcon API to get the bearer token"
      Type: "String"
      Value: !Ref pFalconGenerateTokenAPI

  rGetLatestSensorsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      -
        PolicyName: !Join ["-", ["dxc-awsms-get-falcon-sensors", !Ref "AWS::Region"]]
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: "Allow"
            Action:
            - "ssm:GetParameter"
            - "logs:CreateLogStream"
            - "logs:CreateLogGroup"
            - "logs:PutLogEvents"
            - "lambda:InvokeFunction"
            Resource: 
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconWinGetSensorAPI}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconLinuxGetSensorAPI}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconDownloadSensorAPI}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconGenerateTokenAPI}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconAmazonLinuxGetSensorAPI}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${rSSMFalconAmazonLinuxArmGetSensorAPI}
            - !Sub  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-get-falcon-sensors-list:*
            - !Sub  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-download-falcon-sensors:*
            - !Sub  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-get-falcon-sensors-list
            - !Sub  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-download-falcon-sensors
            - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxc-awsms-download-falcon-sensors
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            Resource: 
            - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}
            - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}/deploy/externs/*
          - Effect: "Allow"
            Action:
            - "s3:GetObject"
            Resource: 
            - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}
            - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}/deploy/utilities/*
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            Resource: "*"
            

  rGetLatestSensorsLambda: 
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Get list of falcon sensors for linux & windows"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/GetLatestFalconSensors.zip"
      Environment:
        Variables:
          SSMFalconWinGetSensorAPI: !Ref rSSMFalconWinGetSensorAPI
          SSMFalconLinuxGetSensorAPI: !Ref rSSMFalconLinuxGetSensorAPI
          SSMFalconAmazonLinuxGetSensorAPI: !Ref rSSMFalconAmazonLinuxGetSensorAPI
          SSMFalconAmazonLinuxArmGetSensorAPI: !Ref rSSMFalconAmazonLinuxArmGetSensorAPI
          SSMFalconGenerateTokenAPI: !Ref rSSMFalconGenerateTokenAPI
          pDXCS3CustomerBucketName: !Ref pDXCS3CustomerBucketName
          DXCAWSMSSecretKey: !Ref pDXCSecretManagerSecrets
          DownloadLatestSensorsLambda: !Ref rDownloadLatestSensorsLambda
      FunctionName: dxc-awsms-get-falcon-sensors-list
      Handler: get_falcon_sensors.handler
      Role: !GetAtt rGetLatestSensorsLambdaRole.Arn
      Runtime: python3.11
      Timeout: "300"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxc-awsms-get-falcon-sensors-list"
      - Key: Owner
        Value: DXC

  rGetLatestFalconLambdaScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Event that triggers dxc-awsms-get-falcon-sensors-list lambda to to get the latest sensors for Linux & windows'
      ScheduleExpression: !Sub '${pGetLatestFalconSensorFrequency}'
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt rGetLatestSensorsLambda.Arn
          Id: "GetLatestFalconWindows"
          Input: "{\"Platform\": \"Windows\"}"
        -
          Arn: !GetAtt rGetLatestSensorsLambda.Arn
          Id: "GetLatestFalconLinux"
          Input: "{\"Platform\": \"Linux\"}"

  rGetLatestFalconLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rGetLatestSensorsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rGetLatestFalconLambdaScheduledRule.Arn


  rDownloadLatestSensorsLambda: 
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Download the falcon sensors for linux & windows"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/GetLatestFalconSensors.zip"
      Environment:
        Variables:
          pDXCS3CustomerBucketName: !Ref pDXCS3CustomerBucketName
          DXCAWSMSSecretKey: !Ref pDXCSecretManagerSecrets
          SSMFalconGenerateTokenAPI: !Ref rSSMFalconGenerateTokenAPI
          SSMFalconDownloadSensorAPI: !Ref  rSSMFalconDownloadSensorAPI
      FunctionName: dxc-awsms-download-falcon-sensors
      Handler: download_falcon_sensors.handler
      Role: !GetAtt rGetLatestSensorsLambdaRole.Arn
      Runtime: python3.11
      Timeout: "300"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxc-awsms-download-falcon-sensors"
      - Key: Owner
        Value: DXC

  rInvokeLambdaGetFalconSensorForWin:
    Type: Custom::InvokeGetFalconSensorForWin
    Properties:
      Description: "Execute the Lambda function GetFalconSensor for Windows"
      ServiceToken: !GetAtt rGetLatestSensorsLambda.Arn
      Platform: "Windows"
  
  rInvokeLambdaGetFalconSensorForLinux:
    Type: Custom::InvokeGetFalconSensorForLinux
    Properties:
      Description: "Execute the Lambda function GetFalconSensor for Linux"
      ServiceToken: !GetAtt rGetLatestSensorsLambda.Arn
      Platform: "Linux"