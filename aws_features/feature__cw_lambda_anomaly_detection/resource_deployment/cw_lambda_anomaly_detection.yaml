AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional template which creates a CloudWatch Anomaly detection lambda functions'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/Module/CWLambdaAnomalyDetection/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'none'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"

Resources:

  rDxcmsADLambdaSNSTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    Properties: 
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsADLambdaSNSTopic
      - Key: Owner
        Value: DXC
      TopicName: dxcms-ad-sns-notification

  rDxcmsADSNSParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/AWS-Lambda-Anomaly/SNS-Topic'
      Type: String
      Value: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms-ad-sns-notification'
      Description: 'SSM Parameter contains the SNS Notification ARN'

  rDxcmsADLambdaDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions: 
        - 
          AttributeName: "Metric Name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Metric Name"
          KeyType: "HASH"
      TableName: "Ft_Dxcms_Anomalydetection_Lambda"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsAnomalyDetectionDynamoDbTable
      - Key: Owner
        Value: DXC

  rDxcmsADCWLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName:  !Sub 'dxcms_ad_cw_lambda_exec_role_${AWS::Region}'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsCWLambdaAnomalyDetectionLambdaRole
      - Key: Owner
        Value: DXC
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: !Sub "dxcms-aw-cw-lambda_${AWS::Region}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: dynamoDB
                Effect: Allow
                Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:BatchGetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_Dxcms_Anomalydetection_Lambda/stream/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_Dxcms_Anomalydetection_Lambda/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Ft_Dxcms_Anomalydetection_Lambda"                           

              - Sid: CWAccessPermission
                Action:
                  - "cloudwatch:PutMetricAlarm"
                Resource: "*"
                Effect: Allow 

  rDxcmsCWCreateLambdaAnomalyAlarmLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: create_anomaly_detection_lambda_alarm.lambda_handler
      Role: !GetAtt 
        - rDxcmsADCWLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          table_name: 'Ft_Dxcms_Anomalydetection_Lambda'
      Description: 'Lambda to create the lambda anomaly alarm'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/create_anomaly_detection_lambda_alarm.zip'
      Runtime: python3.11
      FunctionName: !Sub "dxcms-cw-create-anomaly-detection-lambda-alarm-${AWS::Region}"
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxcms-cw-create-anomaly-detection-lambda-alarm-${AWS::Region}"
      - Key: Owner
        Value: DXC
  
  rDxcmsCWLoadDynamodDBLambdaLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: load_dynamodb_lambda.lambda_handler
      Role: !GetAtt 
        - rDxcmsADCWLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          sns_topic_arn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms-ad-sns-notification'
          table_name: 'Ft_Dxcms_Anomalydetection_Lambda'
      Description: 'Lambda to load the data for the lambda alarms'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/load_dynamodb_lambda.zip'
      Runtime: python3.11
      FunctionName: !Sub "dxcms-cw-load-dynamodb-lambda-alarm-${AWS::Region}"
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxcms-cw-load-dynamodb-lambda-alarm-${AWS::Region}"
      - Key: Owner
        Value: DXC

  customInvokeLoadDynamodbLambda:
    Type: Custom::AwsLambdaLoadDynamodb
    DependsOn: rDxcmsCWLoadDynamodDBLambdaLA
    Properties:
        ServiceToken: !GetAtt rDxcmsCWLoadDynamodDBLambdaLA.Arn