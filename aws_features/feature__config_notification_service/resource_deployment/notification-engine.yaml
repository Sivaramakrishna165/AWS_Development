---
AWSTemplateFormatVersion: '2010-09-09'
Description: "CF Template to deploy custom Notification Engine for
  AWS Config service.  The Notification Engine consists of the following:
  - Step Function
  - AWS Lambdas for key states in the Step Function
  - CloudWatch Event (triggers Step Function every hour)
  The states currently used in the Step Function are as follows:
  - RemoveCompliantResources
  - AddNonCompliantResources
  - SendNotification
  - UpdateNotificationStatus
  Each lambda has the option to enable AWS X-Ray for additional triage.
  In addition, the CloudWatch Log Group for each lambda are deployed
  by this template."

Parameters:
  pDXCS3KeyPrefix:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  
  pTracingFlag:
    Description: "Flag to enable AWS X-Ray tracing (set to Active)
      for debugging. Default setting is PassThrough."
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/CloudWatch/TracingFlag"

  pLogRetention:
    Description: "Number of days for retaining CloudWatch Logs for lambdas."
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/CloudWatch/LogRetentionFlag"
  
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/ConfigNotificationService/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"

  pfSnowInciPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor, 4-warning, 5-ok (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3', '4', '5']

  pCommonSNOWTopic:
    Description: '[DO NOT CHANGE] ssm param of Common ServiceNow Topic for service now alerts'
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/SES/Module/CommonServicenow/ComSnowStdInputArn"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Location of DXC Managed Services Assets:"
        Parameters:
          - pDXCS3BucketName
          - pTracingFlag
          - pLogRetention
    ParameterLabels:
      pDXCS3BucketName:
        default: "S3 Bucket Name:"
      pTracingFlag:
        default: "AWS X-Ray tracing flag:"
      pLogRetention:
        default: "CloudWatch Log Retention for Lambdas:"

Resources:
  rRemoveCompliantResourcesLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "RemoveCompliantResourcesLambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "config:DescribeComplianceByConfigRule"
                  - "config:DescribeConfigRuleEvaluationStatus"
                  - "config:DescribeConfigRules"
                  - "config:GetComplianceDetailsByConfigRule"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:ListTables"
                  - "dynamodb:Scan"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: "arn:aws:ssm:*:*:*"
              - Effect: "Allow"
                Action:
                  - 'logs:*'
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::*"
  rAddNonCompliantResourcesLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "AddNonCompliantResourcesLambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "config:DescribeComplianceByConfigRule"
                  - "config:DescribeConfigRuleEvaluationStatus"
                  - "config:DescribeConfigRules"
                  - "config:GetComplianceDetailsByConfigRule"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:ListTables"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: "arn:aws:ssm:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::*"

  rSNSFeedbackRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSNSRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'sns.amazonaws.com'
            Action:
              - "sts:AssumeRole"

  rSendNotificationExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "SendNotificationLambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "config:DescribeComplianceByConfigRule"
                  - "config:DescribeConfigRuleEvaluationStatus"
                  - "config:DescribeConfigRules"
                  - "config:GetComplianceDetailsByConfigRule"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:ListTables"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: "arn:aws:ssm:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::*"
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                  - "sns:SetTopicAttributes"
                  - "sns:GetTopicAttributes"
                  - "dynamodb:UpdateItem"
                Resource: 
                  - "arn:aws:sns:*:*:*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FeatureConfigNotificationServiceStack-*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource: "*"
  rUpdateNotificationStatusExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "UpdateNotificationStatusLambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:ListTables"
                  - "dynamodb:Scan"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: "arn:aws:ssm:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::*"
  rStepFunctionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: NotificationSystemStatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt rRemoveCompliantResourcesState.Arn
                  - !GetAtt rAddNonCompliantResourcesState.Arn
                  - !GetAtt rSendNotificationState.Arn
                  - !GetAtt rUpdateNotificationStatusState.Arn
  rConfigNotificationScheduledRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'events.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: NotificationScheduledEventPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref rConfigNotificationSystem
  rRemoveCompliantResourcesState:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function that removes compliant resources
        from DynamoDB table that tracks non-compliant resources"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/remove_compliant_resources.zip"
      Handler: "index.lambda_handler"
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rRemoveCompliantResourcesLambdaExecutionRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "Custom Lambda for Config Notification System -
            RemoveCompliantResources state in Step Function"
        -
          Key: "Owner"
          Value: "DXC"
  rRemoveCompliantResourcesLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: rRemoveCompliantResourcesState
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/aws/lambda/'
            - !Ref rRemoveCompliantResourcesState
      RetentionInDays: !Ref pLogRetention
  rAddNonCompliantResourcesState:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function that scans non-compliant resources from
        AWS Config and adds the non-compliant resources to DynamoDB table"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/add_noncompliant_resources.zip"
      Handler: "index.lambda_handler"
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rAddNonCompliantResourcesLambdaExecutionRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "Custom Lambda for Config Notification System -
            AddNonCompliantResources state in Step Function"
        -
          Key: "Owner"
          Value: "DXC"
  rAddNonCompliantResourcesLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: rAddNonCompliantResourcesState
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/aws/lambda/'
            - !Ref rAddNonCompliantResourcesState
      RetentionInDays: !Ref pLogRetention
  rSendNotificationState:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function that sends SNS notification containg a
        list of non-compliant resources from AWS Config"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/send_notification.zip"
      Handler: "index.lambda_handler"
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rSendNotificationExecutionLambdaRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "Custom Lambda for Config Notification System -
            SendNotification state in Step Function"
        -
          Key: "Owner"
          Value: "DXC"
      Environment:
        Variables:
          SNSFeedbackRoleArn : !GetAtt "rSNSFeedbackRole.Arn"
          SnowInciPriority: !Ref pfSnowInciPriority
          SnowTopic : !Ref pCommonSNOWTopic
          WhitelistedSSMParam: "/DXC/ConfigRuleS3PublicRead/Whitelist"
          DynamoDBParam : "/DXC/ConfigService/DynamoDBTableName"
  rSendNotificationLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: rSendNotificationState
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/aws/lambda/'
            - !Ref rSendNotificationState
      RetentionInDays: !Ref pLogRetention
  rUpdateNotificationStatusState:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function that updates the Notification
        attribute of the non-compliant resources stored in
        DynamoDB table indicating that an SNS notification has been
        sent"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/update_notification_status.zip"
      Handler: "index.lambda_handler"
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rUpdateNotificationStatusExecutionLambdaRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "Custom Lambda for Config Notification System -
            UpdateNotificationStatus state in Step Function"
        -
          Key: "Owner"
          Value: "DXC"
  rUpdateNotificationStatusLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: rUpdateNotificationStatusState
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/aws/lambda/'
            - !Ref rUpdateNotificationStatusState
      RetentionInDays: !Ref pLogRetention
  rConfigNotificationSystem:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: "rStepFunctionLambdaExecutionRole"
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "State Machine for Configuration Notification System",
          "StartAt": "RemoveCompliantResources",
          "States": {
            "RemoveCompliantResources": {
              "Type": "Task",
              "Resource": "${rRemoveCompliantResourcesState.Arn}",
              "TimeoutSeconds": 300,
              "Catch": [{
                "ErrorEquals": ["GetParameterException"],
                "Next": "GetParameterErrorState"
              },{
                "ErrorEquals": ["GetTableException"],
                "Next": "GetTableErrorState"
              },{
                "ErrorEquals": ["ScanTableException"],
                "Next": "ScanTableErrorState"
              }, {
                "ErrorEquals": ["ConfigStatusExecutionException"],
                "Next": "ConfigStatusExecutionErrorState"
              },{
                "ErrorEquals": ["DeleteItemException"],
                "Next": "DeleteItemErrorState"
              },{
                "ErrorEquals": ["States.ALL"],
                "Next": "UnexpectedErrorState"
              }],
              "Next": "AddNonCompliantResources"
            },
            "AddNonCompliantResources": {
              "Type": "Task",
              "Resource": "${rAddNonCompliantResourcesState.Arn}",
              "TimeoutSeconds": 300,
              "Catch": [{
                "ErrorEquals": ["GetParameterException"],
                "Next": "GetParameterErrorState"
              },{
                "ErrorEquals": ["GetTableException"],
                "Next": "GetTableErrorState"
              },{
                "ErrorEquals": ["ConfigStatusExecutionException"],
                "Next": "ConfigStatusExecutionErrorState"
              },{
                "ErrorEquals": ["ComplianceDetailsException"],
                "Next": "ComplianceDetailsErrorState"
              },{
                "ErrorEquals": ["PutItemException"],
                "Next": "PutItemErrorState"
              },{
                "ErrorEquals": ["States.ALL"],
                "Next": "UnexpectedErrorState"
              }],
              "Next": "SendNotification"
            },
            "SendNotification": {
              "Type": "Task",
              "Resource": "${rSendNotificationState.Arn}",
              "TimeoutSeconds": 300,
              "Catch": [{
                "ErrorEquals": ["GetParameterException"],
                "Next": "GetParameterErrorState"
              },{
                "ErrorEquals": ["GetTableException"],
                "Next": "GetTableErrorState"
              },{
                "ErrorEquals": ["ScanTableException"],
                "Next": "ScanTableErrorState"
              }, {
                "ErrorEquals": ["SNSNotificationException"],
                "Next": "SNSNotificationErrorState"
              },{
                "ErrorEquals": ["States.ALL"],
                "Next": "UnexpectedErrorState"
              }],
              "Next": "UpdateNotificationStatus"
            },
            "UpdateNotificationStatus": {
              "Type": "Task",
              "Resource": "${rUpdateNotificationStatusState.Arn}",
              "TimeoutSeconds": 300,
              "Catch": [{
                "ErrorEquals": ["GetParameterException"],
                "Next": "GetParameterErrorState"
              },{
                "ErrorEquals": ["GetTableException"],
                "Next": "GetTableErrorState"
              },{
                "ErrorEquals": ["ScanTableException"],
                "Next": "ScanTableErrorState"
              }, {
                "ErrorEquals": ["UpdateItemException"],
                "Next": "UpdateItemErrorState"
              },{
                "ErrorEquals": ["States.ALL"],
                "Next": "UnexpectedErrorState"
              }],
              "End": true
            },
            "GetParameterErrorState": {
              "Type": "Pass",
              "Result": "Error accessing SSM Parameter Store",
              "End": true
            },
            "GetTableErrorState": {
              "Type": "Pass",
              "Result": "Error accessing DynamoDB Table",
              "End": true
            },
            "ScanTableErrorState": {
              "Type": "Pass",
              "Result": "Error scanning DynamoDB table",
              "End": true
            },
            "ConfigStatusExecutionErrorState": {
              "Type": "Pass",
              "Result": "Error obtaining Config evaluations",
              "End": true
            },
            "ComplianceDetailsErrorState": {
              "Type": "Pass",
              "Result": "Error obtaining Config Compliance Details",
              "End": true
            },
            "DeleteItemErrorState": {
              "Type": "Pass",
              "Result": "Error delete item from DynamoDB table",
              "End": true
            },
            "PutItemErrorState": {
              "Type": "Pass",
              "Result": "Error adding item to DynamoDB table",
              "End": true
            },
            "UpdateItemErrorState": {
              "Type": "Pass",
              "Result": "Error updating items in DynamoDB table",
              "End": true
            },
            "SNSNotificationErrorState": {
              "Type": "Pass",
              "Result": "Error sending SNS Notification",
              "End": true
            },
            "UnexpectedErrorState": {
              "Type": "Pass",
              "Result": "Unexpected error",
              "End": true
            }
           }
        }
      RoleArn: !GetAtt rStepFunctionLambdaExecutionRole.Arn
  rConfigNotificationSystemScheduledRule:
    Type: "AWS::Events::Rule"
    DependsOn: "rConfigNotificationSystem"
    Properties:
      Description: "Event that triggers Step Function to gather
        AWS Config non-compliant resources and send an SNS
        Notification"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref rConfigNotificationSystem
          Id: "HourlyConfigNotificationCron"
          RoleArn: !GetAtt rConfigNotificationScheduledRole.Arn
