AWSTemplateFormatVersion: "2010-09-09"
Description: Creates required resources for bastion on-demand jump server
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/BastionService/S3AssetBucket
    Description: SSM Parameter for bucket location
  
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  
  pSESLayerArn:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /DXC/SES/SESLayerLambdaArn

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Location of DXC Managed Services Assets:"
        Parameters:
          - pDXCS3BucketName

    ParameterLabels:
      pDXCS3BucketName:
        default: "S3 Bucket Name:"

Resources:
  BastionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: [
                "lambda.amazonaws.com"
              ]
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ]
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action: [
                  "ec2:DescribeInstances",
                  "ec2:DeleteTags",
                  "ec2:DeleteVolume",
                  "ec2:TerminateInstances",
                  "ec2:CreateSecurityGroup",
                  "ec2:DeleteSecurityGroup",
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:RevokeSecurityGroupIngress"
                ]
                Resource: "*"
              -
                Effect: "Allow"
                Action: "ssm:SendCommand"
                Resource: [
                  "arn:aws:ec2:*",
                  "arn:aws:ssm:*:*:document/AWS-RunShellScript",
                  "arn:aws:ssm:*:*:document/AWS-RunPowerShellScript"
                ]
              -
                Effect: "Allow"
                Action: [
                  "ssm:CancelCommand",
                  "ssm:ListCommands",
                  "ssm:ListCommandInvocations"
                ]
                Resource: "*"
              -
                Effect: "Allow"
                Action: [
                  "cloudformation:DeleteStack",
                  "cloudformation:DescribeStackResource",
                  "cloudformation:DescribeStackResources",
                  "cloudformation:DescribeStacks",
                  "cloudformation:ListStackResources",
                  "cloudformation:ListStacks"
                ]
                Resource: "*"
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource: [
                  !Join ["", ["arn:aws:lambda:*:", !Ref "AWS::AccountId", ":function:Bastion*" ] ],
                  !Join ["", ["arn:aws:lambda:*:", !Ref "AWS::AccountId", ":function:getSource*" ] ]
                ]
  BastionUpdateScheduleRuleStatusLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: [
                "lambda.amazonaws.com"
              ]
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ]
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/BastionUpdateScheduleRuleStatus*'
              -
                Effect: "Allow"
                Action: [
                "events:EnableRule",
                "events:ListRules",
                "events:DisableRule",
                "events:DescribeRule"
            ]
                Resource: "*"
  
              -
                Effect: "Allow"
                Action: [
                  "cloudformation:DescribeStacks",
                ]
                Resource: "*"
                     
  BastionCreateLocalAcct:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: BastionCreateLocalAcct
      Handler: "BastionCreateLocalAcct.BastionCreateLocalAcct_handler"
      Role:
        Fn::GetAtt:
          - "BastionLambdaExecutionRole"
          - "Arn"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub "${pDXCS3KeyPrefix}/bastion_service.zip"
      Runtime: "nodejs18.x"
      Layers:
        - !Ref pSESLayerArn
      Timeout: "40"
      Tags:
        - Key: Owner
          Value: DXC

  BastionCreateIngressRuleOnTargetInstance:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: BastionCreateIngressRuleOnTargetInstance
      Handler: "BastionCreateIngressRuleOnTargetInstance.BastionCreateIngressRuleOnTargetInstance_handler"
      Role:
        Fn::GetAtt:
          - "BastionLambdaExecutionRole"
          - "Arn"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub "${pDXCS3KeyPrefix}/bastion_service.zip"
      Runtime: "nodejs18.x"
      Layers:
        - !Ref pSESLayerArn
      Timeout: "40"
      Tags:
        - Key: Owner
          Value: DXC

  BastionRandomUserAndPwd:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: BastionRandomUserAndPwd
      Handler: "BastionRandomUserAndPwd.BastionRandomUserAndPwd_handler"
      Role:
        Fn::GetAtt:
          - "BastionLambdaExecutionRole"
          - "Arn"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/bastion_service.zip"
      Runtime: "nodejs18.x"
      Layers:
        - !Ref pSESLayerArn
      Timeout: "40"
      Tags:
        - Key: Owner
          Value: DXC


  BastionTermExpired:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: BastionTermExpired
        Handler: "BastionTermExpired.BastionTermExpired_handler"
        Role:
          Fn::GetAtt:
            - "BastionLambdaExecutionRole"
            - "Arn"
        Code:
          S3Bucket: !Ref pDXCS3BucketName
          S3Key:  !Sub "${pDXCS3KeyPrefix}/bastion_service.zip"
        Runtime: "nodejs18.x"
        Layers:
          - !Ref pSESLayerArn
        Timeout: "40"
        Tags:
          - Key: Owner
            Value: DXC

  BastionUpdateScheduleRuleStatus:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: BastionUpdateScheduleRuleStatus
        Handler: "BastionUpdateScheduleRuleStatus.BastionUpdateScheduleRuleStatus_handler"
        Role:
          Fn::GetAtt:
            - "BastionUpdateScheduleRuleStatusLambdaExecutionRole"
            - "Arn"
        Code:
          S3Bucket: !Ref pDXCS3BucketName
          S3Key:  !Sub "${pDXCS3KeyPrefix}/bastion_service.zip"
        Runtime: "python3.11"
        Timeout: "40"
        Tags:
          - Key: Owner
            Value: DXC

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(10 minutes)"
      State: "DISABLED"
      Targets:
        -
         Arn:
           Fn::GetAtt:
             - "BastionTermExpired"
             - "Arn"
         Id: "BastionTermExpired.BastionTermExpired_handler"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "BastionTermExpired"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

