{
    "Comment": "A Step Function to send notification and create service now informational event or incident.",
    "StartAt": "CreateSnowIncident",
    "States": {
      "CreateSnowIncident": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${CreateSnowIncident}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "ResultPath": "$.errorInfo",
            "Next": "CreateSnowIncidentError"
          }
        ],
        "End": true
      },
      "CreateSnowIncidentError": {
        "Type": "Pass",
        "Parameters": {
          "sh_result.$": "$",
          "ExecutionId.$": "$$.Execution.Id",
          "StateMachineName.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "CreateSnowIncident Function"
        },
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "NotifyForLambdaFunctionFailure": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sns:publish",
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "IntervalSeconds": 3,
            "MaxAttempts": 2,
            "BackoffRate": 1.5
          }
        ],
        "Parameters": {
          "Message.$": "$",
          "TopicArn": "${NotifyForLambdaFunctionFailure}"
        },
        "End": true
      }
    }
  }