{
  "Comment": "Master state machine for Self-Heal.",
  "StartAt": "dynamodb_logging",
  "States": {
    "dynamodb_logging": {
      "Comment":"This step will store event details into dynamodb table.",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${dynamodb_logging}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "dynamodb_logging_error"
        }
      ],
      "Next": "choice_to_trigger_diagnosis"
    },
    "dynamodb_logging_error": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "dynamodb_logging Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "choice_to_trigger_diagnosis": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.incident_priority",
              "StringEquals": "1"
            },
            {
              "Variable": "$.incident_priority",
              "StringEquals": "2"
            }
          ],
          "Next": "trigger_notification_sfn"
        }
      ],
      "Default": "choose_selfheal_usecase"
    },
    "choose_selfheal_usecase": {
      "Comment":"This step will choose which usecase to trigger based on event passed.",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${choose_selfheal_usecase}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "choose_selfheal_usecase_error"
        }
      ],
      "End": true
    },
    "choose_selfheal_usecase_error": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "choose_selfheal_usecase Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "trigger_notification_sfn": {
      "Comment":"This step will trigger the notification sfn.",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${trigger_notification_sfn}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "trigger_notification_sfn_error"
        }
      ],
      "End": true
    },
    "trigger_notification_sfn_error": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "trigger_notification_sfn Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerNotificationSfnWError": {
      "Comment":"This step will trigger notification sfn if states caught an error",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${TriggerNotificationSfnWError}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "TriggerNotificationSfnWErrorError"
        }
      ],
      "Next": "Notify_Failure"
    },
    "TriggerNotificationSfnWErrorError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
      },
      "Next": "Notify_Failure"
    },
    "Notify_Failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 3,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${Notify_Failure}"
      },
      "End": true
    }
  }
}