{
  "Comment": "A state machine to perform the Resolution for SelfHeal Ec2 NativeBackup",
  "StartAt": "TagsRemediation",
  "States": {
    "TagsRemediation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${TagsRemediation}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "TagsRemediationError"
        }
      ],
      "Next": "IAMRoleRemediation"
    },
    "TagsRemediationError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TagsRemediation Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "IAMRoleRemediation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${IAMRoleRemediation}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "IAMRoleRemediationError"
        }
      ],
      "Next": "CheckSSM"
    },
    "IAMRoleRemediationError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "IAMRoleRemediation Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "CheckSSM": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${CheckSSM}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "CheckSSMError"
        }
      ],
      "Next": "CheckSSMStatus"
    },
    "CheckSSMError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckSSM Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "CheckSSMStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.wait_time",
              "NumericEquals": 0
            },
            {
              "And": [
                {
                  "Variable": "$.Instance_SSM_Status",
                  "StringEquals": "Present"
                },
                {
                  "Variable": "$.SSM_Ping_Status",
                  "StringEquals": "Online"
                }
              ]
            }
          ],
          "Next": "CLIRemediation"
        }
      ],
      "Default": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "SecondsPath": "$.wait_time",
      "Next": "CheckSSM"
    },
    "CLIRemediation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${CLIRemediation}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "CLIRemediationError"
        }
      ],
      "Next": "DynamoDbLogging"
    },
    "CLIRemediationError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckTagsError Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "DynamoDbLogging": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${DynamoDbLogging}",
        "Payload": {
          "Payload.$": "$",
          "ExecutionId.$": "$$.Execution.Id",
          "StateMachineName.$": "$$.StateMachine.Name",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "DynamoDbLoggingError"
        }
      ],
      "Next": "TriggerExecuteBackupSFN"
    },
    "DynamoDbLoggingError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "DynamoDbLogging Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerExecuteBackupSFN": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${TriggerExecuteBackupSFN}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "TriggerExecuteBackupSFN_error"
        }
      ],
      "End": true
    },
    "TriggerExecuteBackupSFN_error": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TriggerExecuteBackupSFN Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerNotificationSfnWError": {
      "Comment": "This step will trigger notification sfn if states caught an error",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${TriggerNotificationSfnWError}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "ResultPath": "$.errorInfo",
          "Next": "TriggerNotificationSfnWErrorError"
        }
      ],
      "Next": "NotifyForLambdaFunctionFailure"
    },
    "TriggerNotificationSfnWErrorError": {
      "Type": "Pass",
      "Parameters": {
        "sh_result.$": "$",
        "ExecutionId.$": "$$.Execution.Id",
        "StateMachineName.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
      },
      "Next": "NotifyForLambdaFunctionFailure"
    },
    "NotifyForLambdaFunctionFailure": {
      "Type": "Task",
      "Resource": "${NotifyForLambdaFunctionFailure}",
      "TimeoutSeconds": 900,
      "End": true
    }
  }
}