AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional CloudFormation Template for the EC2_Native_Backup_SelfHeal which will perform the Diagnosis and Resolution activity.'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/SelfhealEc2NativeBackupFailure/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pSESLambdaLayerArn:
    Description: "SSM parameter for Lambda Layer ARN"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/SESLayerLambdaArn
  pDXCNativeBackupSNSTopicArn:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Backups/NativeBackupSnsTopic
    Description: SSM Parameter for Native Backup Failure SNS Topic Arn
  pCloudOpsEmailID:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SelfHeal/CloudOpsNotifyEmail
    Description: SSM Parameter contains the CloudOps Email_Ids
  pDXCSelfHealLambdaRoleName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/SelfHeal/LambdaExecutionRoleName'
    Description: SSM Parameter contains the step function lambda role.
  pDXCSelfHealSFNRole:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/SelfHeal/StepFunctionExecutionRoleName'
    Description: SSM Parameter contains the step function execution role.
  pSenderEmailID:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SelfHeal/SenderEmailId
    Description: SSM Parameter contains the Sender Email_Ids
  pDXCDefaultInstanceProfileArn:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/IAMResources/DefaultInstanceProfileArn'
    Description: SSM Parameter contains Default Instance Profile Arn.
  pSnowIncidentPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3']

Resources:
  
  rDxcmsSHNBFInstanceTagsSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/EC2NativeBackup-SelfHeal/InstanceTags'
      Type: String
      Value: '[{"Key": "BackupSchedule","Value": ""},{"Key": "EbsVolumeBackupLevel","Value": "2"},{"Key": "RetentionPeriod","Value": "30"},{"Key": "ApplyBackup","Value": "True"}]'
      Description: SSM Parameter contains the Tag-Values for the EC2 Instances.

  rDxcmsSHNBFSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt 
        - rDxcmsSHNBFNativeBackupWrapperLambdaLA
        - Arn
      Protocol: lambda
      TopicArn: !Ref pDXCNativeBackupSNSTopicArn
      Region: !Sub ${AWS::Region}

  rDxcmsSHNBWrapperLambdaLAInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref pDXCNativeBackupSNSTopicArn
      FunctionName: !GetAtt 
        - rDxcmsSHNBFNativeBackupWrapperLambdaLA
        - Arn

  rDxcmsSHNBFTagsIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: tags_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          ssm_Parameter: !Ref rDxcmsSHNBFInstanceTagsSSMParameter
      Description: 'Lambda to check and fix the Tag issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/tags_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_tags_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFTagsIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFTagsIssueHanLA

  rDxcmsSHNBFIAMRoleIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: iam_role_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          DefaultIAMRoleArn: !Ref pDXCDefaultInstanceProfileArn
          req_backup_policies: 'AWSBackupServiceRolePolicyForBackup,AWSBackupServiceRolePolicyForRestores'
      Description: 'Lambda to Check and Fix the IAM Role issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/iam_role_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_iam_role_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHNBFIAMRoleIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFIAMRoleIssueHanLA

  rDxcmsSHNBFSSMIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: ssm_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to check SSM issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/ssm_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_ssm_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFSSMIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFSSMIssueHanLA


  rDxcmsSHNBFCLIIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: cli_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to check and Fix CLI issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/cli_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_cli_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFCLIIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFCLIIssueHanLA

  rDxcmsSHNBFTriggerUnmountedVolCheckLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_unmounted_vol_check.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name: !Ref rDxcmsSHNBFUnmountedVolIdsOutputCWLG
          windows_document_name: 'dxcms_sh_nbf_check_mounted_volumes_for_windows'
      Description: 'Lambda to trigger ssm run command to check the unmounted volume ids for an instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_unmounted_vol_check.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_trigger_unmounted_vol_check'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFTriggerUnmountedVolCheckCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFTriggerUnmountedVolCheckLA

  rDxcmsSHNBFUnmountedVolIdsOutputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/ssm"
          - "UnmountedVolumesIdsForEc2NativeBackup"

  rDxcmsSHNBFCheckUnmountedVolumesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_unmounted_volumes.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name: !Ref rDxcmsSHNBFUnmountedVolIdsOutputCWLG
          windows_document_name: 'dxcms_sh_nbf_check_mounted_volumes_for_windows'
      Description: 'Lambda to check the unmouned volume ids for an instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_unmounted_volumes.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_check_unmounted_volumes'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFCheckUnmountedVolumesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFCheckUnmountedVolumesLA

  rDxcmsSHNBFUpdateDynamoDbLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_dynamodb.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to update the Dynamo Db table.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_dynamodb.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_update_dynamodb'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFUpdateDynamoDbCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFUpdateDynamoDbLA

  rDxcmsSHNBFTriggerSNSLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_sns.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          SNS_Topic_Arn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms_sh_sns_notification'
      Description: 'Lambda to publish payload to sns topic.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_sns.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_trigger_sns'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFTriggerSNSCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFTriggerSNSLA

  rDxcmsSHNBFDynamodbResolutionStatusUpdateLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: dynamodb_resolution_status_update.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to update the Resolution status in dynamodb table.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/dynamodb_resolution_status_update.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_dynamodb_resolution_status_update'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFDynamodbResolutionStatusUpdateCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFDynamodbResolutionStatusUpdateLA

  rDxcmsSHNBFTriggerSFNLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_step_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to trigger the step function.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_step_function.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_trigger_step_function'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFTriggerSFNCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFTriggerSFNLA

  rDxcmsSHNBFSendNotificationEmailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_notification_email.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          CloudOpsEmailIdsParameter: '/DXC/SelfHeal/CloudOpsNotifyEmail'
          SenderEmailIdParameter: '/DXC/SelfHeal/SenderEmailId'
          MsTeamsChannelEmailIdParameter : '/DXC/SelfHeal/MsTeamsChannelEmailId'
          table_name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to send the notifications via email.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_notification_email.zip'
      Runtime: python3.11
      Layers:
        - !Ref pSESLambdaLayerArn
      FunctionName: 'dxcms_sh_nbf_send_notification_email'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFSendNotificationEmailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFSendNotificationEmailLA

  rDxcmsSHNBFSSnowDescriptionInputLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: snow_description_input.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name : 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to form the description for snow incidents.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/snow_description_input.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_snow_description_input'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFSSnowDescriptionInputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFSSnowDescriptionInputLA

  rDxcmsSHNBFTriggerNotificationSfnWErrorLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_notification_sfn_w_error.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to trigger the notification sfn if states caught an error'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_notification_sfn_w_error.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_trigger_notification_sfn_w_error'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFTriggerNotificationSfnWErrorCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFTriggerNotificationSfnWErrorLA

  rDxcmsSHNBFReadBackupDetailsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: read_backup_details.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to read backup details for an ec2 instance'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/read_backup_details.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_read_backup_details'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFReadBackupDetailsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFReadBackupDetailsLA

  rDxcmsSHNBFReadLinuxLevel2OutputLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: read_linux_level2_ouput.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to read output of linux level 2 native backup step function'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/read_linux_level2_ouput.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_nbf_read_linux_level2_ouput'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFReadLinuxLevel2OutputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFReadLinuxLevel2OutputLA

  rDxcmsSHNBFNativeBackupWrapperLambdaLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: native_backup_wrapper_lambda.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to trigger the SelfHeal solution for Native Backup Failure'
      Environment:
        Variables:
          sfn_arn : !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:dxcms_sh_sfn_self_heal_master_sfn'
          table_name: 'Ft_Dxcms_SelfHeal'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/native_backup_wrapper_lambda.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_native_backup_wrapper_lambda'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHNBFNativeBackupWrapperLambdaCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHNBFNativeBackupWrapperLambdaLA

  rDxcmsSHNBFEC2BackupSelfHealDiagnosisSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_nbf_sfn_diagnosis'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/dxcms_sh_nbf_sfn_diagnosis/dxcms_sh_nbf_sfn_diagnosis.json'
      DefinitionSubstitutions:
        ReadBackupDetails: !GetAtt 
          - rDxcmsSHNBFReadBackupDetailsLA
          - Arn
        CheckTags: !GetAtt 
          - rDxcmsSHNBFTagsIssueHanLA
          - Arn          
        CheckIAMRole: !GetAtt 
          - rDxcmsSHNBFIAMRoleIssueHanLA
          - Arn
        CheckSSM: !GetAtt
          - rDxcmsSHNBFSSMIssueHanLA
          - Arn
        CheckCLI: !GetAtt
          - rDxcmsSHNBFCLIIssueHanLA
          - Arn
        TriggerUnmountedVolCheck: !GetAtt
          - rDxcmsSHNBFTriggerUnmountedVolCheckLA
          - Arn
        CheckUnmountedVolumes: !GetAtt
          - rDxcmsSHNBFCheckUnmountedVolumesLA
          - Arn
        DynamoDbLogging: !GetAtt 
          - rDxcmsSHNBFUpdateDynamoDbLA
          - Arn
        TriggerResolutionSFN: !GetAtt
          - rDxcmsSHNBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHNBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt 
          - rDxcmsSHNBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEc2NativeBackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHNBFEC2BackupSelfHealResolutionSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_nbf_sfn_resolution'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/dxcms_sh_nbf_sfn_resolution/dxcms_sh_nbf_sfn_resolution.json'
      DefinitionSubstitutions:
        TagsRemediation: !GetAtt 
          - rDxcmsSHNBFTagsIssueHanLA
          - Arn          
        IAMRoleRemediation: !GetAtt 
          - rDxcmsSHNBFIAMRoleIssueHanLA
          - Arn
        CheckSSM: !GetAtt
          - rDxcmsSHNBFSSMIssueHanLA
          - Arn
        CLIRemediation: !GetAtt
          - rDxcmsSHNBFCLIIssueHanLA
          - Arn
        DynamoDbLogging: !GetAtt
          - rDxcmsSHNBFUpdateDynamoDbLA
          - Arn
        TriggerExecuteBackupSFN: !GetAtt
          - rDxcmsSHNBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHNBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt 
          - rDxcmsSHNBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEc2NativeBackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHNBFSelfHealExecuteBackupSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_nbf_sfn_execute_backup'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/dxcms_sh_nbf_sfn_execute_backup/dxcms_sh_nbf_sfn_execute_backup.json'
      DefinitionSubstitutions:
        ReadLinuxLevel2Output: !GetAtt
          - rDxcmsSHNBFReadLinuxLevel2OutputLA
          - Arn
        DynamodbLogging: !GetAtt
          - rDxcmsSHNBFDynamodbResolutionStatusUpdateLA
          - Arn
        SendEmail: !GetAtt
          - rDxcmsSHNBFSendNotificationEmailLA
          - Arn
        SnowDescriptionInput: !GetAtt
          - rDxcmsSHNBFSSnowDescriptionInputLA
          - Arn
        TriggerNotificationSFN: !GetAtt
          - rDxcmsSHNBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHNBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt
          - rDxcmsSHNBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEc2NativeBackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfhealEc2NativeBackupFailure
      - Key: Owner
        Value: DXC      

  rDxcmsSelfHealEC2NativeBackupFailureSFNCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/rDxcmsSelfHealEC2NativeBackupFailureSFNCWLogGroup"

  rDxcmsSelfHealEc2NativeBackupFailureSFNVendedCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/vendedlogs/rDxcmsSelfHealEc2NativeBackupFailureSFNVendedCWLogGroup"

  rDxcmsSHNBFMountedVolumesRunCommandDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Run a PowerShell script or specify the paths to scripts to run.
        parameters:
          executionTimeout:
            type: String
            default: '3600'
            description: "(Optional) The time in seconds for a command to be completed
              before it is considered to have failed. Default is 3600 (1 hour). Maximum
              is 172800 (48 hours)."
            allowedPattern: "([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)"
        mainSteps:
        - precondition:
            StringEquals:
            - platformType
            - Windows
          action: aws:runPowerShellScript
          name: runPowerShellScript
          inputs:
            id: 0.aws:runPowerShellScript
            runCommand: [
                "Set-ExecutionPolicy RemoteSigned",
                "# List the disks",
                "function Convert-SCSITargetIdToDeviceName {",
                "  param([int]$SCSITargetId)",
                "  If ($SCSITargetId -eq 0) {",
                "    return \"sda1\"",
                "  }",
                "  $deviceName = \"xvd\"",
                "  If ($SCSITargetId -gt 25) {",
                "    $deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
                "  }",
                "  $deviceName += [char](0x61 + $SCSITargetId % 26)",
                "  return $deviceName",
                "}",
                "[string[]]$array1 = @()",
                "[string[]]$array2 = @()",
                "[string[]]$array3 = @()",
                "[string[]]$array4 = @()",
                "Get-WmiObject Win32_Volume | Select-Object Name, DeviceID | ForEach-Object {",
                "  $array1 += $_.Name",
                "  $array2 += $_.DeviceID",
                "}",
                "$i = 0",
                "While ($i -ne ($array2.Count)) {",
                "  $array3 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).SerialNumber) -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                "  $array4 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).FriendlyName)",
                "  $i ++",
                "}",
                "[array[]]$array = $array1, $array2, $array3, $array4",
                "Try {",
                "  $InstanceId = Get-EC2InstanceMetadata -Category \"InstanceId\"",
                "  $Region = Get-EC2InstanceMetadata -Category \"Region\" | Select-Object -ExpandProperty SystemName",
                "}",
                "Catch {",
                "  Write-Host \"Could not access the instance Metadata using AWS Get-EC2InstanceMetadata CMDLet.",
                "Verify you have AWSPowershell SDK version '3.1.73.0' or greater installed and Metadata is enabled for this instance.\" -ForegroundColor Yellow",
                "}",
                "Try {",
                "  $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings",
                "  $VirtualDeviceMap = (Get-EC2InstanceMetadata -Category \"BlockDeviceMapping\").GetEnumerator() | Where-Object { $_.Key -ne \"ami\" }",
                "}",
                "Catch {",
                "  Write-Host \"Could not access the AWS API, therefore, VolumeId is not available.",
                "Verify that you provided your access keys or assigned an IAM role with adequate permissions.\" -ForegroundColor Yellow",
                "}",
                "Get-disk | ForEach-Object {",
                "  $DriveLetter = $null",
                "  $VolumeName = $null",
                "  $VirtualDevice = $null",
                "  $DeviceName = $_.FriendlyName",
                "  $DiskDrive = $_",
                "  $Disk = $_.Number",
                "  $Partitions = $_.NumberOfPartitions",
                "  $EbsVolumeID = $_.SerialNumber -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                "  if ($Partitions -ge 1) {",
                "    $PartitionsData = Get-Partition -DiskId $_.Path",
                "    $DriveLetter = $PartitionsData.DriveLetter | Where-object { $_ -notin @(\"\", $null) }",
                "    $VolumeName = (Get-PSDrive | Where-Object { $_.Name -in @($DriveLetter) }).Description | Where-object { $_ -notin @(\"\", $null) }",
                "  }",
                "  If ($DiskDrive.path -like \"*PROD_PVDISK*\") {",
                "    $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSITargetId)",
                "    $BlockDeviceName = \"/dev/\" + $BlockDeviceName",
                "    $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like \"*\" + $_.DeviceName + \"*\" }",
                "    $EbsVolumeID = $BlockDevice.Ebs.VolumeId",
                "    $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON_EC2_NVME*\") {",
                "    $BlockDeviceName = (Get-EC2InstanceMetadata -Category \"BlockDeviceMapping\").ephemeral((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSIPort - 2)",
                "    $BlockDevice = $null",
                "    $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON*\") {",
                "    if ($DriveLetter -match '[^a-zA-Z0-9]') {",
                "      $i = 0",
                "      While ($i -ne ($array3.Count)) {",
                "        if ($array[2][$i] -eq $EbsVolumeID) {",
                "          $DriveLetter = $array[0][$i]",
                "          $DeviceName = $array[3][$i]",
                "        }",
                "        $i ++",
                "      }",
                "    }",
                "    $BlockDevice = \"\"",
                "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*NETAPP*\") {",
                "    if ($DriveLetter -match '[^a-zA-Z0-9]') {",
                "      $i = 0",
                "      While ($i -ne ($array3.Count)) {",
                "        if ($array[2][$i] -eq $EbsVolumeID) {",
                "          $DriveLetter = $array[0][$i]",
                "          $DeviceName = $array[3][$i]",
                "        }",
                "        $i ++",
                "      }",
                "    }",
                "    $EbsVolumeID = \"FSxN Volume\"",
                "    $BlockDevice = \"\"",
                "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName",
                "  }",
                "  Else {",
                "    $BlockDeviceName = $null",
                "    $BlockDevice = $null",
                "  }",
                "  New-Object PSObject -Property @{",
                "    Disk          = $Disk;",
                "    Partitions    = $Partitions;",
                "    DriveLetter   = If ($DriveLetter -eq $null) { \"N/A\" } Else { $DriveLetter };",
                "    EbsVolumeId   = If ($EbsVolumeID -eq $null) { \"N/A\" } Else { $EbsVolumeID };",
                "    Device        = If ($BlockDeviceName -eq $null) { \"N/A\" } Else { $BlockDeviceName };",
                "    VirtualDevice = If ($VirtualDevice -eq $null) { \"N/A\" } Else { $VirtualDevice };",
                "    VolumeName    = If ($VolumeName -eq $null) { \"N/A\" } Else { $VolumeName };",
                "    DeviceName    = If ($DeviceName -eq $null) { \"N/A\" } Else { $DeviceName };",
                "  }",
                "} | Sort-Object Disk | Format-Table -AutoSize -Property EbsVolumeId"
            ]
            timeoutSeconds: "{{ executionTimeout }}"
      DocumentType: Command
      Name: dxcms_sh_nbf_check_mounted_volumes_for_windows
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsSelfhealEc2NativeBackupFailure"
      - Key: Owner
        Value: DXC
