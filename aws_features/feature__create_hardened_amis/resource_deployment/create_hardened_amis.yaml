---
AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional template, creates CoreCM hardened Amis for the user selected OS types'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/CreateHardenedAmis/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3CustomerBucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/CustomerBucket
    Description: SSM Parameter for customer config bucket name
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"  
  pCreateAmisCWFrequency:
    Description: '[Required] Keep 7 days. The schedule (Rate) to trigger CreateHardenedAmis (Change only if required)'
    Type: String
    Default: 'rate(7 days)'
    AllowedValues: ['rate(7 days)', 'rate(15 days)', 'rate(30 days)']
  pEnableCreateHardenedAmisCWRule:
    Description: '[Required] By default CW rule is set to DISABLED, enable ONLY if necessary'
    Type: String
    Default: 'ENABLED'
    AllowedValues: ['DISABLED', 'ENABLED']
  pUserProvidedOSTypes:
    Description: '[Required] Provide OS types for creating the Hardened Amis eg: windows,amazon,suse,oracle,ubuntu,rhel'
    Type: String
    Default: ''
  #pVPCId:
    #Description: 'VPC Id will be used to create HardenedAmis, VPC should contain Public subnet'
    #Type: String
    #Default: ''
  pInstanceTypes:
    Description: 'InstanceTypes for executing the Hardening Amis'
    Type: String
  pRootVolumeEncryption:
    Description: 'Set True for root volume encryption'
    Type: String
    Default: "false"
    AllowedValues: ["true","false"]
  pRetentionPeriod:
    Description: "Retention period of the Custom AMI"
    Type: String
    Default: "30"
  pInstanceTypes:
    Description: 'InstanceTypes for executing the Hardening Amis'
    Type: String
    Default: "{
        'windows': {'InstanceType':'t2.medium'},
        'oracle-linux': {'InstanceType':'t2.medium'},
        'rhel': {'InstanceType':'t2.medium'},
        'suse': {'InstanceType':'t2.large'},
        'ubuntu': {'InstanceType':'t2.medium'},
        'amazon-linux': {'InstanceType':'t2.micro'}
      }"


Conditions:
  cUserProvidedOSTypes: !Not [!Equals [!Ref pUserProvidedOSTypes, ""]]
  #cVPCId: !Not [!Equals [!Ref pVPCId, ""]]

Resources:
  rFeatureCreateHardenedAmisTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "SsmAutomationExecutionID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "SsmAutomationExecutionID"
            KeyType: "HASH"

        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: True
        SSESpecification:
          SSEEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: "Purpose"
            Value: "Table to view created hardened amis."
          - Key: "Owner"
            Value: "DXC"
          - Key: "Application"
            Value: "AWS Managed Services"
        TableName: FeatureCreateHardenAmis
        
  rSsmUserProvidedOSTypes:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureAutomateCreateHardenedAMI/UserProvidedOSTypes
      Description: "Provide OS types for creating the Hardened Amis eg: windows,amazon,suse,oracle,ubuntu,rhel"
      Type: "String"
      Value: !If [cUserProvidedOSTypes, !Ref pUserProvidedOSTypes, "AWSMS-NoValue"]

  #rSsmWLVPCId:
    #Type: "AWS::SSM::Parameter"
    #Properties:
      #Name: /DXC/FeatureAutomateCreateHardenedAMI/WorkloadVpcID
      #Description: "Workload VPC ID for creating hardened amis"
      #Type: "String"
      #Value: !If [cVPCId, !Ref pVPCId, "AWSMS-NoValue"]

  rssmInstanceTypes:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureAutomateCreateHardenedAMI/InstanceTypes
      Description: "InstanceTypes for executing the Hardening Amis"
      Type: "String"
      Value: !Ref pInstanceTypes
  
  rSsmRootVolumeEncryption:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureAutomateCreateHardenedAMI/RootVolumeEncryption
      Description: "Set true for Root volume encryption"
      Type: "String"
      Value: !Ref pRootVolumeEncryption

  rSsmRetentionPeriod:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureAutomateCreateHardenedAMI/RetentionPeriod
      Description: "Retention Period value for Ami"
      Type: "String"
      Value: !Ref pRetentionPeriod

  rDxcmsCreateHardenedAmisEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AWSMS-CreateHardenedAmis
      Description: 'Event that triggers create-hardened-amis lambda to created corecm hardened amis in the region'
      ScheduleExpression: !Sub '${pCreateAmisCWFrequency}'
      State: !Ref pEnableCreateHardenedAmisCWRule
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "rDxcmsCreateHardenedAmisLambda"
              - "Arn"
          Id: "CreateHardenedAmis"
          Input: "{\"RequestType\": \"CreateHardenedAmis\"}"
    
  rDxcmsViewCreateHardenedAmisStatusEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AWSMS-ViewCreateHardenedAmisStatus
      Description: 'Event that triggers create-hardened-amis lambda to view the created corecm hardened amis in the region'
      ScheduleExpression: 'rate(10 minutes)'
      State: 'DISABLED'
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "rDxcmsCreateHardenedAmisLambda"
              - "Arn"
          Id: "ViewCreateHardenedAmisStatus"
          Input: "{\"RequestType\": \"ViewCreateHardenedAmisStatus\"}"

  rDxcmsCreateHardenedAmisLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rDxcmsCreateHardenedAmisLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rDxcmsCreateHardenedAmisEventsRule"
          - "Arn"
  
  rDxcmsViewCreateHardenedAmisStatusLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rDxcmsCreateHardenedAmisLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rDxcmsViewCreateHardenedAmisStatusEventsRule"
          - "Arn"

  rDxcmsCreateHardenedAmisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsCreateHardenedAmisLambdaRole
      - Key: Owner
        Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["DxcmsCreateHardenedAmisPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-create-hardened-amis-${AWS::Region}:*"
              - Effect: Allow
                Action:
                  - ssm:GetAutomationExecution
                  - ec2:TerminateInstances
                  - ec2:DescribeVpcs
                  - ec2:CreateKeyPair
                  - ssm:ListDocuments
                  - ec2:DescribeSubnets
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ssm:GetParameter
                  - ssm:StartAutomationExecution
                  - ec2:CreateTags
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - logs:CreateLogStream
                  - dynamodb:PutItem
                  - logs:DescribeLogGroups
                  - events:EnableRule
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - events:DisableRule
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FeatureCreateHardenAmis"
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/AWSMS-ViewCreateHardenedAmisStatus"
                  - !Sub "arn:aws:s3:::dxc.customer.config-${AWS::AccountId}-${AWS::Region}/*"
  rDxcmsCreateHardenedAmisLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "dxcms-create-hardened-amis-${AWS::Region}"
      Environment:
        Variables:
          StackRegion: !Sub '${AWS::Region}'
          CustomerBucket: !Ref pDXCS3CustomerBucketName
          StdBucket: !Ref pDXCS3BucketName
          SSMOfferingsUserProvidedOSTypes: !Ref rSsmUserProvidedOSTypes
          #SSMWorkloadVpcID: !Ref rSsmWLVPCId
          SSMRootVolumeEncryption: !Ref rSsmRootVolumeEncryption
          SSMRetentionPeriod: !Ref rSsmRetentionPeriod
          SSMInstanceTypes: !Ref rssmInstanceTypes
          ViewCreateHardenedAmisStatusRule: "AWSMS-ViewCreateHardenedAmisStatus"
          DynamoTblFeatureHardenAMICreation: !Ref rFeatureCreateHardenedAmisTable
      Description: 'Lambda to create hardened Amis and view the status'
      Runtime: python3.11
      Handler: dxcms_create_hardened_amis.lambda_handler
      MemorySize: 128
      Role: !GetAtt rDxcmsCreateHardenedAmisLambdaRole.Arn
      Timeout: 900
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/create_hardened_amis.zip"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxcms_create_hardened_amis-${AWS::Region}"
      - Key: Owner
        Value: DXC
