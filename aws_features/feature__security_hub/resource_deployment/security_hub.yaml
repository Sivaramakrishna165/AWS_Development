AWSTemplateFormatVersion: "2010-09-09"
Description: 'Activate Security Hub, disable all but GuardDuty, creates trigger and lambda to notify ServiceNow, allows product add and delete via stack updates'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Generic Stack Parameters:"
        Parameters:          
          - pEnabledStandardsList
          - pEnableNonDefaultStandardsList
          - pSecHubAcctType
          - pSecHubSnowLogRetention
          - pDXCS3BucketName
          - pFeatureVersion
          - pDXCS3KeyPrefix
          - pfSnowInciPriority
          - pCommonSNOWTopic
      - Label:
          default: "Standard and Integration Update Parameters"
        Parameters:
          - pUpdateStandardsSubscriptionArnList          
          - pUpdateStandardsArnList
          - pUpdateProductArnList
          - pUpdateHash
          - pUpdateProductSubscriptionArnList

      - Label:
          default: "Complete list of Severity Levels, Standards, and Integrations to send to ServiceNow" 
        Parameters:
          - pCompleteSeverityList
          - pCompleteStandardsArnList
          - pCompleteProductArnList

    ParameterLabels:
      pEnabledStandardsList:
        default: "Leave Blank:"
      pEnableNonDefaultStandardsList:
        default: "List of standards not automatically enabled by AWS which are designated to be enabled by default"
      pUpdateStandardsSubscriptionArnList:
        default: "List of Subscription ARNs for standards to disable:"      
      pUpdateStandardsArnList:
        default: "List of StandardsArn for standards to add:"
      pUpdateProductArnList:
        default: "List of ProductArn for integrations to add:"
      pCompleteSeverityList:
        default: "List of severity levels:"
      pCompleteStandardsArnList:
        default: "List of standards:"
      pUpdateProductSubscriptionArnList:
        default: "List of Subscription ARNs for integrations to disable:"
      pCompleteProductArnList:
        default: "List of integrations:"

Parameters:
  # Initial parameters
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: "/DXC/SES/Module/SecurityHub/S3AssetBucket"
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"         
  pEnabledStandardsList:
    Type: String
    Description: 'Leave blank to disable all standards during stack creation'
    Default: 'arn:aws:securityhub:{region}:{accountid}:subscription/aws-foundational-security-best-practices/v/1.0.0,arn:aws:securityhub:{region}:{accountid}:subscription/cis-aws-foundations-benchmark/v/1.2.0'
  pEnableNonDefaultStandardsList:
    Type: String
    Description: 'List of standards not automatically enabled by AWS which are designated to be enabled by default'
    Default: 'arn:aws:securityhub:{region}::standards/cis-aws-foundations-benchmark/v/1.4.0'    
  pSecHubSnowLogRetention:
    Type: Number
    Description: 'Specify the number of days to retain the dxcms_sec_hub_to_service_now CloudWatch logs'
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  # Update parameters
  pUpdateStandardsSubscriptionArnList:
    Type: String
    Description: 'List of Subscription ARNs for standards to disable'
    Default: ''
    #Default: ""
  pUpdateStandardsArnList:
    Type: String
    Description: 'List of StandardsArn for standards to add'
    Default: ''
  pUpdateProductArnList:
    Type: String
    Description: 'List of ProductArn for integrations to add. Example format - arn:aws:securityhub:{region}::product/aws/inspector or provide the correct region name. If multiple values, use comma seperation.'
    Default: ''
  pUpdateHash:
    Default: 0
    Description: This hash initiates updates to the dxcms-update-sec-hub lambda
      This parameter is only used during an updating of the stack and must be changed to a different value.
      During updating of the stack, this parameter MUST be changed to trigger an update.
    Type: String
  pUpdateProductSubscriptionArnList:
    Type: String
    Description: 'List of Subscription ARNs for integrations to disable. Exapmle format - arn:aws:securityhub:{region}:{accountid}:product-subscription/aws/inspector or provide the correct region name and account id. If multiple values, use comma seperation.'
    Default: ''
  pfSnowInciPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor, 4-warning, 5-ok (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3', '4', '5']
  pCommonSNOWTopic:
    Description: '[DO NOT CHANGE] ssm param of Common ServiceNow Topic for service now alerts'
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/SES/Module/CommonServicenow/ComSnowStdInputArn"
    
  # Complete parameters
  pCompleteSeverityList:
    Type: String
    Description: 'List of severities to send to ServiceNow'
    Default: "HIGH,CRITICAL"
  pCompleteStandardsArnList:
    Type: String
    Description: 'List of StandardsArn for standards to add. Example format - arn:aws:securityhub:{region}::standards/standardsname or provide the correct region name. If multiple values, use comma seperation.'
    Default: 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0,arn:aws:securityhub:{region}::standards/cis-aws-foundations-benchmark/v/1.4.0,arn:aws:securityhub:{region}::standards/aws-foundational-security-best-practices/v/1.0.0'
  pCompleteProductArnList:
    Type: String
    Description: 'List of ProductArn for integrations to add.Example format - arn:aws:securityhub:{region}::product/aws/guardduty or provide the correct region name. If multiple values, use comma seperation.'
    Default: 'arn:aws:securityhub:{region}::product/aws/guardduty,arn:aws:securityhub:{region}::product/aws/securityhub'

Resources:
  rSecurityHubWithTags:
    Type: 'AWS::SecurityHub::Hub'
    Properties:
      Tags:
        Application: !Ref "AWS::StackName"
        Name: !Sub "Security-Hub-${AWS::AccountId}-${AWS::Region}"
        Owner: 'DXC'

  rDisableDefaultSecHubChecksLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: rDisableDefaultSecHubChecksLambdaRole
        - Key: Owner
          Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["DisableDefaultSecHubChecksLambdaPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-disable-def-sec-hub-chk-${AWS::Region}*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-update-sec-hub-${AWS::Region}*'
              - Effect: Allow
                Action: securityhub:*
                Resource: "*"
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: "*"
                Condition:
                  StringLike:
                    iam:AWSServiceName: securityhub.amazonaws.com

  rSecHubToServiceNowLambdaRole:
    Type: AWS::IAM::Role 
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: rSecHubToServiceNowLambdaRole
        - Key: Owner
          Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["SecHubToServiceNowLambdaPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-sec-hub-to-service-now-${AWS::Region}*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-process-initial-sec-hub-${AWS::Region}*'
              - Effect: Allow
                Action:
                  - sns:ListSubscriptions
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - sns:Publish
                Resource:
                  - "*" 
              - Effect: Allow
                Action: securityhub:*
                Resource: "*"
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: "*"              
                Condition:
                  StringLike:
                    iam:AWSServiceName: securityhub.amazonaws.com
              - Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:ListTables"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "*"

  rDisableDefaultSecHubChecksLambda:
    Type: AWS::Lambda::Function
    #DependsOn: rDisableDefaultSecHubChecksLambdaRole 
    Properties:
      FunctionName: !Sub "dxcms-disable-def-sec-hub-chk-${AWS::Region}" 
      Environment:
        Variables:
          ENABLED_STANDARDS_LIST: !Ref pEnabledStandardsList
          ENABLED_PRODUCT_INTEGRATIONS_LIST: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product-subscription/aws/guardduty,arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product-subscription/aws/securityhub'
          SEVERITY_LIST: !Ref pCompleteSeverityList
          SECHUB_REGION: !Sub '${AWS::Region}'
          AWS_ACCOUNTID: !Sub '${AWS::AccountId}'
      Description: 'Lambda to disable default Security Hub health checks and compliance checks'
      Role: !GetAtt rDisableDefaultSecHubChecksLambdaRole.Arn
      Runtime: python3.11
      Handler: dxcms_disable_def_sec_hub_chk.lambda_handler
      MemorySize: 128
      Timeout: 300
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/dxcms_disable_def_sec_hub_chk.zip'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "dxcms-disable-def-sec-hub-chk-${AWS::Region}"
        - Key: Owner
          Value: DXC

  rEnableNonDefaultSecHubLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: rEnableNonDefaultSecHubCheckLambdaRole
        - Key: Owner
          Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["EnableNonDefaultSecHubLambdaPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-enable-non-def-sec-hub-${AWS::Region}*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-enable-non-def-sec-hub-${AWS::Region}*'
              - Effect: Allow
                Action: securityhub:*
                Resource: "*"

  rEnableNonDefaultSecHubLambda:
    Type: AWS::Lambda::Function
    DependsOn: rDisableDefaultSecHubChecksLambdaCustom 
    Properties:
      FunctionName: !Sub "dxcms-enable-non-def-sec-hub-${AWS::Region}" 
      Environment:
        Variables:
          ENABLED_NON_DEFAULT_STANDARDS_LIST: !Ref pEnableNonDefaultStandardsList
          SECHUB_REGION: !Sub '${AWS::Region}'
          AWS_ACCOUNTID: !Sub '${AWS::AccountId}'
      Description: 'Lambda to enable the non default security hub standards'
      Role: !GetAtt rEnableNonDefaultSecHubLambdaRole.Arn
      Runtime: python3.11
      Handler: dxcms_enable_non_def_sec_hub.lambda_handler
      MemorySize: 128
      Timeout: 300
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/dxcms_enable_non_def_sec_hub.zip'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "dxcms-enable-non-def-sec-hub-${AWS::Region}"
        - Key: Owner
          Value: DXC          
  
  rSecHubToServiceNowLambda:
    Type: AWS::Lambda::Function
    DependsOn: rEnableNonDefaultSecHubLambdaCustom
    Properties:
      FunctionName: !Sub "dxcms-sec-hub-to-service-now-${AWS::Region}" 
      Environment:
        Variables:
          ENABLED_STANDARDS_LIST: !Ref pCompleteStandardsArnList
          ENABLED_PRODUCT_INTEGRATIONS_LIST: !Ref pCompleteProductArnList
          SEVERITY_LIST: !Ref pCompleteSeverityList
          SECHUB_REGION: !Sub '${AWS::Region}'
          AWS_ACCOUNTID: !Sub '${AWS::AccountId}'
          SNS_TOPIC: !Ref pCommonSNOWTopic
          SECHUB_SNOW_LOG_RETENTION: !Ref pSecHubSnowLogRetention
      Description: 'custom Lambda triggered by EventBridge event to parse new Security Hub findings and send to ServiceNow' 
      Role: !GetAtt rSecHubToServiceNowLambdaRole.Arn
      Runtime: python3.11
      Handler: dxcms_sec_hub_to_service_now.lambda_handler
      MemorySize: 128
      Timeout: 300
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/dxcms_sec_hub_to_service_now.zip'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "dxcms-sec-hub-to-service-now-${AWS::Region}"
        - Key: Owner
          Value: DXC

  rProcessInitialSecHubLambda:
    Type: AWS::Lambda::Function
    DependsOn: rEnableNonDefaultSecHubLambdaCustom
    Properties:
      FunctionName: !Sub "dxcms-process-initial-sec-hub-${AWS::Region}" 
      Environment:
        Variables:
          #ENABLED_STANDARDS_LIST: !Ref pEnabledStandardsList
          ENABLED_PRODUCT_INTEGRATIONS_LIST: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product-subscription/aws/guardduty,arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product-subscription/aws/securityhub'
          SEVERITY_LIST: !Ref pCompleteSeverityList
          SECHUB_REGION: !Sub '${AWS::Region}'
          AWS_ACCOUNTID: !Sub '${AWS::AccountId}'
          SNS_TOPIC: !Ref pCommonSNOWTopic
      Description: 'Process initial Security Hub findings, then initial GuardDuty findings'
      # use existing role
      Role: !GetAtt rSecHubToServiceNowLambdaRole.Arn
      Runtime: python3.11
      Handler: dxcms_process_initial_sec_hub.lambda_handler
      MemorySize: 128
      Timeout: 300
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/dxcms_process_initial_sec_hub.zip'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "dxcms-process-initial-sec-hub-${AWS::Region}"
        - Key: Owner
          Value: DXC

  rUpdateSecHubLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "dxcms-update-sec-hub-${AWS::Region}" 
      Environment:
        Variables:
          UPDATE_STANDARDS_SUBSCRIPTION_ARN_LIST: !Ref pUpdateStandardsSubscriptionArnList
          UPDATE_PRODUCTS_SUBSCRIPTION_ARN_LIST: !Ref pUpdateProductSubscriptionArnList
          UPDATE_STANDARDS_ARN_LIST: !Ref pUpdateStandardsArnList
          UPDATE_PRODUCT_ARN_LIST: !Ref pUpdateProductArnList
          SECHUB_REGION: !Sub '${AWS::Region}'
          AWS_ACCOUNTID: !Sub '${AWS::AccountId}'
      Description: 'Add or delete Security Hub standards and integrations during stack update'
      # use existing role
      Role: !GetAtt rDisableDefaultSecHubChecksLambdaRole.Arn
      Runtime: python3.11
      Handler: dxcms_update_sec_hub.lambda_handler
      MemorySize: 128
      Timeout: 300
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub '${pDXCS3KeyPrefix}/dxcms_update_sec_hub.zip'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "dxcms-update-sec-hub-${AWS::Region}"
        - Key: Owner
          Value: DXC

  rEventTriggerSecHubToServiceNowLambda: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Security Hub Finding EventRule"
      EventPattern: 
        source: 
          - "aws.securityhub"
        detail-type: 
          - "Security Hub Findings - Imported"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "rSecHubToServiceNowLambda"
              - "Arn"
          Id: "TargetFunctionV1"
  
  rPermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "rSecHubToServiceNowLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rEventTriggerSecHubToServiceNowLambda"
          - "Arn" 

  rDisableDefaultSecHubChecksLambdaCustom:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rDisableDefaultSecHubChecksLambda.Arn

  rEnableNonDefaultSecHubLambdaCustom:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rEnableNonDefaultSecHubLambda.Arn

  # lambda for handling initial findings after enabling Security Hub
  rProcessInitialSecHubLambdaCustom:  
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rProcessInitialSecHubLambda.Arn

  # lambda for handling stack updates
  rUpdateSecHubLambdaCustom:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rUpdateSecHubLambda.Arn
      pUpdateHash: !Ref pUpdateHash

Outputs:
  oSecurityHubArn:
    Value: !Ref rSecurityHubWithTags
    Export:
      Name: !Sub "${AWS::StackName}:SecurityHubArn-${AWS::AccountId}-${AWS::Region}"