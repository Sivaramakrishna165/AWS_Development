AWSTemplateFormatVersion: "2010-09-09"

Description: Creation of EKS cluster EC2 based. Monitoring will be part of another feature.

Parameters:

  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"

  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"

  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/EksEc2BasedCluster/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"

  ClusterName:
    Description: Name of the EKS cluster
    Type: String
    Default: 'EKSCluster-1'

  EKSClusterVersion:
    Description: Version of the EKS cluster. Leave it empty for default version 
    Type: String
    Default: ""

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    #Type: String
    Description: The VPC of the worker instances

  Subnets:
    #Type: "List<AWS::EC2::Subnet::Id>"
    Type: String
    Default: "dummy"
    Description: The subnets where workers can be created.

  SnowInciPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor, 4-warning, 5-ok (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3', '4', '5']    

Conditions:
  cSubnetNOTProvided: !Equals [!Ref Subnets, 'dummy']
  cBucketCreation: !Equals [ !Select [ 0, !Split [ "-", !Ref AWS::StackName ]], "FeatureEksEc2BasedClusterStack"]
  useEKSClusterVersion: !Not [!Equals [!Ref EKSClusterVersion, ""]]
Resources:

  InvokeGetPrivateSubnets:
    Type: "Custom::InvokeGetPrivateSubnets"
    Condition: cSubnetNOTProvided
    Properties:
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:getPrivateSubnets"]]
      VPCID: !Ref VpcId

  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterControlPlaneSecurityGroup'
      VpcId: !Ref VpcId

  IngressControlPlaneNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      ToPort: 65535

  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub '${AWS::StackName}-ServiceRole-'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess            

  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterControlPlaneSecurityGroup
        #SubnetIds: !Ref Subnets
        SubnetIds: !If [cSubnetNOTProvided, !Split [ ',', !GetAtt InvokeGetPrivateSubnets.SubnetIds ], !Split [ ',', !Ref Subnets]]
      RoleArn: !GetAtt 'EKSServiceRole.Arn' 
      Version: !If [useEKSClusterVersion, !Ref EKSClusterVersion, !Ref 'AWS::NoValue']
  
  rEKSClusterBackupBucket:
    Condition: cBucketCreation
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
        AccessControl: Private
        BucketName: !Join [ "-",["dxc-eks-cluster-backup", !Ref AWS::AccountId, !Ref AWS::Region]]
        BucketEncryption: 
            ServerSideEncryptionConfiguration: 
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True
        Tags:
          - Key: Owner
            Value: DXC
  rEKSClusterBackupBucketParam: 
    Condition: cBucketCreation
    Type: AWS::SSM::Parameter
    Properties:  
      Name: /DXC/EKSCluster-Backup/Bucket
      Description: EKS Cluster backups Bucket
      Type: String
      Value: !Ref rEKSClusterBackupBucket

Outputs:

  ControlPlaneARN:
    # Export:
    #   Name: !Sub '${AWS::StackName}::ARN'
    Description: Control Plane ARN
    Value: !GetAtt 'ControlPlane.Arn'

  Endpoint:
    Description: Control Plane Endpoint
    Value: !GetAtt 'ControlPlane.Endpoint'

  SecurityGroup:
    Description: Control Plane SecurityGroup
    Value: !Ref 'ClusterControlPlaneSecurityGroup'

           