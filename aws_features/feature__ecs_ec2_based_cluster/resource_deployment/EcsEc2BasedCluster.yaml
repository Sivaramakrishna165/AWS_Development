AWSTemplateFormatVersion: '2010-09-09'
Description: The template creates an ECS Cluster, inside which a ECS Container Instances are created by means of EC2 capacity providers (ASG).
Parameters:
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/EcsEc2BasedCluster/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"
  pSESLayerArn:
    Description: "SSM parameter for Lambda Layer ARN"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/SESLayerLambdaArn
  pECSClusterName:
    Type: String
    Description: Provide the ECS Cluster Name as per your choice with which the resources would be associated.
    Default: ''
  pVpcId:
    Type: String
    Description: Provide the VPC where Feature ECS EC2 based will run on.
    Default: ''
    AllowedPattern: "^(?:vpc-[0-9a-f]{8,17}|)$"
    ConstraintDescription: VPC Id must begin with 'vpc-'.
  pEC2SecurityGroupInboundPortsone:
    Type: Number
    Default: 80
    Description: Provide the port for Inbound rule 80 as this is default HTTP port as specified
  pEC2SecurityGroupInboundPortstwo:
    Type: Number
    Default: 443
    Description: Provide the port for Inbound rule 443 as this is default HTTPS port as specified
  pEC2SecurityGroupOutboundPortsone:
    Type: Number
    Default: 80
    Description: Provide the port for Outbound rule 80 as this is default HTTP port as specified
  pEC2SecurityGroupOutboundPortstwo:
    Type: Number
    Default: 443
    Description: Provide the port for Outbound rule 443 as this is default HTTPS port as specified   
  pSubnetIds:
    Type: String
    Description: The private subnets where ECS Container Instances (host) will be created.
    Default: 'dummy'
  pLatestECSOptimizedAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
    Description: Fetching the ECS Optimized AMI ID from SSM parameter provided by AWS.
  pDisableIMDSv1:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'false'
      - 'true'
  pECSEC2InstanceType:
    Type: String
    Default: ''
    ConstraintDescription: Must be a valid EC2 instance type.
    Description: EC2 instance type for the ECS Container instances. I was using t3.xlarge while testing.
  pKeyName:
    Type: String
    Description: The EC2 Key Pair to allow SSH access to the instances.
    Default: ""
  pEC2EBSVolumeSize:
    Type: Number
    Default: 50
    Description: EC2 EBS volume size
  pContainerInsights:
    Type: String
    Description: Enable or disable container insights, Enabling this for Monitoring Solution and seeing enhanced metrics.
    AllowedValues:
      - 'enabled'
      - 'disabled'
    Default: 'enabled'
  pMinSizeCapacity:
    Type: String
    Description: The Minimum size capacity of ECS Container Instances associated with group.
    Default: ""
  pDesiredCapacity:
    Type: String
    Description: The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity of ECS Container Instances it attempts to maintain.
    Default: ""
  pMaxSizeCapacity: 
    Type: String
    Description: The Maximum size capacity of ECS Container Instances to be allocated if autoscaling is required and scaling will not go above this number. 
    Default: ""    

Conditions:
  cSubnetNotProvided: !Equals [!Ref pSubnetIds, 'dummy']
  IMDSv1Disabled:
    "Fn::Equals":
      - !Ref pDisableIMDSv1
      - "true"

Resources:
  rInvokeGetPrivateSubnets:
    Type: "Custom::InvokeGetPrivateSubnets"
    Condition: cSubnetNotProvided
    Properties:
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:getPrivateSubnets"]]
      VPCID: !Ref pVpcId
  rECSEC2IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  rECSEC2IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: rECSEC2IamInstanceRole
  rECSClusterandTasksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This SG will be attached to ECS Container Instances and Tasks & to have communication between them and ALB to bring outside traffic, so that we can view our application deployed via image.
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref pEC2SecurityGroupInboundPortsone
          ToPort: !Ref pEC2SecurityGroupInboundPortsone
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref pEC2SecurityGroupInboundPortstwo
          ToPort: !Ref pEC2SecurityGroupInboundPortstwo
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref pEC2SecurityGroupOutboundPortsone
          ToPort: !Ref pEC2SecurityGroupOutboundPortsone
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref pEC2SecurityGroupOutboundPortstwo
          ToPort: !Ref pEC2SecurityGroupOutboundPortstwo
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ECSClusterandTasksSecurityGroup'
        - Key: Owner
          Value: DXC

  rECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: rECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref pLatestECSOptimizedAMI
        SecurityGroupIds: [!GetAtt rECSClusterandTasksSecurityGroup.GroupId]
        InstanceType: !Ref pECSEC2InstanceType
        KeyName: !Ref pKeyName
        Monitoring: 
          Enabled: true
        IamInstanceProfile:
          Arn: !GetAtt rECSEC2IamInstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: !Ref pEC2EBSVolumeSize
              Encrypted: true
              VolumeType: gp3
              DeleteOnTermination: true
        MetadataOptions:
          HttpPutResponseHopLimit : 2
          HttpEndpoint: enabled
          HttpTokens: !If
            - IMDSv1Disabled
            - required
            - optional
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash
            echo ECS_CLUSTER=${pECSClusterName} >> /etc/ecs/ecs.config;
        TagSpecifications:
          - ResourceType: 'instance'
            Tags:
            - Key: Application
              Value: !Ref 'AWS::StackName'
            - Key: Owner
              Value: DXC
            - Key: Name
              Value: Instance created in ECS EC2 Container Instances 
  rECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rECSCluster
    Properties:
      MinSize: !Ref pMinSizeCapacity
      MaxSize: !Ref pMaxSizeCapacity
      DesiredCapacity: !Ref pDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId:
          Ref: rECSLaunchTemplate
        Version:
          Fn::GetAtt:
          - rECSLaunchTemplate
          - LatestVersionNumber
      VPCZoneIdentifier: !If [cSubnetNotProvided, !Split [ ',', !GetAtt rInvokeGetPrivateSubnets.SubnetIds ], !Split [ ',', !Ref pSubnetIds]]
      Tags:
      - Key: Application
        PropagateAtLaunch: true
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        PropagateAtLaunch: true
        Value: DXC
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - " - "
          - - ECS Instance
            - Ref: pECSClusterName
  rECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref pECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref pContainerInsights
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: !Ref pECSClusterName
      Tags: 
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        Value: DXC
      - Key: Name
        Value: !Ref pECSClusterName
  rEC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: rECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
  rClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    DependsOn: rECSCluster
    Properties:
      Cluster: !Ref pECSClusterName
      CapacityProviders:
      - Ref: rEC2CapacityProvider
      DefaultCapacityProviderStrategy:
      - Base: 0
        Weight: 1
        CapacityProvider:
          Ref: rEC2CapacityProvider
Outputs:
  oECSClusterArn:
    Description: ARN of the created cluster.
    Value:
      Fn::GetAtt: 
      - rECSCluster
      - Arn
  oECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref rECSCluster
  oECSEC2InstanceProfile:
    Description: The EC2 Instance Profile Role attached to ECS Container Instances.
    Value: 
      Fn::GetAtt: 
      - rECSEC2IamInstanceProfile
      - Arn
  oECSEC2AutoScalingGroup:
    Description: The autoscaling group associated with ECS Cluster.
    Value: !Ref rECSAutoScalingGroup    
  oECSClusterandTasksSecurityGroup:
    Description: Security Group to access application with some inbound/outbound rules enabled.
    Value: 
      Fn::GetAtt:
        - rECSClusterandTasksSecurityGroup
        - GroupId