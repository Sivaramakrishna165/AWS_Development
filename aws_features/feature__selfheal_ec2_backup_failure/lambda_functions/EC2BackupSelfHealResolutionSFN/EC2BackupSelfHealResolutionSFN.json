{
    "Comment": "A state machine to perform the Resolution for EC2_Backup SFN",
    "StartAt": "TagsRemediation",
    "States": {
      "TagsRemediation": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TagsRemediation}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TagsRemediationError"
          }
        ],
        "Next": "IAMRoleRemediation"
      },
      "TagsRemediationError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TagsRemediation Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "IAMRoleRemediation": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${IAMRoleRemediation}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "IAMRoleRemediationError"
          }
        ],
        "Next": "ChoiceStatetoStartInstance"
      },
      "IAMRoleRemediationError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "IAMRoleRemediation Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "ChoiceStatetoStartInstance": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Instance_State",
            "StringEquals": "running",
            "Next": "Wait"
          },
          {
            "Variable": "$.Instance_State",
            "StringEquals": "stopped",
            "Next": "StartInstance"
          }
        ]
      },
      "StartInstance": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${StartInstance}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "StartInstanceError"
          }
        ],
        "Next": "Wait"
      },
      "StartInstanceError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "StartInstance Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "Wait": {
        "Type": "Wait",
        "Seconds": 600,
        "Next": "CheckSSM"
      },
      "CheckSSM": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${CheckSSM}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "CheckSSMError"
          }
        ],
        "Next": "CLIRemediation"
      },
      "CheckSSMError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "CheckSSM Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "CLIRemediation": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${CLIRemediation}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "CLIRemediationError"
          }
        ],
        "Next": "ChoiceStatetoStopInstance"
      },
      "CLIRemediationError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "CheckTagsError Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "ChoiceStatetoStopInstance": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Instance_State",
            "StringEquals": "running",
            "Next": "Parallel State"
          },
          {
            "Variable": "$.Instance_State",
            "StringEquals": "stopped",
            "Next": "StopInstance"
          }
        ]
      },
      "StopInstance": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${StopInstance}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "StopInstanceError"
          }
        ],
        "Next": "Parallel State"
      },
      "StopInstanceError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "StopInstance Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "Parallel State": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "SelfHealResolutionResult",
            "States": {
              "SelfHealResolutionResult": {
                "Type": "Pass",
                "End": true
              }
            }
          },
          {
            "StartAt": "StateMachineInfo",
            "States": {
              "StateMachineInfo": {
                "Type": "Pass",
                "Parameters": {
                  "Execution.$": "$$.Execution.Id",
                  "StateMachine.$": "$$.StateMachine.Name"
                },
                "End": true
              }
            }
          }
        ],
        "Next": "DynamoDbLogging"
      },
      "DynamoDbLogging": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${DynamoDbLogging}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "DynamoDbLoggingError"
          }
        ],
        "Next": "TriggerExecuteBackupSFN"
      },
      "DynamoDbLoggingError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "DynamoDbLogging Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerExecuteBackupSFN": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerExecuteBackupSFN}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerExecuteBackupSFN_error"
          }
        ],
        "End": true
      },
      "TriggerExecuteBackupSFN_error": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine": "$$.StateMachine",
          "ErrorMessageFrom": "TriggerExecuteBackupSFN Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSfnWError": {
        "Comment":"This step will trigger notification sfn if states caught an error",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerNotificationSfnWError}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSfnWErrorError"
          }
        ],
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "TriggerNotificationSfnWErrorError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
        },
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "NotifyForLambdaFunctionFailure": {
        "Type": "Task",
        "Resource": "${NotifyForLambdaFunctionFailure}",
        "TimeoutSeconds": 900,
        "End": true
      }
    }
  }

  