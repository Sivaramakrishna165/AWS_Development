{
  "Comment": "A state machine to perform Daignosis for EC2 Backup Selfheal",
  "StartAt": "CheckTags",
  "States": {
    "CheckTags": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${CheckTags}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "CheckTagsError"
        }
      ],
      "Next": "CheckIAMRole"
    },
    "CheckTagsError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckTagsError Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "CheckIAMRole": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${CheckIAMRole}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "CheckIAMRoleError"
        }
      ],
      "Next": "ChoiceStatetoStartInstance"
    },
    "CheckIAMRoleError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckIAMRole Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "ChoiceStatetoStartInstance": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Instance_State",
          "StringEquals": "running",
          "Next": "CheckSSM"
        },
        {
          "Variable": "$.Instance_State",
          "StringEquals": "stopped",
          "Next": "StartInstance"
        }
      ]
    },
    "StartInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${StartInstance}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "StartInstanceError"
        }
      ],
      "Next": "Wait"
    },
    "StartInstanceError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "StartInstance Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 120,
      "Next": "CheckSSM"
    },
    "CheckSSM": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${CheckSSM}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "CheckSSMError"
        }
      ],
      "Next": "CheckCLI"
    },
    "CheckSSMError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckSSM Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "CheckCLI": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${CheckCLI}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "CheckCLIError"
        }
      ],
      "Next": "TriggerUnmountedVolCheck"
    },
    "CheckCLIError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckCLI Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerUnmountedVolCheck": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${TriggerUnmountedVolCheck}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "TriggerUnmountedVolCheckError"
        }
      ],
      "Next": "WaitforSSMCmd"
    },
    "TriggerUnmountedVolCheckError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TriggerUnmountedVolCheckError Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "WaitforSSMCmd": {
      "Type": "Wait",
      "Seconds": 120,
      "Next": "CheckUnmountedVolumes"
    },
    "CheckUnmountedVolumes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${CheckUnmountedVolumes}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "CheckUnmountedVolumesError"
        }
      ],
      "Next": "ChoiceStatetoStopInstance"
    },
    "CheckUnmountedVolumesError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "CheckUnmountedVolumesError Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "ChoiceStatetoStopInstance": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Instance_State",
          "StringEquals": "running",
          "Next": "Parallel State"
        },
        {
          "Variable": "$.Instance_State",
          "StringEquals": "stopped",
          "Next": "StopInstance"
        }
      ]
    },
    "StopInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${StopInstance}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "StopInstanceError"
        }
      ],
      "Next": "Parallel State"
    },
    "StopInstanceError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "StopInstance Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "Parallel State": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "SelfHealDiagnosisResult",
          "States": {
            "SelfHealDiagnosisResult": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "StateMachineInfo",
          "States": {
            "StateMachineInfo": {
              "Type": "Pass",
              "Parameters": {
                "Execution.$": "$$.Execution.Id",
                "StateMachine.$": "$$.StateMachine.Name"
              },
              "End": true
            }
          }
        }
      ],
      "Next": "DynamoDbLogging"
    },
    "DynamoDbLogging": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${DynamoDbLogging}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "DynamoDbLoggingError"
        }
      ],
      "Next": "TriggerResolutionSFN"
    },
    "DynamoDbLoggingError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "DynamoDbLogging Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerResolutionSFN": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${TriggerResolutionSFN}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "TriggerResolutionSFN_error"
        }
      ],
      "End": true
    },
    "TriggerResolutionSFN_error": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine": "$$.StateMachine",
        "ErrorMessageFrom": "TriggerResolutionSFN Function"
      },
      "Next": "TriggerNotificationSfnWError"
    },
    "TriggerNotificationSfnWError": {
      "Comment":"This step will trigger notification sfn if states caught an error",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
          "FunctionName": "${TriggerNotificationSfnWError}",
          "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
          }
      },
      "TimeoutSeconds": 900,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "TriggerNotificationSfnWErrorError"
        }
      ],
      "Next": "NotifyForLambdaFunctionFailure"
    },
    "TriggerNotificationSfnWErrorError": {
      "Type": "Pass",
      "Parameters": {
        "Error.$": "$.Error",
        "Cause.$": "$.Cause",
        "Execution.$": "$$.Execution.Id",
        "StateMachine.$": "$$.StateMachine.Name",
        "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
      },
      "Next": "NotifyForLambdaFunctionFailure"
    },
    "NotifyForLambdaFunctionFailure": {
      "Type": "Task",
      "Resource": "${NotifyForLambdaFunctionFailure}",
      "TimeoutSeconds": 900,
      "End": true
    }
  }
}