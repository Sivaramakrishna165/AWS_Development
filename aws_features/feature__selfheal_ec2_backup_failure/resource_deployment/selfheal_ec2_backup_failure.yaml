AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional CloudFormation Template for the EC2_Backup_SelfHeal which will perform the Diagnosis and Resolution activity.'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/SelfhealEc2BackupFailure/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pDXCBackupHealthSNSTopicArn:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Backups/BackupsSNSTopic
    Description: SSM Parameter for Backup SNS Topic Arn
  pCloudOpsEmailID:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Notification/DXCNotifyEmail
    Description: SSM Parameter contains the CloudOps Email_Ids
  pDXCSelfHealLambdaRoleName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/SelfHeal/LambdaExecutionRoleName'
    Description: SSM Parameter contains the step function lambda role.
  pDXCSelfHealSFNRole:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/SelfHeal/StepFunctionExecutionRoleName'
    Description: SSM Parameter contains the step function execution role.
  pSenderEmailID:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SelfHeal/SenderEmailId
    Description: SSM Parameter contains the Sender Email_Ids
  pDXCDefaultInstanceProfileArn:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: '/DXC/IAMResources/DefaultInstanceProfileArn'
    Description: SSM Parameter contains Default Instance Profile Arn.
  pSnowIncidentPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3']

Resources:
  
  rDxcmsSHBFInstanceTagsSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/DXC/EC2Backup-SelfHeal/InstanceTags'
      Type: String
      Value: '[{"Key": "BackupSchedule","Value": ""},{"Key": "EbsVolumeBackupLevel","Value": "2"},{"Key": "RetentionPeriod","Value": "30"},{"Key": "ApplyBackup","Value": "True"}]'
      Description: SSM Parameter contains the Tag-Values for the EC2 Instances.

  rDxcmsSHBFSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxcms_sh_lam_wrapper_lam_to_trigger_sfn'
      Protocol: lambda
      TopicArn: !Ref pDXCBackupHealthSNSTopicArn
      Region: !Sub ${AWS::Region}

  rDxcmsSHWrapperLamToTriggerBFSfnLAInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref pDXCBackupHealthSNSTopicArn
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dxcms_sh_lam_wrapper_lam_to_trigger_sfn'

  rDxcmsSHBFTriggerlevel1BackupLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_level1_backup.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name: 'Ft_Dxcms_SelfHeal'
          sns_lamda_function: !Ref rDxcmsSHBFTriggerSNSLA
      Description: 'Lambda to trigger the level1 Backup.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_level1_backup.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_level1_backup'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerlevel1BackupCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerlevel1BackupLA

  rDxcmsSHBFTagsIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: tags_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          ssm_Parameter: !Ref rDxcmsSHBFInstanceTagsSSMParameter
      Description: 'Lambda to check and fix the Tag issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/tags_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_tags_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTagsIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTagsIssueHanLA

  rDxcmsSHBFIAMRoleIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: iam_role_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          DefaultIAMRoleArn: !Ref pDXCDefaultInstanceProfileArn
      Description: 'Lambda to Check and Fix the IAM Role issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/iam_role_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_iam_role_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHBFIAMRoleIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFIAMRoleIssueHanLA

  rDxcmsSHBFSSMIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: ssm_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to check SSM issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/ssm_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_ssm_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFSSMIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFSSMIssueHanLA


  rDxcmsSHBFCLIIssueHanLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: cli_issue_handler.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to check and Fix CLI issue.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/cli_issue_handler.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_cli_issue_handler'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFCLIIssueHanCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFCLIIssueHanLA

  rDxcmsSHBFTriggerUnmountedVolCheckLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_unmounted_vol_check.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name: !Ref rDxcmsSHBFUnmountedVolIdsOutputCWLG
          windows_document_name: 'dxcms_sfbf_check_mounted_volumes_for_windows'
      Description: 'Lambda to trigger ssm run command to check the unmounted volume ids for an instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_unmounted_vol_check.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_unmounted_vol_check'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerUnmountedVolCheckCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerUnmountedVolCheckLA

  rDxcmsSHBFUnmountedVolIdsOutputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/ssm"
          - "UnmountedVolumesIdsForLevel2Backup"

  rDxcmsSHBFCheckUnmountedVolumesLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_unmounted_volumes.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name: !Ref rDxcmsSHBFUnmountedVolIdsOutputCWLG
          windows_document_name: 'dxcms_sfbf_check_mounted_volumes_for_windows'
      Description: 'Lambda to check the unmouned volume ids for an instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_unmounted_volumes.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_check_unmounted_volumes'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFCheckUnmountedVolumesCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFCheckUnmountedVolumesLA

  rDxcmsSHBFUpdateDynamoDbLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: update_dynamodb.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to update the Dynamo Db table.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/update_dynamodb.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_update_dynamodb'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFUpdateDynamoDbCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFUpdateDynamoDbLA

  rDxcmsSHBFStartInstanceLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: start_instance.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to start the instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/start_instance.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_start_instance'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFStartInstanceCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFStartInstanceLA

  rDxcmsSHBFTriggerSNSLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_sns.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          CloudOps_Email_ID: !Ref pCloudOpsEmailID
          SNS_Topic_Arn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dxcms_sh_sns_notification'
      Description: 'Lambda to publish payload to sns topic.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_sns.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_sns'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerSNSCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerSNSLA

  rDxcmsSHBFStopInstanceLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: stop_instance.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to Stop instances.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/stop_instance.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_stop_instance'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFStopInstanceCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFStopInstanceLA

  rDxcmsSHBFCheckBackupStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_backup_status.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to check Backup status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_backup_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_check_backup_status'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFCheckBackupStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFCheckBackupStatusLA

  rDxcmsSHBFDynamodbResolutionStatusUpdateLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: dynamodb_resolution_status_update.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          Table_Name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to update the Resolution status in dynamodb table.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/dynamodb_resolution_status_update.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_dynamodb_resolution_status_update'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFDynamodbResolutionStatusUpdateCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFDynamodbResolutionStatusUpdateLA

  rDxcmsSHBFTriggerSFNLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_step_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to trigger the step function.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_step_function.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_step_function'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerSFNCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerSFNLA

  rDxcmsSHBFSendNotificationEmailLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: send_notification_email.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          CloudOpsEmailIds: !Ref pCloudOpsEmailID
          SenderEmailId: '/DXC/SelfHeal/SenderEmailId'
          MsTeamsChannelEmailId : '/DXC/SelfHeal/MsTeamsChannelEmailId'
          table_name: 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to send the notifications via email.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/send_notification_email.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_send_notification_email'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFSendNotificationEmailCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFSendNotificationEmailLA

  rDxcmsSHBFSSnowDescriptionInputLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: snow_description_input.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          table_name : 'Ft_Dxcms_SelfHeal'
      Description: 'Lambda to form the description for snow incidents.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/snow_description_input.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_snow_description_input'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFSSnowDescriptionInputCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFSSnowDescriptionInputLA

  rDxcmsSHBFListExcessSnapshotIdsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: list_excess_snapshot_ids.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to list the excess snapshot ids available for the volume.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/list_excess_snapshot_ids.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_list_excess_snapshot_ids'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFListExcessSnapshotIdsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFListExcessSnapshotIdsLA

  rDxcmsSHBFChooseBackupLevelLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: choose_backup_level.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to choose the backup level, whether we have to take the level one or level two backup.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/choose_backup_level.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_choose_backup_level'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFChooseBackupLevelCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFChooseBackupLevelLA

  rDxcmsSHBFTriggerLevelTwoBackupLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_level2_backup.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name : !Ref rDxcmsSHBFSSMCmdStdOutputlevel2CWLG
      Description: 'Lambda to trigger the level 2 backup.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_level2_backup.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_level2_backup'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerLevelTwoBackupCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerLevelTwoBackupLA

  rDxcmsSHBFCheckSSMCommandStatusLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: check_ssm_cmd_id_status.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name : !Ref rDxcmsSHBFSSMCmdStdOutputlevel2CWLG
      Description: 'Lambda to check the ssm command id status.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/check_ssm_cmd_id_status.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_check_ssm_cmd_id_status'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHBFSSMCmdStdOutputlevel2CWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - "SSMCmdStandardOutputLevel2BackupFailure"

  rDxcmsSHBFCheckSSMCommandStatusCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFCheckSSMCommandStatusLA

  rDxcmsSHBFFetchSnapshotIdsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: fetch_snapshot_ids.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Environment:
        Variables:
          log_group_name : !Ref rDxcmsSHBFSSMCmdStdOutputlevel2CWLG
      Description: 'Lambda to fetch the snapshot ids for the volume ids attached to an instance.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/fetch_snapshot_ids.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_fetch_snapshot_ids'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFFetchSnapshotIdsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFFetchSnapshotIdsLA

  rDxcmsSHBFDeleteExcessSnapshotIdsLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: delete_excess_snapshots.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to form the description for snow incidents.'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/delete_excess_snapshots.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_delete_excess_snapshots'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFDeleteExcessSnapshotIdsCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFDeleteExcessSnapshotIdsLA

  rDxcmsSHBFTriggerNotificationSfnWErrorLA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: trigger_notification_sfn_w_error.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealLambdaRoleName}'
      Description: 'Lambda to trigger the notification sfn if states caught an error'
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key:  !Sub '${pDXCS3KeyPrefix}/trigger_notification_sfn_w_error.zip'
      Runtime: python3.11
      FunctionName: 'dxcms_sh_bf_trigger_notification_sfn_w_error'
      Timeout: 900
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC
          
  rDxcmsSHBFTriggerNotificationSfnWErrorCWLG:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 90
      LogGroupName: !Join
        - "/"
        - - "/aws/lambda"
          - !Ref rDxcmsSHBFTriggerNotificationSfnWErrorLA

  rDxcmsSHBFEC2BackupSelfHealDiagnosisSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_bf_sfn_diagnosis'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/EC2BackupSelfHealDiagnosisSFN/EC2BackupSelfHealDiagnosisSFN.json'
      DefinitionSubstitutions:
        CheckTags: !GetAtt 
          - rDxcmsSHBFTagsIssueHanLA
          - Arn          
        CheckIAMRole: !GetAtt 
          - rDxcmsSHBFIAMRoleIssueHanLA
          - Arn
        StartInstance: !GetAtt 
          - rDxcmsSHBFStartInstanceLA
          - Arn
        CheckSSM: !GetAtt
          - rDxcmsSHBFSSMIssueHanLA
          - Arn
        CheckCLI: !GetAtt
          - rDxcmsSHBFCLIIssueHanLA
          - Arn
        TriggerUnmountedVolCheck: !GetAtt
          - rDxcmsSHBFTriggerUnmountedVolCheckLA
          - Arn
        CheckUnmountedVolumes: !GetAtt
          - rDxcmsSHBFCheckUnmountedVolumesLA
          - Arn
        StopInstance: !GetAtt
          - rDxcmsSHBFStopInstanceLA
          - Arn
        DynamoDbLogging: !GetAtt 
          - rDxcmsSHBFUpdateDynamoDbLA
          - Arn
        TriggerResolutionSFN: !GetAtt
          - rDxcmsSHBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt 
          - rDxcmsSHBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEC2BackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHBFEC2BackupSelfHealResolutionSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_bf_sfn_resolution'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/EC2BackupSelfHealResolutionSFN/EC2BackupSelfHealResolutionSFN.json'
      DefinitionSubstitutions:
        TagsRemediation: !GetAtt 
          - rDxcmsSHBFTagsIssueHanLA
          - Arn          
        IAMRoleRemediation: !GetAtt 
          - rDxcmsSHBFIAMRoleIssueHanLA
          - Arn
        StartInstance: !GetAtt 
          - rDxcmsSHBFStartInstanceLA
          - Arn
        CheckSSM: !GetAtt
          - rDxcmsSHBFSSMIssueHanLA
          - Arn
        CLIRemediation: !GetAtt
          - rDxcmsSHBFCLIIssueHanLA
          - Arn
        StopInstance: !GetAtt 
          - rDxcmsSHBFStopInstanceLA
          - Arn
        DynamoDbLogging: !GetAtt
          - rDxcmsSHBFUpdateDynamoDbLA
          - Arn
        TriggerExecuteBackupSFN: !GetAtt
          - rDxcmsSHBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt 
          - rDxcmsSHBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEC2BackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL' 
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC

  rDxcmsSHBFSelfHealExecuteBackupSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_sh_bf_sfn_execute_backup'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/EC2BackupSelfHealExecuteBackup/EC2BackupSelfHealExecuteBackup.json'
      DefinitionSubstitutions:
        ListExcessiveSnapshotIds: !GetAtt
          - rDxcmsSHBFListExcessSnapshotIdsLA
          - Arn
        ChooseBackupLevel: !GetAtt
          - rDxcmsSHBFChooseBackupLevelLA
          - Arn
        TriggerLevel1Backup: !GetAtt
          - rDxcmsSHBFTriggerlevel1BackupLA
          - Arn
        TriggerLevel2Backup: !GetAtt
          - rDxcmsSHBFTriggerLevelTwoBackupLA
          - Arn
        CheckSSMCommandStatus: !GetAtt
          - rDxcmsSHBFCheckSSMCommandStatusLA
          - Arn
        FetchSnapshotIds: !GetAtt
          - rDxcmsSHBFFetchSnapshotIdsLA
          - Arn
        CheckSnapshotBackupStatus: !GetAtt
          - rDxcmsSHBFCheckBackupStatusLA
          - Arn
        DynamodbLogging: !GetAtt
          - rDxcmsSHBFDynamodbResolutionStatusUpdateLA
          - Arn
        DeleteExcessSnapshotIds: !GetAtt
          - rDxcmsSHBFDeleteExcessSnapshotIdsLA
          - Arn
        SendEmail: !GetAtt
          - rDxcmsSHBFSendNotificationEmailLA
          - Arn
        SnowDescriptionInput: !GetAtt
          - rDxcmsSHBFSSnowDescriptionInputLA
          - Arn
        TriggerNotificationSFN: !GetAtt
          - rDxcmsSHBFTriggerSFNLA
          - Arn
        TriggerNotificationSfnWError: !GetAtt
          - rDxcmsSHBFTriggerNotificationSfnWErrorLA
          - Arn
        NotifyForLambdaFunctionFailure: !GetAtt 
          - rDxcmsSHBFTriggerSNSLA
          - Arn
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${pDXCSelfHealSFNRole}'
      LoggingConfiguration:
        Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt [ rDxcmsSelfHealEC2BackupFailureSFNVendedCWLogGroup, Arn ]
        IncludeExecutionData: true
        Level: 'ALL'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsSelfHealEC2BackupFailure
      - Key: Owner
        Value: DXC      

  rDxcmsSelfHealEC2BackupFailureSFNCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/rDxcmsSelfHealEC2BackupFailureSFNCWLogGroup"

  # AWSPE-6340 When you create a state machine with logging enabled, 
  # Step Functions must update your CloudWatch Logs resource policy with the 
  # log group you specify. To avoid reaching the CloudWatch Logs resource policy size limit, 
  # prefix your CloudWatch Logs log group names with /aws/vendedlogs/
  rDxcmsSelfHealEC2BackupFailureSFNVendedCWLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 60
      LogGroupName: !Join
        - "/"
        - - "/aws/vendedlogs/rDxcmsSelfHealEC2BackupFailureSFNVendedCWLogGroup"

  rDxcmsSHBFMountedVolumesRunCommandDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Run a PowerShell script or specify the paths to scripts to run.
        parameters:
          executionTimeout:
            type: String
            default: '3600'
            description: "(Optional) The time in seconds for a command to be completed
              before it is considered to have failed. Default is 3600 (1 hour). Maximum
              is 172800 (48 hours)."
            allowedPattern: "([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)"
        mainSteps:
        - precondition:
            StringEquals:
            - platformType
            - Windows
          action: aws:runPowerShellScript
          name: runPowerShellScript
          inputs:
            id: 0.aws:runPowerShellScript
            runCommand: [
                "Set-ExecutionPolicy RemoteSigned",
                "# List the disks",
                "function Convert-SCSITargetIdToDeviceName {",
                "  param([int]$SCSITargetId)",
                "  If ($SCSITargetId -eq 0) {",
                "    return \"sda1\"",
                "  }",
                "  $deviceName = \"xvd\"",
                "  If ($SCSITargetId -gt 25) {",
                "    $deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
                "  }",
                "  $deviceName += [char](0x61 + $SCSITargetId % 26)",
                "  return $deviceName",
                "}",
                "[string[]]$array1 = @()",
                "[string[]]$array2 = @()",
                "[string[]]$array3 = @()",
                "[string[]]$array4 = @()",
                "Get-WmiObject Win32_Volume | Select-Object Name, DeviceID | ForEach-Object {",
                "  $array1 += $_.Name",
                "  $array2 += $_.DeviceID",
                "}",
                "$i = 0",
                "While ($i -ne ($array2.Count)) {",
                "  $array3 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).SerialNumber) -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                "  $array4 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).FriendlyName)",
                "  $i ++",
                "}",
                "[array[]]$array = $array1, $array2, $array3, $array4",
                "Try {",
                "  $InstanceId = Get-EC2InstanceMetadata -Category \"InstanceId\"",
                "  $Region = Get-EC2InstanceMetadata -Category \"Region\" | Select-Object -ExpandProperty SystemName",
                "}",
                "Catch {",
                "  Write-Host \"Could not access the instance Metadata using AWS Get-EC2InstanceMetadata CMDLet.",
                "Verify you have AWSPowershell SDK version '3.1.73.0' or greater installed and Metadata is enabled for this instance.\" -ForegroundColor Yellow",
                "}",
                "Try {",
                "  $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings",
                "  $VirtualDeviceMap = (Get-EC2InstanceMetadata -Category \"BlockDeviceMapping\").GetEnumerator() | Where-Object { $_.Key -ne \"ami\" }",
                "}",
                "Catch {",
                "  Write-Host \"Could not access the AWS API, therefore, VolumeId is not available.",
                "Verify that you provided your access keys or assigned an IAM role with adequate permissions.\" -ForegroundColor Yellow",
                "}",
                "Get-disk | ForEach-Object {",
                "  $DriveLetter = $null",
                "  $VolumeName = $null",
                "  $VirtualDevice = $null",
                "  $DeviceName = $_.FriendlyName",
                "  $DiskDrive = $_",
                "  $Disk = $_.Number",
                "  $Partitions = $_.NumberOfPartitions",
                "  $EbsVolumeID = $_.SerialNumber -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                "  if ($Partitions -ge 1) {",
                "    $PartitionsData = Get-Partition -DiskId $_.Path",
                "    $DriveLetter = $PartitionsData.DriveLetter | Where-object { $_ -notin @(\"\", $null) }",
                "    $VolumeName = (Get-PSDrive | Where-Object { $_.Name -in @($DriveLetter) }).Description | Where-object { $_ -notin @(\"\", $null) }",
                "  }",
                "  If ($DiskDrive.path -like \"*PROD_PVDISK*\") {",
                "    $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSITargetId)",
                "    $BlockDeviceName = \"/dev/\" + $BlockDeviceName",
                "    $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like \"*\" + $_.DeviceName + \"*\" }",
                "    $EbsVolumeID = $BlockDevice.Ebs.VolumeId",
                "    $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON_EC2_NVME*\") {",
                "    $BlockDeviceName = (Get-EC2InstanceMetadata -Category \"BlockDeviceMapping\").ephemeral((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSIPort - 2)",
                "    $BlockDevice = $null",
                "    $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON*\") {",
                "    if ($DriveLetter -match '[^a-zA-Z0-9]') {",
                "      $i = 0",
                "      While ($i -ne ($array3.Count)) {",
                "        if ($array[2][$i] -eq $EbsVolumeID) {",
                "          $DriveLetter = $array[0][$i]",
                "          $DeviceName = $array[3][$i]",
                "        }",
                "        $i ++",
                "      }",
                "    }",
                "    $BlockDevice = \"\"",
                "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName",
                "  }",
                "  ElseIf ($DiskDrive.path -like \"*NETAPP*\") {",
                "    if ($DriveLetter -match '[^a-zA-Z0-9]') {",
                "      $i = 0",
                "      While ($i -ne ($array3.Count)) {",
                "        if ($array[2][$i] -eq $EbsVolumeID) {",
                "          $DriveLetter = $array[0][$i]",
                "          $DeviceName = $array[3][$i]",
                "        }",
                "        $i ++",
                "      }",
                "    }",
                "    $EbsVolumeID = \"FSxN Volume\"",
                "    $BlockDevice = \"\"",
                "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName",
                "  }",
                "  Else {",
                "    $BlockDeviceName = $null",
                "    $BlockDevice = $null",
                "  }",
                "  New-Object PSObject -Property @{",
                "    Disk          = $Disk;",
                "    Partitions    = $Partitions;",
                "    DriveLetter   = If ($DriveLetter -eq $null) { \"N/A\" } Else { $DriveLetter };",
                "    EbsVolumeId   = If ($EbsVolumeID -eq $null) { \"N/A\" } Else { $EbsVolumeID };",
                "    Device        = If ($BlockDeviceName -eq $null) { \"N/A\" } Else { $BlockDeviceName };",
                "    VirtualDevice = If ($VirtualDevice -eq $null) { \"N/A\" } Else { $VirtualDevice };",
                "    VolumeName    = If ($VolumeName -eq $null) { \"N/A\" } Else { $VolumeName };",
                "    DeviceName    = If ($DeviceName -eq $null) { \"N/A\" } Else { $DeviceName };",
                "  }",
                "} | Sort-Object Disk | Format-Table -AutoSize -Property EbsVolumeId"
            ]
            timeoutSeconds: "{{ executionTimeout }}"
      DocumentType: Command
      Name: dxcms_sfbf_check_mounted_volumes_for_windows
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsPatchingE2EAutomation"
      - Key: Owner
        Value: DXC

