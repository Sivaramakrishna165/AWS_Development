{
    "Comment": "A state machine to perform Daignosis for CrowdStrike Agent Failure Selfheal",
    "StartAt": "CheckIAMRole",
    "States": {
      "CheckIAMRole": {
        "Comment":"This step will check whether the required IAM Role and Policies are attached to the EC2 Instance.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${CheckIAMRole}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "CheckIAMRoleError"
          }
        ],
        "Next": "FetchInstanceDetails"
      },
      "CheckIAMRoleError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "CheckIAMRole Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "FetchInstanceDetails": {
        "Comment":"This step will fetch the instance details like ssm connectivity status, os details, instance state, etc.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${FetchInstanceDetails}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "FetchInstanceDetailsError"
          }
        ],
        "Next": "CheckCLIStatus"
      },
      "FetchInstanceDetailsError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "FetchInstanceDetails Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "CheckCLIStatus": {
        "Comment":"This step will check the aws-cli state on the ec2-instance.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${CheckCLIStatus}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "CheckCLIStatusError"
          }
        ],
        "Next": "FetchFalconAgentDetails"
      },
      "CheckCLIStatusError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "CheckCLIStatus Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "FetchFalconAgentDetails": {
        "Comment":"This step will check whether the Falcon Agent is running or not.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${FetchFalconAgentDetails}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "FetchFalconAgentDetailsError"
          }
        ],
        "Next": "Parallel State"
      },
      "FetchFalconAgentDetailsError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "FetchFalconAgentDetails Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "Parallel State": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "SelfHealDiagnosisResult",
            "States": {
              "SelfHealDiagnosisResult": {
                "Type": "Pass",
                "End": true
              }
            }
          },
          {
            "StartAt": "StateMachineInfo",
            "States": {
              "StateMachineInfo": {
                "Type": "Pass",
                "Parameters": {
                  "Execution.$": "$$.Execution.Id",
                  "StateMachine.$": "$$.StateMachine.Name"
                },
                "End": true
              }
            }
          }
        ],
        "Next": "DynamoDbLogging"
      },
      "DynamoDbLogging": {
        "Comment":"This step will log the CS Diagnosis result in the DynamoDB Table.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${DynamoDbLogging}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "DynamoDbLoggingError"
          }
        ],
        "Next": "TriggerResolutionSFN"
      },
      "DynamoDbLoggingError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "DynamoDbLogging Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerResolutionSFN": {
        "Comment":"This step will trigger the CS Resolution Step Function.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerResolutionSFN}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 20
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerResolutionSFN_error"
          }
        ],
        "End": true
      },
      "TriggerResolutionSFN_error": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine": "$$.StateMachine",
          "ErrorMessageFrom": "TriggerResolutionSFN Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSfnWError": {
        "Comment":"This step will trigger notification sfn if states caught an error",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerNotificationSfnWError}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSfnWErrorError"
          }
        ],
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "TriggerNotificationSfnWErrorError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
        },
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "NotifyForLambdaFunctionFailure": {
        "Comment":"This step will send an error notification email via SNS.",
        "Type": "Task",
        "Resource": "${NotifyForLambdaFunctionFailure}",
        "TimeoutSeconds": 900,
        "End": true
      }
    }
  }