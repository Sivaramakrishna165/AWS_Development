{
    "Comment": "A state machine to perform Resolution for Falcon Agent Failure Selfheal",
    "StartAt": "RemediateIAMRoleIssue",
    "States": {
      "RemediateIAMRoleIssue": {
        "Comment":"This step will fix the IAM Issue (attach the missing role or missing policies). ",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${RemediateIAMRoleIssue}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "RemediateIAMRoleIssueError"
          }
        ],
        "Next": "FetchInstanceDetails"
      },
      "RemediateIAMRoleIssueError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "RemediateIAMRoleIssue Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "FetchInstanceDetails": {
        "Comment":"This step will fetch the instance details like ssm connectivity status, os details, instance state, etc.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${FetchInstanceDetails}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "FetchInstanceDetailsError"
          }
        ],
        "Next": "RemediateCLIIssue"
      },
      "FetchInstanceDetailsError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "FetchInstanceDetails Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "RemediateCLIIssue": {
        "Comment":"This step will try to install aws-cli on ec2-instance.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${RemediateCLIIssue}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "RemediateCLIIssueError"
          }
        ],
        "Next": "RestartFalconAgent"
      },
      "RemediateCLIIssueError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "RemediateCLIIssue Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "RestartFalconAgent": {
        "Comment":"This step will fetch the instance details like ssm connectivity status, os details, instance state, etc.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${RestartFalconAgent}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "RestartFalconAgentError"
          }
        ],
        "Next": "ChoiceRestartValidation"
      },
      "RestartFalconAgentError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "RestartFalconAgent Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "ChoiceRestartValidation": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.cs_restart_status_before_configure",
            "StringEquals": "success",
            "Next": "RestartValidate"
          },
          {
            "Variable": "$.cs_restart_status_before_configure",
            "StringEquals": "failed",
            "Next": "InstallFalconAgent"
          }
        ]
      },
      "RestartValidate": {
        "Comment":"This step will validate the CW Agent issue, whther its resolved successfully or not after restart.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${RestartValidate}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "RestartValidateError"
          }
        ],
        "Next": "ChoiceCSInstallation"
      },
      "RestartValidateError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "RestartValidate Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "ChoiceCSInstallation": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.falcon_agent_status",
            "StringEquals": "installed_running",
            "Next": "Parallel State"
          }
        ],
        "Default": "InstallFalconAgent"
      },
      "InstallFalconAgent": {
        "Comment":"This step will install the Falcon agent on the EC2 Instance.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${InstallFalconAgent}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "InstallFalconAgentError"
          }
        ],
        "Next": "ValidateCSIssue"
      },
      "InstallFalconAgentError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "InstallFalconAgent Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "ValidateCSIssue": {
        "Type": "Task",
        "Comment":"This step will validate the Falcon agnet issue, whether its resolved successfully or not.",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${ValidateCSIssue}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "ValidateCSIssueError"
          }
        ],
        "Next": "Parallel State"
      },
      "ValidateCSIssueError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "ValidateCSIssue Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "Parallel State": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "SelfHealResolutionResult",
            "States": {
              "SelfHealResolutionResult": {
                "Type": "Pass",
                "End": true
              }
            }
          },
          {
            "StartAt": "StateMachineInfo",
            "States": {
              "StateMachineInfo": {
                "Type": "Pass",
                "Parameters": {
                  "Execution.$": "$$.Execution.Id",
                  "StateMachine.$": "$$.StateMachine.Name"
                },
                "End": true
              }
            }
          }
        ],
        "Next": "DynamoDbLogging"
      },
      "DynamoDbLogging": {
        "Comment":"This step will log the resolution result into the DynamoDB Table.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${DynamoDbLogging}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "DynamoDbLoggingError"
          }
        ],
        "Next": "SendEmail"
      },
      "DynamoDbLoggingError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "DynamoDbLogging Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "SendEmail": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${SendEmail}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "SendEmailError"
          }
        ],
        "Next": "SnowDescriptionInput"
      },
      "SendEmailError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "SendEmail Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "SnowDescriptionInput": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${SnowDescriptionInput}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "SnowDescriptionInputError"
          }
        ],
        "Next": "TriggerNotificationSFN"
      },
      "SnowDescriptionInputError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "SnowDescriptionInput Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSFN": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerNotificationSFN}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
            {
            "ErrorEquals": [
                "States.Timeout",
                "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
            }
        ],
        "Catch": [
            {
            "ErrorEquals": [
                "States.DataLimitExceeded",
                "States.Runtime",
                "States.TaskFailed",
                "States.Permissions",
                "States.Timeout",
                "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSFNError"
            }
        ],
        "End": true
        },
        "TriggerNotificationSFNError": {
        "Type": "Pass",
        "Parameters": {
            "Error.$": "$.Error",
            "Cause.$": "$.Cause",
            "Execution.$": "$$.Execution.Id",
            "StateMachine.$": "$$.StateMachine.Name",
            "ErrorMessageFrom": "TriggerNotificationSFN Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSfnWError": {
        "Comment":"This step will trigger notification sfn if states caught an error",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
            "FunctionName": "${TriggerNotificationSfnWError}",
            "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
            }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSfnWErrorError"
          }
        ],
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "TriggerNotificationSfnWErrorError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
        },
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "NotifyForLambdaFunctionFailure": {
        "Comment":"This step will send an errror notification email via SNS.",
        "Type": "Task",
        "Resource": "${NotifyForLambdaFunctionFailure}",
        "TimeoutSeconds": 900,
        "End": true
      }
    }
  }