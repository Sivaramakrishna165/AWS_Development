AWSTemplateFormatVersion: "2010-09-09"
Description: Creates required resources for DynamoDB Make Manage functionality
Parameters:
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
    
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
    
  pSESLayerArn:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /DXC/SES/SESLayerLambdaArn
    Description: "SSM parameter for Lambda Layer ARN"
    
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/MakeManageDynamodb/S3AssetBucket
    Description: SSM Parameter for bucket location
    
  pTracingFlag:    
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/CloudWatch/TracingFlag"
    Description: "Flag to enable AWS X-Ray tracing (set to Active) for debugging. Default setting is PassThrough."
    
  pMMDynamodbLastStateName:    
    Type: String
    Default: "DynamodbAlarms"
    Description: "Parameter for Dynamodb Make Manage Last State Name"
    
  pMMDynamodbOutputLocation:    
    Type: String
    Default: "deploy/ft-make-manage-dynamodb/output/dynamodb-info-summary-report.csv"
    Description: "Dynamodb Make Manage Output/report file location (s3key)"
    
  pDXCS3CustomerBucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/CustomerBucket
    Description: "[DO NOT CHANGE] SSM Parameter for Customer bucket location"        
    
  # AWSPE-6465 When you create a state machine with logging enabled, 
  # Step Functions must update your CloudWatch Logs resource policy with the 
  # log group you specify. To avoid reaching the CloudWatch Logs resource policy size limit, 
  # prefix your CloudWatch Logs log group names with /aws/vendedlogs/
  pMMDynamodbVendedStepFunctionLogGroup:
    Description: Dynamodb MM Step Function CloudWatch Log Group
    Default: /aws/vendedlogs/stepfunction/MMDynamodbStepFunction
    Type: String
  pCommonIncidentTopic:
    Description: SSM Param to create the Incidents in Service-Now with priroity fetched from DDB - FtCloudWatchAlarmsIncidentPriorities
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Alarms/CreateIncident-Default
  pLogGroupName:
    Type: String
    Description: 'Do Not Change - The log group to which MM dynamodb lambda write logs'
    Default: 'MMDynamodb'
  pLogStreamName:
    Type: String
    Description: 'Do Not Change - The log stream to which MM dynamodb lambda write logs'
    Default: 'MMDynamodbMessages'
    
Resources:
  
  rMMDynamodbVendedStepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: !Ref pMMDynamodbVendedStepFunctionLogGroup

  rMMDynamoDBLastStateName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/DXC/SES/Module/MakeManageDynamodb/MakeManageDynamodbLastStateName"
      Type: String
      Value: !Ref pMMDynamodbLastStateName
      Description: "SSM Parameter for Dynamodb Make Manage Last State Name (CreateAlarm)" 

  rMMDynamodbOutputLocation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/DXC/SES/Module/MakeManageDynamodb/MakeManageDynamodbOutputLocation"
      Type: "String"
      Value:  !Ref pMMDynamodbOutputLocation
      Description: "Make Manage Dynamodb Output/report file location (s3key)"

############## Creation of Log group and Log stream ##############

  rMMDynamodbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        RetentionInDays: 90
        LogGroupName: !Ref pLogGroupName
        Tags:
          - Key: "Owner"
            Value: "DXC"
          - Key: "Application"
            Value: "AWS Managed Services"
            
  rMMDynamodbLogStream:
    Type: "AWS::Logs::LogStream"
    DependsOn: rMMDynamodbLogGroup
    Properties:
        LogGroupName: !Ref pLogGroupName
        LogStreamName: !Ref pLogStreamName

################## Creation of Dynamodb tables ###################

  rMMDynamodbParameterSetDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "ParameterSetName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ParameterSetName"
          KeyType: "HASH"

      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: "Dynamodb Make Manage - Default setting for the MM Dynamodb tables."
      TableName: FtMMDynamodbParameterSet  

  rMMDynamodbAlarmsDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "TableName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "TableName"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: "Dynamodb Make Manage - AWSMS supported Dynamodb Table alarms"
      TableName: FtMMDynamodbAlarms

  rMMDynamodbReportDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "TableName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "TableName"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: "Dynamodb Make Manage - Processed MM Dynamodb Table report"
      TableName: FtMMDynamodbReport
      
################## Processor Lambda function ###################

  rMMDynamodbLambdaProcessorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbLambdaProcessorPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:TagResource"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: 
                  - !Ref rMMDynamodbStepFunction
                  
  rMMDynamodbProcLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-lambda-processor'
      Description: "MM Dynamodb - Lambda that Processes the Dynamodb tables"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/mm_ddb_lambda_processor.zip"
      Environment: 
        Variables:           
          MMDdbParamSetTableName: !Ref rMMDynamodbParameterSetDdbTable
          MMDdbAlarmsTableName: !Ref rMMDynamodbAlarmsDdbTable
          MMDdbRepTableName: !Ref rMMDynamodbReportDdbTable
          StateFunArn: !GetAtt rMMDynamodbStepFunction.Arn
          MMDdbLogGroupName: !Ref pLogGroupName
          MMDdbLogStreamName: !Ref pLogStreamName
      Handler: "dxc_mm_ddb_lambda_processor.lambda_handler"
      Runtime: python3.11
      Layers:
        - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbLambdaProcessorRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "MM that Processes the Dynamodb tables"
        -
          Key: "Owner"
          Value: "DXC"

################## Enable/Disable Backup Lambda Function ################### 
 
  rMMDynamodbBackupLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbBackupPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"                                    
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListTables"
                  - "dynamodb:TagResource"
                  - "dynamodb:UpdateContinuousBackups"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"

  rMMDynamodbBackupLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-sm1-backup'
      Description: "MM Dynamodb - To enable/disable the Dynamodb Table backup"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm1_mm_ddb_backup.zip"
      Handler: "dxc_mm_ddb_sm1_backup.lambda_handler"
      Runtime: python3.11
      Layers:
        - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbBackupLambdaRole.Arn
      Environment: 
        Variables: 
          MMDdbParamSetTableName: !Ref rMMDynamodbParameterSetDdbTable
          MMDdbRepTableName: !Ref rMMDynamodbReportDdbTable
          MMDdbLogGroupName: !Ref pLogGroupName
          MMDdbLogStreamName: !Ref pLogStreamName
      Tags:
        -
          Key: "Purpose"
          Value: "MM Dynamodb Lambda to Enable/Disable backup"
        -
          Key: "Owner"
          Value: "DXC"

################## Enable/Disable Encryption Lambda Function ###################
 
  rMMDynamodbEncryptionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbEncryptionLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:TagResource"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "kms:DescribeKey"
                  - "kms:CreateGrant"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"                

  rMMDynamodbEncryptionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-sm2-encryption'
      Description: "MM Dynamodb - To enable/disable the Dynamodb Table Encryption"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm2_mm_ddb_encryption.zip"
      Environment: 
        Variables: 
          MMDdbParamSetTableName: !Ref rMMDynamodbParameterSetDdbTable
          MMDdbRepTableName: !Ref rMMDynamodbReportDdbTable
          MMDdbLogGroupName: !Ref pLogGroupName
          MMDdbLogStreamName: !Ref pLogStreamName          
      Handler: "dxc_mm_ddb_sm2_encryption.lambda_handler"
      Runtime: python3.11
      Layers:
        - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbEncryptionLambdaRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "MM Dynamodb Lambda to Enable/Disable Encryption"
        -
          Key: "Owner"
          Value: "DXC"          

################## Create Alarm Lambda function ################### 
 
  rMMDynamodbCreateAlarmExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbCreateAlarmLambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:TagResource"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"
                  
  rMMDynamodbCreateAlarm:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-sm3-create-alarms'
      Description: "MM Dynamodb - Creates Alarms for the Dynamodb tables"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm3_mm_ddb_create_alarms.zip"
      Handler: "dxc_mm_ddb_sm3_create_alarms.lambda_handler"
      Runtime: python3.11
      Layers:
        - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbCreateAlarmExecutionLambdaRole.Arn
      Environment:
        Variables:
          MMDdbParamSetTableName: !Ref rMMDynamodbParameterSetDdbTable
          MMDdbAlarmsTableName: !Ref rMMDynamodbAlarmsDdbTable
          MMDdbRepTableName: !Ref rMMDynamodbReportDdbTable
          CommonIncidentTopic: !Ref pCommonIncidentTopic
          MMDdbLogGroupName: !Ref pLogGroupName
          MMDdbLogStreamName: !Ref pLogStreamName          
      Tags:
        -
          Key: "Purpose"
          Value: "MM Dynamodb Lambda for Creating Alarms"
        -
          Key: "Owner"
          Value: "DXC"

################## Report Lambda Function ###################

  rMMDynamodbSummaryReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbSummaryReportLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:TagResource"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                Resource: 
                - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}
                - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}/deploy/ft-make-manage-dynamodb/output/*
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"

  rMMDynamodbSummaryReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-sm4-summary-report'
      Description: "MM Dynamodb - To create and store the Dynamodb Table Reports"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm4_mm_ddb_summary_report.zip"
      Handler: "dxc_mm_ddb_sm4_summary_report.lambda_handler"
      Runtime: python3.11
      Timeout: 900
      MemorySize: 128
      Layers:
        - !Ref pSESLayerArn      
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbSummaryReportLambdaRole.Arn
      Environment: 
        Variables: 
          MMDdbParamSetTableName: !Ref rMMDynamodbParameterSetDdbTable
          MMDdbRepTableName: !Ref rMMDynamodbReportDdbTable
          MMDdbLastStateName: !Ref rMMDynamoDBLastStateName
          MMDdbOutputLocation: !Ref rMMDynamodbOutputLocation
          pDXCS3CustomerBucketName :  !Ref pDXCS3CustomerBucketName
          MMDdbLogGroupName: !Ref pLogGroupName
          MMDdbLogStreamName: !Ref pLogStreamName          
      Tags:
        -
          Key: "Purpose"
          Value: "MM Dynamodb Summary Report"
        -
          Key: "Owner"
          Value: "DXC"          
          
################## Update Alarm Lambda function ################### 

  rMMDynamodbUpdateAlarmExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMDdbUpdateAlarmLambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-mm-ddb-update-alarms*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxc-awsms-mm-ddb-update-alarms*:log-stream:*'
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:Get*"
                  - "dynamodb:List*"
                Resource: "*"


  rMMDynamodbUpdateAlarms:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-ddb-update-alarms'
      Description: "MM Dynamodb - Update Alarms for the Make Manage Dynamodb Tables"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/mm_ddb_update_alarms.zip"
      Handler: "dxc_mm_ddb_update_alarms.lambda_handler"
      Runtime: python3.11
      Layers:
        - !Ref pSESLayerArn
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMDynamodbUpdateAlarmExecutionLambdaRole.Arn
      Environment:
        Variables:
          MMDdbAlarmsTableName: !Ref rMMDynamodbAlarmsDdbTable
          CommonIncidentTopic: !Ref pCommonIncidentTopic 
      Tags:
        -
          Key: "Purpose"
          Value: "MM Dynamodb Lambda for updating/Creating Alarms"
        -
          Key: "Owner"
          Value: "DXC"

################## Trigger For Invoking Update Lambda Function ################### 
 
  rMMDynamodbUpdateAlarmsLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt rMMDynamodbAlarmsDdbTable.StreamArn
      FunctionName: !GetAtt rMMDynamodbUpdateAlarms.Arn
      StartingPosition: LATEST

################## Event Rule For Invoking the Processor Lambda ###################

  rMMDynamodbTriggerdRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Event that triggers MM Dynamodb Processor Lambda"
      EventPattern:
        detail-type:
          - "Tag Change on Resource"
        source:
          - "aws.tag"
        detail:
          changed-tag-keys:
            - "dxc_dynamodb_make_manage"
          service:
            - "dynamodb"
          resource-type:
            - "table"
          tags:
            dxc_dynamodb_make_manage:
              - "True"
              - "true"
              - "TRUE"
      Targets:
        -
          Arn: !GetAtt rMMDynamodbProcLambda.Arn
          Id: "MMDdbLambdaExecRule"
          
################## Processor Lambda Resource Based Policy - Event Rule ###################

  rMMDynamodbProcLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "rMMDynamodbProcLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rMMDynamodbTriggerdRule.Arn          

################## Step Function ###################

  rMMDynamodbStepFunctionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: MMDdbStepFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"

  rMMDynamodbStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: "rMMDynamodbStepFunctionLambdaExecutionRole"
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Make Manage Dynamodb StateMachine",
          "StartAt": "StateMachineDynamodbBackup",
          "States": {
            "StateMachineDynamodbBackup": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMDynamodbBackupLambda.Arn}:$LATEST",
                "Payload": {
                  "TableName.$": "$.TableName",
                  "TableArn.$": "$.TableArn",
                  "TaskToken.$": "$$.Task.Token",
                  "ParameterSetName.$": "$.ParameterSetName"                  
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "Next": "StateMachineDynamodbSummaryReport"
              } ],
              "Next": "StateMachineDynamodbEncryption"
            },
            "StateMachineDynamodbEncryption": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMDynamodbEncryptionLambda.Arn}:$LATEST",
                "Payload": {
                  "TableName.$": "$.TableName",
                  "TableArn.$": "$.TableArn",
                  "TaskToken.$": "$$.Task.Token",
                  "ParameterSetName.$": "$.ParameterSetName"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "Next": "StateMachineDynamodbSummaryReport"
              } ],
              "Next": "StateMachineDynamodbAlarms"
            },
            "StateMachineDynamodbAlarms": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMDynamodbCreateAlarm.Arn}:$LATEST",
                "Payload": {
                  "TableName.$": "$.TableName",
                  "TableArn.$": "$.TableArn",
                  "TaskToken.$": "$$.Task.Token",
                  "ParameterSetName.$": "$.ParameterSetName"            
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "Next": "StateMachineDynamodbSummaryReport"
              }],
              "Next": "StateMachineDynamodbSummaryReport"
            },
            "StateMachineDynamodbSummaryReport": {
              "Type": "Task",
              "Resource":  "${rMMDynamodbSummaryReportLambda.Arn}",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      RoleArn: !GetAtt rMMDynamodbStepFunctionLambdaExecutionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt rMMDynamodbVendedStepFunctionLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
      Tags:
        -
          Key: "Purpose"
          Value: "MakeManage Dynamodb Step Function"
        -
          Key: "Owner"
          Value: "DXC"
