AWSTemplateFormatVersion: '2010-09-09'
Description: The template will create an Task Definition first and then create ECS Service using that task definition to run tasks/containers in ECS Container Instances.
Parameters:
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/EcsEc2BasedService/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"
  pSESLayerArn:
    Description: "SSM parameter for Lambda Layer ARN"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/SESLayerLambdaArn
  pECSClusterArn:
    Type: String
    Default: ''
    Description: Provide the ECS cluster Arn here.
  pECRImageURI:
    Type: String
    Default: ''
    Description: Please provide container Image URI where we need to provide Image URI <Fetch this URI from ECR repo>.
  pECSTaskCpu:
    Type: String
    Default: ''
    Description: Please provide the number of cpu units reserved for the container, This can be modified as per container cpu requirement. I was using 0.5 vCPU (512) while my testing.
  pECSTaskMemory:
    Type: String
    Default: ''
    Description: Please provide the amount (in MiB) of memory to present to the container, This can be modified as per container memory requirement. I was using 1GB (1024 MB) while my testing.
  pECSContainerName:
    Type: String
    Default: ''
    Description: Please provide the ECR container name here.
  pContainerLogGroupName:
    Type: String
    Default: ''
    Description: Please provide the log group name for ECR container here.
  pECSContainerPort:
    Type: String
    Default: '80'
    Description: The port number on the container that's bound to the user-specified or automatically assigned host port.
  pLoadBalancerandTGPort:
    Type: String
    Default: '80'
    Description: The port number enabled on the ALB Listener in the Target group to keep track of registered targets and keep them healthy using healthcheck cmd provided in container.
  pECSCpuArchitecture:
    Type: String
    Default: 'X86_64'
    Description: This is information about the platform for the Amazon ECS service.
  pECSOperatingSystemFamily:
    Type: String
    Default: 'LINUX'
    Description: The operating system family in which our tasks definitions run on.     
  pECSServiceName:
    Type: String
    Default: ''
    Description: Please Provide the ECS service name here.
  pDesiredTaskCount:
    Type: Number
    Default: 1
    Description: Please Provide the ECS service desired count which will maintain desired no of tasks/containers in a ECS Cluster.
  pVpcId:
    Type: String
    Description: Provide the VPC where our Feature will run on and use the same VPC which was used earlier while creating the ECS Cluster.
    Default: ''
    AllowedPattern: "^(?:vpc-[0-9a-f]{8,17}|)$"
    ConstraintDescription: VPC Id must begin with 'vpc-'.
  pSubnetIds:
    Type: String
    Description: The private subnets where ECS Container Instances (host) will be created.
    Default: 'dummy' 
  pLoadBalancerSubnetIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Please provide the public subnets for load balancer as when we hit public DNS of ALB, we can see web application deployed inside the containers.
  pSecurityGroupIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Please provide the security group id (default security group with has port 80  included in inbound traffic), add the other exposed port where application is deployed.
  pLoadBalancerName:
    Type: String
    Default: ''
    Description: Please Provide the Load balancer name here.
  pTargetGroupName:
    Type: String
    Default: ''
    Description: Please Provide the Target Group name here. 

Conditions:
  cSubnetNotProvided: !Equals [!Ref pSubnetIds, 'dummy']

Resources:
  rInvokeGetPrivateSubnets:
    Type: "Custom::InvokeGetPrivateSubnets"
    Condition: cSubnetNotProvided
    Properties:
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:getPrivateSubnets"]]
      VPCID: !Ref pVpcId

  rECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: 'CreateTaskWExecRoleforContagentmakeAPICalls'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: creatingLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
  rECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: 'CreateTaskRoletomakeAPICalls'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SsmPermissionforGoingInsideContainer
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'          
  rCreateTaskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt rECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt rECSTaskExecutionRole.Arn
      Cpu: !Ref pECSTaskCpu
      Memory: !Ref pECSTaskMemory
      RuntimePlatform:
        CpuArchitecture: !Ref pECSCpuArchitecture
        OperatingSystemFamily: !Ref pECSOperatingSystemFamily
      ContainerDefinitions: 
        - Name: !Ref pECSContainerName
          Image: !Ref pECRImageURI
          PortMappings:
            - ContainerPort: !Ref pECSContainerPort
          Essential: true
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -f http://localhost/ || exit 1"
            Interval: 60
            Retries: 3
            Timeout: 50
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${pContainerLogGroupName}/${pECSContainerName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref pECSContainerName
              awslogs-create-group: true
      RequiresCompatibilities:
        - "EC2"  
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Owner
        Value: DXC
      - Key: Name
        Value: Creating Task Defintion later used for creating ECS service 

  rECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref pECSClusterArn
      TaskDefinition: !Ref rCreateTaskdefinition
      ServiceName: !Ref pECSServiceName
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref pDesiredTaskCount
      LoadBalancers:
      - ContainerName: !Ref pECSContainerName
        ContainerPort: !Ref pECSContainerPort
        TargetGroupArn: !Ref rTargetGroup
      HealthCheckGracePeriodSeconds: '60'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: !Ref pSecurityGroupIds
          Subnets: !If [cSubnetNotProvided, !Split [ ',', !GetAtt rInvokeGetPrivateSubnets.SubnetIds ], !Split [ ',', !Ref pSubnetIds]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies:
      - Field: attribute:ecs.availability-zone
        Type: spread
      - Field: instanceId
        Type: spread
      PlacementConstraints: []
      Tags: 
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        Value: DXC
      - Key: Name
        Value: service created for running tasks in ECS EC2 Container Instances as per desired capacity
      EnableECSManagedTags: true
    DependsOn:
    - rListener

  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Ref pLoadBalancerName
      SecurityGroups: !Ref pSecurityGroupIds
      Subnets: !Ref pLoadBalancerSubnetIds
  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/"
      Name: !Ref pTargetGroupName
      Port: !Ref pLoadBalancerandTGPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId:
        Ref: pVpcId
  rListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref rTargetGroup
      LoadBalancerArn: !Ref rLoadBalancer
      Port: !Ref pLoadBalancerandTGPort
      Protocol: HTTP

Outputs:
  oClusterName:
    Description: The cluster used to create the service.
    Value: !Ref pECSClusterArn
  oTaskDefinition:
    Description: Task Definition ARN.
    Value: !Ref rCreateTaskdefinition
  oECSServiceArn:
    Description: The created service which maintains desired count of tasks/containers.
    Value: !Ref rECSService      
  oECSServiceName:
    Description: The created service which maintains desired count of tasks/containers.
    Value:       
      Fn::GetAtt:
        - rECSService
        - Name      
  oLoadBalancer:
    Description: The created load balancer which will balance the load between 2 or many running tasks/containers.
    Value: !Ref rLoadBalancer
  oLoadBalancerDNS:
    Description: Load Balancer DNS to access the application.
    Value: 
      Fn::GetAtt:
      - rLoadBalancer
      - DNSName  
  oTargetGroup:
    Description: The created target group associated with Load balancer which has tasks/containers private IP as the registered targets.
    Value: !Ref rTargetGroup
