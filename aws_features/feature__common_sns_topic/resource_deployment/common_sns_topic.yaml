AWSTemplateFormatVersion: "2010-09-09"

Description: "Alarm Event Notification from AWS Services to Servicenow through Common SNS Topic"

Parameters:
  pNotifyEmail:
    Description: AWS SSM Parameter that contains the notification email address
      for product operational issues for DXC support to investigate
      (you will receive an email, reply to confirm the subscription)
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/Notification/DXCNotifyEmail"
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/CommonSNSTopic/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pServiceNowInputTopic:
    Description: 'ssm parameter for servicenow sns topic' 
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/SES/Module/CommonServicenow/ComSnowStdInputArn"
  pIncidentPriority:
    Description: '[Required] Default is set to 3-Minor, other priorities are 1-critical, 2-major, 3-minor, 4-warning, 5-ok (can be updated if necessary)'
    Type: String
    Default: '3'
    AllowedValues: ['1', '2', '3', '4', '5']

Resources:
  rCommonSNSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["dxcms-CommonSNSTopicLambdaRole",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-AlarmsToCommonSNSForSnow*'

              - Effect: Allow
                Action: "sns:Publish"
                Resource:
                  - !Ref rTriggerEmailTopic
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow-*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AccountFeatureDefinitions"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rCommonSNSLambdaRole"
      - Key: Owner
        Value: DXC

# lambda which constructs the JSON accepted by SNOW
  rCommonSNSLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: This lambda reads the triggered event and forms json required for snow
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/common_sns_topic.zip"
      Environment:
        Variables:
          servicenowtopic: !Ref pServiceNowInputTopic
          snstopic: !Ref rTriggerEmailTopic
      FunctionName: "dxcms-AlarmsToCommonSNSForSnowAndEmail"
      Handler: common_sns_topic.handler
      Runtime: python3.11
      Role: !GetAtt rCommonSNSLambdaRole.Arn
      Timeout: "300"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxcms-AlarmsToCommonSNSForSnowAndEmail"
      - Key: Owner
        Value: DXC

#permission for the topic to invoke the lambda
  rLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref rTriggerLambdaTopic
      FunctionName: !GetAtt rCommonSNSLambda.Arn

#1st TOPIC which will be configured by users and one which triggers lambda
  rTriggerLambdaTopic:
    Type: AWS::SNS::Topic
    DependsOn: rCommonSNSLambda
    Properties:
      TopicName: !Join ["-",["dxcms-CommonSNSTopicForSnowAndEmail",!Ref "AWS::AccountId",!Ref "AWS::Region"]]
      Subscription:
        - Endpoint: !GetAtt rCommonSNSLambda.Arn
          Protocol: lambda
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub rTriggerLambdaTopic
      - Key: Owner
        Value: DXC

  rTriggerLambdaTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: 'TriggerLambdaTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublish"
            Effect: Allow
            Principal:
              Service: 
                - 'events.amazonaws.com'
                - 'cloudwatch.amazonaws.com'
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rTriggerLambdaTopic
      Topics:
        - !Ref rTriggerLambdaTopic

#TOPIC which sends out alert to Email Sends notification based on the IF condition
  rTriggerEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref pNotifyEmail
          Protocol: email
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub rTriggerEmailTopic
      - Key: Owner
        Value: DXC

  rTriggerEmailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: 'TriggerSnowTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublish"
            Effect: Allow
            Principal:
              Service:
                - 'events.amazonaws.com'
                - 'backup.amazonaws.com'
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rTriggerEmailTopic
      Topics:
        - !Ref rTriggerEmailTopic

#storing the ARN of CommonSNSTopic for ease of users which they can refer to 
  rSSMTriggerLambdaTopicParam:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/dxc/AWSMS/CommonSNSTopicForSnowAndEmail"
      Description: "Configure this Topic ARN to send alert to Snow & Email for AWSMS alarms."
      Type: "String"
      Value: !Ref rTriggerLambdaTopic

Outputs:
  commonSNSTopicToSnow:
    Description: Common SNS Topic to be configured by users for sending Alarms to Snow and Email
    Export:
      Name: CommonSNSTopicForSnowAndEmail
    Value: !GetAtt rTriggerLambdaTopic.TopicName
  ssmCommonSNSTopicToSnow:
    Description: SSM Params of Common SNS Topic to be configured by users for sending Alarms to Snow and Email
    Export:
      Name: SsmParamCommonSNSTopicForSnowAndEmail
    Value: 
      Ref: rSSMTriggerLambdaTopicParam
