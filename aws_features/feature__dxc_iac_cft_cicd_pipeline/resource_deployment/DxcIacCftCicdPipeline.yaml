AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline to deploy IaC templates in same/cross region/account for github projects.
Parameters:
  BuildPlatform:
    Type: String
    Default: 'AMAZON_LINUX_2'
    Description: "[Change ONLY if required] Code build docker container platform"
  BuildPlatformVersion:
    Type: String
    Default: 'Amazon Linux 2023'
    Description: "[Change ONLY if required] Code build docker container platform version"
  BuildPlatformArch:
    Type: String
    Default: 'x86_64'
    Description: "[Change ONLY if required] Code build docker container platform arch"
  BuildPlatformLang:
    Type: String
    Default: 'STANDARD'
    Description: "[Change ONLY if required] Code build docker container platform Language"
  pCommonIncidentTopic:
    Description: SSM Param to create the Incidents in Service-Now with priroity fetched from DDB - FtCloudWatchAlarmsIncidentPriorities
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Alarms/CreateIncident-Default
  CrossAccountRole:
    Type: String
    Description: Cross account role for deploying IaC templates in target account.
    Default: ''
  BuildFile:
    Type: String
    Default: ''
    Description: "Buildspec file to run during the pipeline build stage"
  AWSServices:
    Type: String
    Default: ''
    Description: "AWS services/resources to be created/updated as part of CICD pipeline. Eg. s3,iam,logs"
  AWSRegion:
    Type: String
    Default: ''
    Description: "AWS Region to deploy the IaC templates. Default is Offerings deployed region. Eg. us-east-1"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/DxcIacCftCicdPipeline/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"
  GitHubRepository:
    Type: String
    Default: ''
  GitHubBranch:
    Type: String
    Default: ''
  CodeStarConnectionARN:
    Type: String
    Description: Enter the connection ARN
    Default: ''
  ManualApproval:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: >-
      Require manual approval before deploying templates, will email Primary
      Email and (optionally) Secondary Email specified in the Email Notification
      Settings section
    Type: String
  EmailPrimary:
    Default: ''
    Description: 'Primary email to notify for pending manual approvals and pipeline execution notifications'
    Type: String
  ArtifactsS3KeyLocation:
    Default: ''
    Description: 'S3 key location of the templates'
    Type: String
  EmailSecondary:
    Default: ''
    Description: 'Secondary email to notify for pending manual approvals and pipeline execution notifications'
    Type: String    
  pSESLayerArn:
    Description: "SSM parameter for Lambda Layer ARN"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/SES/SESLayerLambdaArn
  CICDReportSenderEmail:
    Default: ''
    Description: 'Sender email id for sending a consolidated report of CFTs status'
    Type: String
  CICDReportReceiverEmail:
    Default: ''
    Description: 'Receiver email id for sending a consolidated report of CFTs status'
    Type: String 
Conditions:
  AWSRegion: !Not 
    - !Equals 
      - !Ref AWSRegion
      - '${AWS::Region}'
  CrossAccountRole: !Not
    - !Equals
      - !Ref CrossAccountRole
      - ''
  ManualApproval: !Equals 
    - !Ref ManualApproval
    - 'Yes'
  EmailPrimary: !Not 
    - !Equals 
      - !Ref EmailPrimary
      - ''

  EmailSecondary: !Not 
    - !Equals 
      - !Ref EmailSecondary
      - ''

  CICDReportSenderEmail: !Not 
    - !Equals 
      - !Ref CICDReportSenderEmail
      - 'No-Value'
  CICDReportReceiverEmail: !Not 
    - !Equals 
      - !Ref CICDReportReceiverEmail
      - 'No-Value'

Resources:
  rCodeBuildEnvImage:
    Type: Custom::CodeBuildEnvImage
    Properties:
      Description: "Execute the Lambda function dxc-awsms-cicd-get-latest-image"
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:dxc-awsms-cicd-get-latest-image"] ]
      platform : !Ref BuildPlatform
      arch : !Ref BuildPlatformArch
      language : !Ref BuildPlatformLang
      version: !Ref BuildPlatformVersion
      
  rCicdReportSenderEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: !Ref CICDReportSenderEmail
      Description: "Sender email id for sending a consolidated report of CFTs status"

  rCicdReportReceiverEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: !Ref CICDReportReceiverEmail
      Description: "Receiver email id for sending a consolidated report of CFTs status"

  rCicdStacksReportDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "StackName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "StackName"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: !Sub "DXC CICD - Create/Update stack report for pipeline - ${AWS::StackName}"
      
  cicdApprovalSNSTopic:
    Condition: ManualApproval
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - !If 
          - EmailPrimary
          - Endpoint: !Ref EmailPrimary
            Protocol: email
          - !Ref 'AWS::NoValue'
        - !If 
          - EmailSecondary
          - Endpoint: !Ref EmailSecondary
            Protocol: email
          - !Ref 'AWS::NoValue'
  
  rCicdInitiateProcessLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["dxc-cicd-intiate-process",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - lambda:Invoke*
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"
                Condition:
                  'StringEqualsIfExists':
                      'aws:ResourceTag/TagKey/Owner': DXC
                      'aws:ResourceTag/TagKey/Application': 'AWS Managed Services'
                      'aws:ResourceTag/TagKey/CICD-Pipeline': !Sub ${AWS::StackName}
              - Effect: Allow
                Action: 
                  - s3:Get*
                  - s3:List*
                Resource: 
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
    
  rCicdExecCftsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["dxc-cicd-execute-cfts",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: LambdaPolicy
                Effect: Allow
                Condition:
                  'StringEqualsIfExists':
                      'aws:ResourceTag/TagKey/Owner': DXC
                      'aws:ResourceTag/TagKey/Application': 'AWS Managed Services'
                      'aws:ResourceTag/TagKey/CICD-Pipeline': !Sub ${AWS::StackName}
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:SetStackPolicy
                  - iam:PassRole
                  - events:EnableRule
                  - lambda:Invoke*
                Resource: "*"
              - Sid: S3Policy
                Effect: Allow
                Action: 
                  - s3:Get*
                  - s3:List*
                Resource: 
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - Sid: DynamoPolicy
                Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: 
                  - !GetAtt rCicdStacksReportDdbTable.Arn
              - !If 
                - CrossAccountRole
                - Sid: CrossAccountPolicy
                  Effect: Allow                             
                  Action:
                    - 'sts:AssumeRole'
                  Resource:
                    - !Ref CrossAccountRole
                  Effect: Allow
                - !Ref 'AWS::NoValue'

  rCicdCftCreateUpdateServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub 'DXC-CICD-${AWS::StackName}'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSServicesCICDPolicy"
            Effect: "Allow"
            Action: !Split [",", !Join ['', [!Join [':*,', !Split [",", !Ref AWSServices]], ':*']]]
            Resource: "*"
            Condition:
              'StringEqualsIfExists':
                  'aws:ResourceTag/TagKey/Owner': DXC
                  'aws:ResourceTag/TagKey/Application': 'AWS Managed Services'
                  'aws:ResourceTag/TagKey/CICD-Pipeline': !Sub ${AWS::StackName}
      Roles:
        - Ref: rCicdExecCftsLambdaRole
        - !Sub 'DXC-SES-Definition-Parser-Lambda-Execution-Role-${AWS::Region}'

  rCicdReportStackStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["dxc-cicd-report-stack-status",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStacks
                  - events:EnableRule
                  - events:DisableRule
                Resource: "*"
                Condition:
                  'StringEqualsIfExists':
                      'aws:ResourceTag/TagKey/Owner': DXC
                      'aws:ResourceTag/TagKey/Application': 'AWS Managed Services'
                      'aws:ResourceTag/TagKey/CICD-Pipeline': !Sub ${AWS::StackName}
              - Sid: DynamoDBPolicy     
                Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt rCicdStacksReportDdbTable.Arn
              - Sid: SESPolicy
                Effect: "Allow"
                Action:
                  - "ses:SendEmail"
                Resource: "*"
              - Sid: SSMGet
                Effect: "Allow"
                Action: 'ssm:GetParameter'
                Resource: '*'
              - !If 
                - CrossAccountRole
                - Sid: CrossAccountPolicy
                  Effect: Allow                             
                  Action:
                    - 'sts:AssumeRole'
                  Resource:
                    - !Ref CrossAccountRole
                  Effect: Allow
                - !Ref 'AWS::NoValue'

  rCicdInitiateProcessLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "DXC CICD - Fetch cfts from S3 and initiate the execution. Pipeline - ${AWS::StackName}"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/cicd_initiate_process.zip" 
      Environment:
        Variables: 
          CreateCFTLambda: !GetAtt rCicdExecCftsLambda.Arn
      Handler: cicd_initiate_process.lambda_handler
      MemorySize: 128
      Layers:
        - !Ref pSESLayerArn
      Role: !GetAtt rCicdInitiateProcessLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300

  rCicdExecCftsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "DXC CICD - Execute Create/Delete/Update CFTs. Pipeline - ${AWS::StackName}"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/cicd_process_cfts.zip" 
      Environment:
        Variables: 
          CICDReportRule: !GetAtt rdxcCICDReportRule.Arn
          CICDReportDbdTable: !GetAtt rCicdStacksReportDdbTable.Arn
          Region: !Ref AWSRegion
          CrossAccountRole: !Ref CrossAccountRole
      Handler: cicd_process_cfts.lambda_handler
      MemorySize: 128
      Role: !GetAtt rCicdExecCftsLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      Layers:
        - !Ref pSESLayerArn

  rCicdReportStackStatusLambda:
    Type: AWS::Lambda::Function    
    Properties:
      Description: !Sub "DXC CICD - Report stack execution status. Pipeline - ${AWS::StackName}"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/report_stack_status.zip"
      Environment:
        Variables:
          CICDReportDbdTable: !GetAtt rCicdStacksReportDdbTable.Arn
          Pipeline: !Sub ${AWS::StackName}
          Region: !Ref AWSRegion
          Account: !Sub ${AWS::AccountId}        
          SenderMailSSMParam: !Ref rCicdReportSenderEmail
          ReceiverMailSSMParam: !Ref rCicdReportReceiverEmail
          CrossAccountRole: !Ref CrossAccountRole
      Handler: report_stack_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt rCicdReportStackStatusLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      Layers:
        - !Ref pSESLayerArn

  rdxcCICDReportRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Event that triggers dxc-cicd-report-stack-status lambda to to generate create/update stack report'
      ScheduleExpression: "rate(1 minute)"
      State: "DISABLED"
      Targets:
        -
          Arn: !GetAtt rCicdReportStackStatusLambda.Arn
          Id: "CICDGenerateStackReport"

  rdxcCICDReportRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rCicdReportStackStatusLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rdxcCICDReportRule.Arn
  
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - 'codebuild:StopBuild'
                  - 'codebuild:UpdateProject'
                  - 'codebuild:ListProjects'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*'
              - Effect: Allow
                Action:
                  - 'codebuild:CreateReportGroup'
                  - 'codebuild:CreateReport'
                  - 'codebuild:BatchPutTestCases'
                  - 'codebuild:UpdateReport'
                Resource:
                  - !Sub >-
                    arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
              - Effect: Allow
                Action:
                  - 'codebuild:ListProjects'
                  - 'codebuild:ListBuilds'
                  - 'codecommit:GitPull'
                  - 'codecommit:GetRepository'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource:
                  - !Sub '${CodeStarConnectionARN}'

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: CodeBuildPolicy
                Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Sid: ArtifactsBuckets
                Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - Sid: CodeStarConnec
                Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource:
                  - !Sub '${CodeStarConnectionARN}'
              - !If 
                - ManualApproval
                - Sid: SNSAcces                  
                  Action:
                    - 'sns:Publish'
                  Resource:
                    - !Ref cicdApprovalSNSTopic
                  Effect: Allow
                - !Ref 'AWS::NoValue'
              - Sid: CloudFormationAction
                Action:
                    - 'cloudformation:CreateStack'
                    - 'cloudformation:DescribeStacks'
                    - 'cloudformation:DeleteStack'
                    - 'cloudformation:UpdateStack'
                    - 'cloudformation:CreateChangeSet'
                    - 'cloudformation:ExecuteChangeSet'
                    - 'cloudformation:DeleteChangeSet'
                    - 'cloudformation:DescribeChangeSet'
                    - 'cloudformation:SetStackPolicy'
                    - 'iam:PassRole'
                Effect: Allow
                Resource: '*'
              - Sid: InvokeLambda
                Action:
                    - 'lambda:InvokeFunction'
                Effect: Allow
                Resource: '*'

  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Ref 'AWS::StackName'
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildFile
      Environment:
        Type: LINUX_CONTAINER
        Image: !GetAtt rCodeBuildEnvImage.name
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Value: !Ref ArtifactBucket
          - Name: TEMPLATE_NAME
            Value: !Ref AWS::StackName
          - Name: S3_Key_CFT_Location
            Value: !Ref ArtifactsS3KeyLocation
      QueuedTimeoutInMinutes: 60
      TimeoutInMinutes: 60

  ArtifactBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: CrossAccountRole
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Statement:
          - Effect: Allow                             
            Action:
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:GetObject'
            Principal:
                AWS: !Join ['', [!Select [0, !Split [':role', !Select [ 0, !Split [ '/', !Ref CrossAccountRole ]]]], ':root']]
            Resource:
              - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - !Sub 'arn:aws:s3:::${ArtifactBucket}'      
          
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Sub '${CodeStarConnectionARN}'
                BranchName: !Ref GitHubBranch
                FullRepositoryId: !Ref GitHubRepository
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: Build
              RunOrder: 2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              InputArtifacts:
                - Name: SourceOutput
        - !If 
          - ManualApproval
          - Name: Approval
            Actions:
            - InputArtifacts: []
              Name: Manual_Approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: '1'
                Provider: Manual
              Configuration:
                NotificationArn: !Ref cicdApprovalSNSTopic
                ExternalEntityLink: !Join 
                  - ''
                  - - 'https://'
                    - !Ref 'AWS::Region'
                    - .console.aws.amazon.com/codepipeline/home?region=
                    - !Ref 'AWS::Region'
                    - '#/dashboard'
                CustomData: !Sub
                  Please thouroughly review pipeline test results, template
                  and stacks before approving. Account - ${AWS::AccountId}.
              RunOrder: 3
          - !Ref 'AWS::NoValue'
        - Name: DeployStage
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: Create_Stacks
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              InputArtifacts:
                - Name: BuildOutput
              OutputArtifacts:
                - Name: StackArtifacts
              Configuration:
                FunctionName: !Ref rCicdInitiateProcessLambda
                UserParameters: !Sub ' { "StackName": "${AWS::StackName}", "Bucket": "${ArtifactBucket}", "Key":"${ArtifactsS3KeyLocation}" }'
              RunOrder: 1

  rBuildFailAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarms when an IaC CFT CICD Build fails.
      AlarmActions:
        - !Ref pCommonIncidentTopic
      MetricName: FailedBuilds
      Namespace: AWS/CodeBuild
      Dimensions:
        - Name: ProjectName
          Value: !Ref CodeBuildProject
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 2
