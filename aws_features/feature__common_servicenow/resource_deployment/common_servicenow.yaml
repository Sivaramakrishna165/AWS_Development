AWSTemplateFormatVersion: "2010-09-09"

Description: "Single solution to process alarm and event inputs from all offering lambdas and services and create ServiceNow incident with proper priority using Agnostic API"

Parameters:
  pSecMgrAwsms:
    Description: 'Secrets Manager secrets name containing the Agnostic API Credentials used for sending to ServiceNow'
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/Notification/DXCSecretsManagerSecretName"
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: "/DXC/SES/Module/CommonServicenow/S3AssetBucket"
    Description: "SSM Parameter for bucket location"
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  ### Parameters for DynamoDB, duplicated in definition file
  pNotifyEmail:
    Description: AWS SSM Parameter that contains the notification email address
      for DLQ and Parser Queue message buildup
      (you will receive an email, reply to confirm the subscription)
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/Notification/DXCNotifyEmail"
  pParserQDelay:
    Description: 'The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900'
    Type: Number
    Default: 0
  pParserQVisTimeout:
    Description: 'The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message'
    Type: Number
    Default: 240
  pParserQMaxRecCnt:
    Description: 'The number of times a message is delivered to the source queue before being moved to the dead-letter queue'
    Type: Number
    Default: 5
  pComSnowDlqDelay:
    Description: 'The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900'
    Type: Number
    Default: 0
  pComSnowDlqVisTimeout:
    Description: 'The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message'
    Type: Number
    Default: 300
  pParserQAlarmThrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 300
  pParserQAlarmPeriod:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 60
  pParserQAlarmEvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqAgeAlarm1Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 3600
  pDlqAgeAlarm1Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 600
  pDlqAgeAlarm1EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqAgeAlarm2Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 14000
  pDlqAgeAlarm2Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 600
  pDlqAgeAlarm2EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqCntAlarm1Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 1
  pDlqCntAlarm1Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 60
  pDlqCntAlarm1EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqCntAlarm2Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 20
  pDlqCntAlarm2Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 300 
  pDlqCntAlarm2EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqCntAlarm3Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 50
  pDlqCntAlarm3Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 300 
  pDlqCntAlarm3EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pDlqCntAlarm4Thrshld:
    Description: 'Timeframe that a message can remain in the Parser Queue before an e-mail notification is sent indicating a buildup of messages in the queue'
    Type: Number
    Default: 100
  pDlqCntAlarm4Period:
    Description: 'The period, in seconds, over which the statistic is applied'
    Type: Number
    Default: 300 
  pDlqCntAlarm4EvalPeriod:
    Description: 'The number of periods over which data is compared to the specified threshold'
    Type: Number
    Default: 1
  pServicenowDomainName:
    Type: "String"
    Default: "/DXC/ServiceNow/DomainName"
    Description: "Domain Name"
  pServicenowBusinessService:
    Type: "String"
    Default: "/DXC/ServiceNow/BusinessService"
    Description: "Business Service name"
  pServicenowCustomerName:
    Type: "String"
    Default: "/DXC/Main/CustomerName"
    Description: "Customer name"
  pServicenowAWSAccountName:
    Type: "String"
    Default: "/DXC/ServiceNow/AWSAccountName"
    Description: "AWS Account Name used for feature Common Servicenow Configuration"


Resources:
  # std_input_topic (SNS) accepts alarms and events from all Lambdas and services in the account.  
  #    and sends to the snow_bound (SQS) which holds the messages for processing.
  rStdInputTopic:
    Type: AWS::SNS::Topic
    DependsOn: rSqsParserQueue
    Properties:
      Subscription:
        - Endpoint: !GetAtt rSqsParserQueue.Arn
          Protocol: sqs
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Name
        Value: !Sub rStdInputTopic
      - Key: Owner
        Value: DXC

  rStdInputTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: 'StdInputTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublish"
            Effect: Allow
            Principal:
              AWS: 
                - !Ref "AWS::AccountId"
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rStdInputTopic
      Topics:
        - !Ref rStdInputTopic

  rComSnowStdInputArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/DXC/SES/Module/CommonServicenow/ComSnowStdInputArn"
      Type: "String"
      Value: !Ref rStdInputTopic
      Description: "SSM parameter for storing Common ServiceNow Standard Input Topic ARN. Can be used for Feature subscription to the StdInput topic"


  rComSnowEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      #TopicName: !Join ["-",["dxcms-StdInputTopic",!Ref "AWS::AccountId",!Ref "AWS::Region"]]
      Subscription:
        #- Endpoint: !GetAtt rSqsParserQueue.Arn
        - Endpoint: !Ref pNotifyEmail
          Protocol: email 
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Name
        Value: !Sub rComSnowEmailTopic
      - Key: Owner
        Value: DXC

  rComSnowEmailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: 'ComSnowEmailTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "Statement1"
            Effect: Allow
            Principal:
              AWS: 
                - !Ref AWS::AccountId
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rComSnowEmailTopic
            Condition:
              #ArnEquals:
              ArnLike:
                # from ComSnowDLQ and ParserQeueu if both ARNS are as noted below
                aws:SourceArn: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*'
                aws:SourceArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ComSnowParserLambda-us-east-2*'
          - Sid: "Statement2"
            Effect: Allow
            Principal:
              Service: 
                - 'cloudwatch.amazonaws.com'
            Action:
              - sns:Publish
            Resource: !Ref rComSnowEmailTopic
            Condition:
              #ArnEquals:
              ArnLike:
                # from CloudWatch Alarms
                aws:SourceArn: !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
      Topics:
        - !Ref rComSnowEmailTopic


  rSqsParserQueue:
    Type: "AWS::SQS::Queue"
    Properties: 
      DelaySeconds: !Ref pParserQDelay 
      VisibilityTimeout: !Ref pParserQVisTimeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rComSnowDLQ.Arn
        #maxReceiveCount: 5
        maxReceiveCount: !Ref pParserQMaxRecCnt 


  #rSnowBoundQueuePolicy:
  rSqsParserQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: rStdInputTopic
    DependsOn: rComSnowParserLambda
    Properties:    
      PolicyDocument:
        Id: SqsParserQueuePolicy
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt rSqsParserQueue.Arn
            Condition:
              ArnEquals:
                #aws:SourceArn: !GetAtt rStdInputTopic.Arn
                aws:SourceArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt rSqsParserQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt rComSnowParserLambda.Arn
      Queues:
        - !Ref rSqsParserQueue


  rComSnowDLQ:
    Type: "AWS::SQS::Queue"
    Properties: 
      #QueueName: !Ref pBackupQueueName
      #DelaySeconds: 0
      DelaySeconds: !Ref pComSnowDlqDelay
      #VisibilityTimeout: 480 
      #VisibilityTimeout: 300 
      VisibilityTimeout: !Ref pComSnowDlqVisTimeout


  rComSnowDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:    
      PolicyDocument:
        Id: ComSnowDLQPolicy
        Version: '2012-10-17'
        Statement:
          # allow writes from parser queue
          - Effect: Allow
            Principal:
              Service:
                - sqs.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt rComSnowDLQ.Arn
            Condition:
              ArnEquals:
                #aws:SourceArn: !GetAtt rStdInputTopic.Arn
                aws:SourceArn: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*'
          # allow writes to e-mail topic
          - Effect: Allow
            Principal:
              Service:
                - sqs.amazonaws.com
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource:
              - !GetAtt rComSnowDLQ.Arn
            Condition:
              ArnEquals:
                #aws:SourceArn: !GetAtt rComSnowEmailTopic.Arn
                aws:SourceArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*'
      Queues:
        - !Ref rComSnowDLQ


  rComSnowParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ComSnowParserLambda-${AWS::Region}"
      Environment:
        Variables:
          Aws_Region: !Sub '${AWS::Region}'
          Aws_Account: !Sub '${AWS::AccountId}'
          DLQ_URL: !Ref rComSnowDLQ
          Domain_name: !Ref pServicenowDomainName
          Business_service: !Ref pServicenowBusinessService
          Customer_name: !Ref pServicenowCustomerName
          aws_account_name_param: !Ref pServicenowAWSAccountName
      Description: 'Lambda to receive data from SQS queue, format it, and invoke Send Lambda'
      Runtime: python3.11
      Handler: snow_parser.lambda_handler
      MemorySize: 128
      Role: !GetAtt rComSnowParserLambdaRole.Arn
      Timeout: 30 
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/snow_parser.zip"

  rComSnowParserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ["-", ["ComSnowParserLambda", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ComSnowParserLambda-${AWS::Region}:*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*rSqsParserQueue*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DXC/ServiceNow/DomainName"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DXC/ServiceNow/BusinessService"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DXC/Main/CustomerName"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DXC/ServiceNow/AWSAccountName"
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                Resource: [
                  !Join ["", ["arn:aws:lambda:*:", !Ref "AWS::AccountId", ":function:ComSnowSendLambda*" ] ]
                ]
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*rComSnowDLQ*"


  rComSnowSendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ComSnowSendLambda-${AWS::Region}"
      Environment:
        Variables:
          SECMGR_API_DET: !Ref pSecMgrAwsms
          DLQ_URL: !Ref rComSnowDLQ
      Description: 'Receives data from Parser Lambda and sends to ServiceNow via Agnostic API'
      Runtime: python3.11
      Handler: snow_send.lambda_handler
      MemorySize: 128
      Role: !GetAtt rComSnowSendLambdaRole.Arn
      Timeout: 450 
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/snow_send.zip"

  rComSnowSendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ["-", ["ComSnowSendLambda", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ComSnowSendLambda-${AWS::Region}:*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${pSecMgrAwsms}*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow*rComSnowDLQ*"

  rComSnowParserQueueAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when a Parser Queue message exists for 5 minutes without being consumed'
      AlarmName: 'ComSnowParserQueueAlarm'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rSqsParserQueue.QueueName
      MetricName: 'ApproximateAgeOfOldestMessage'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pParserQAlarmThrshld
      Period: !Ref pParserQAlarmPeriod
      EvaluationPeriods: !Ref pParserQAlarmEvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanThreshold'


  rComSnowDLQAgeAlarm1:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when a DLQ message exists for the indicated time without being consumed'
      AlarmName: 'ComSnowDLQAgeAlarm1'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateAgeOfOldestMessage'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqAgeAlarm1Thrshld
      Period: !Ref pDlqAgeAlarm1Period
      EvaluationPeriods: !Ref pDlqAgeAlarm1EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanThreshold'


  rComSnowDLQAgeAlarm2:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when a DLQ message exists for the indicated time without being consumed'
      AlarmName: 'ComSnowDLQAgeAlarm2'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateAgeOfOldestMessage'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqAgeAlarm2Thrshld
      Period: !Ref pDlqAgeAlarm2Period
      EvaluationPeriods: !Ref pDlqAgeAlarm2EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanThreshold'


  rComSnowDLQCountAlarm1:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when the number of  DLQ message exceed a threshold'
      AlarmName: 'ComSnowDLQCountAlarm1'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqCntAlarm1Thrshld
      Period: !Ref pDlqCntAlarm1Period
      EvaluationPeriods: !Ref pDlqCntAlarm1EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'

  rComSnowDLQCountAlarm2:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when the number of  DLQ message exceed a threshold'
      AlarmName: 'ComSnowDLQCountAlarm2'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqCntAlarm2Thrshld
      Period: !Ref pDlqCntAlarm2Period
      EvaluationPeriods: !Ref pDlqCntAlarm2EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'

  rComSnowDLQCountAlarm3:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when the number of  DLQ message exceed a threshold'
      AlarmName: 'ComSnowDLQCountAlarm3'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqCntAlarm3Thrshld
      Period: !Ref pDlqCntAlarm3Period
      EvaluationPeriods: !Ref pDlqCntAlarm3EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'

  rComSnowDLQCountAlarm4:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Send e-mail notification when the number of  DLQ message exceed a threshold'
      AlarmName: 'ComSnowDLQCountAlarm4'
      AlarmActions:
      - !Ref rComSnowEmailTopic
      Dimensions:
      - Name: 'QueueName'
        Value: !GetAtt rComSnowDLQ.QueueName
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Statistic: 'Maximum'
      Threshold: !Ref pDlqCntAlarm4Thrshld
      Period: !Ref pDlqCntAlarm4Period
      EvaluationPeriods: !Ref pDlqCntAlarm4EvalPeriod
      DatapointsToAlarm: 1
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'


  rComSnowParserLambdaSrcMap:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: True
      EventSourceArn: !GetAtt rSqsParserQueue.Arn
      FunctionName: !Ref rComSnowParserLambda

