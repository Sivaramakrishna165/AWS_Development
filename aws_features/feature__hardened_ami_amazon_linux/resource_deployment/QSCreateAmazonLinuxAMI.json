{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create Gold Amazon Linux AMI",
  "Parameters": {
    "pDXCS3BucketName": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/pDXCS3BucketName",
      "Description": "[DO NOT CHANGE] SSM Parameter for bucket location"
    },
    "pDXCS3AWSPEDownloadsBucket": {
      "Type": "String",
      "Default": "awspe-downloads",
      "Description": "awspe downloads bucket"
    },
    "pUnixSoeHardeningDoc": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/UnixSoeHardeningDoc/UnixSoeHardeningDocPath",
      "Description": "Unix SOE Hardening Document Name."
    },
    "pDXCServiceTier": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/pDXCServiceTier",
      "Description": "SSM Parameter for Platform Service Tier."
    },
    "pFeatureVersion": {
      "Type": "String",
      "Default": "None",
      "Description": "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
    },
    "pDXCS3KeyPrefix": {
      "Type": "String",
      "Default": "None",
      "Description": "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
    },
    "pAmisRetentionPeriod": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/AmisRetentionPeriod",
      "Description": "SSM Parameter for Length of Time to Retain Hardened Amis."
    }
  },
  "Mappings": {
    "OSServiceLevelMap": {
      "Gold": {
        "OSServiceLevel": "GOLD"
      }
    }
  },
  "Resources": {
    "rManagedInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ManagedInstancePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeImages",
                    "ec2:CreateTags"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {"Fn::Join": ["", ["arn:aws:s3:::","dxc.customer.config-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::","dxc.customer.config-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"},"/*"]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::",{"Ref": "pDXCS3AWSPEDownloadsBucket"}]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::",{"Ref": "pDXCS3AWSPEDownloadsBucket"},"/*"]]}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "rManagedInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "rManagedInstanceRole"
          }
        ]
      },
      "DependsOn": "rManagedInstanceRole"
    },
    "rAutomationServiceRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": "rManagedInstanceRole",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "passrole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": "rManagedInstanceRole.Arn"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "rGetAllSourceImage": {
      "Type": "Custom::rGetAllSourceImage",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": ["", ["arn:aws:lambda:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":function:getSourceImage"]]
        },
        "OSName": "amazon-linux",
        "BucketName": {
          "Ref": "pDXCS3BucketName"
        },
        "Region": {
          "Ref": "AWS::Region"
        }
      }
    },
    "rCreateAmazonLinuxAMIAutomation": {
      "Type": "AWS::SSM::Document",
      "DependsOn": [
        "rAutomationServiceRole",
        "rManagedInstanceProfile"
      ],
      "Properties": {
        "DocumentType": "Automation",
        "Content": {
          "schemaVersion": "0.3",
          "description": "Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sysman-ami-walkthrough.html",
          "assumeRole": { "Fn::GetAtt": "rAutomationServiceRole.Arn" },
          "parameters": {            
            "AvailableSourceAmiId": {
              "type": "String",
              "description": "These are the available AMI Id's for selected Region and OS. Please use these to fill up SourceAmiId.",
              "allowedValues": {
                "Fn::GetAtt": [
                  "rGetAllSourceImage",
                  "Image"
                ]
              }
            },
            "SourceAmiId": {
              "type": "String",
              "description": "(Required) Refer AvailableSourceAmiId section to get correct AMI Id for your OS.",
              "default": "<Enter-AMI-Id>"
            },
            "TargetAmiName": {
              "type": "String",
              "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.",
              "default": "QS-CoRE-AMAZON-LINUX2"
            },
            "InstanceType": {
              "type": "String",
              "description": "Type of instance to launch as the workspace host. Instance types vary by region.",
              "default": ""
            },
            "IncludePackages": {
              "type": "String",
              "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
              "default": "all"
            },
            "ExcludePackages": {
              "type": "String",
              "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
              "default": "none"
            },
            "CustomerBucket": {
              "type": "String",
              "default": { "Fn::Join": ["", ["dxc.customer.config-", { "Ref": "AWS::AccountId" }, "-", { "Ref": "AWS::Region" } ]] }
            },
            "OSName": {
              "type": "String",
              "default": "amazon-linux2",
              "allowedValues" : [ "amazon-linux2", "amazon-linux2023" ]
            },
            "AMIVersion": {
              "type": "String",
              "description": "Represents version of the AMI. Useful when there are multiple AMIs of an operating system in a region.",
              "default": "v1.0"
            },
            "Environment" : {
              "type" : "String",
              "description": "(Required) Represents AMI Environment. Allowed values are ['QA', 'Staging', 'Production']",
              "allowedValues" : [ "QA", "Staging", "Production" ]
            },
            "Encryption": {
              "allowedValues": [
                "true",
                "false"
              ],
              "default": "false",
              "description": "Set True for root volume encryption",
              "type": "String"
            },
            
            "OSArchitecture": {
              "type": "String",
              "default": "x86_64",
              "allowedValues" : [ "x86_64", "arm64" ]
            },
            "RetentionPeriod": {
              "type": "String",
              "default": { "Ref" : "pAmisRetentionPeriod" },
              "description": "Retention period of the Custom AMI"
            }
          },
          "mainSteps": [
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/SubnetId"
              },
              "name": "GetSubnetId",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "SubnetId",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/SecurityGroupId"
              },
              "name": "GetSecurityGroup",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "SecurityGroup",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/KeyPair"
              },
              "name": "GetKeyPair",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "KeyName",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "name": "launchInstance",
              "action": "aws:runInstances",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "KeyName": "{{GetKeyPair.KeyName}}",
                "ImageId": "{{SourceAmiId}}",
                "InstanceType": "{{InstanceType}}",
                "UserData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGdldF9jb250ZW50cygpIHsKICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4KICAgICAgICBjdXJsIC1zIC1mICIkMSIKICAgIGVsaWYgWyAteCAiJCh3aGljaCB3Z2V0KSIgXTsgdGhlbgogICAgICAgIHdnZXQgIiQxIiAtTyAtCiAgICBlbHNlCiAgICAgICAgZGllICJObyBkb3dubG9hZCB1dGlsaXR5IChjdXJsLCB3Z2V0KSIKICAgIGZpCn0KCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIgpyZWFkb25seSBUUlVFX1JFR0lPTj0kKGdldF9jb250ZW50cyAiJElERU5USVRZX1VSTCIgfCBhd2sgLUZcIiAnL3JlZ2lvbi8geyBwcmludCAkNCB9JykKcmVhZG9ubHkgREVGQVVMVF9SRUdJT049InVzLWVhc3QtMSIKcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059IgoKcmVhZG9ubHkgU0NSSVBUX05BTUU9ImF3cy1pbnN0YWxsLXNzbS1hZ2VudCIKIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5hbWF6b25hd3MuY29tL3NjcmlwdHMvJFNDUklQVF9OQU1FIgoKaWYgWyAiJFJFR0lPTiIgPSAiY24tbm9ydGgtMSIgXTsgdGhlbgogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24vc2NyaXB0cy8kU0NSSVBUX05BTUUiCmZpCgppZiBbICIkUkVHSU9OIiA9ICJ1cy1nb3Ytd2VzdC0xIiBdOyB0aGVuCiAgU0NSSVBUX1VSTD0iaHR0cHM6Ly9hd3Mtc3NtLWRvd25sb2Fkcy0kUkVHSU9OLnMzLXVzLWdvdi13ZXN0LTEuYW1hem9uYXdzLmNvbS9zY3JpcHRzLyRTQ1JJUFRfTkFNRSIKZmkKCmNkIC90bXAKRklMRV9TSVpFPTAKTUFYX1JFVFJZX0NPVU5UPTMKUkVUUllfQ09VTlQ9MAoKd2hpbGUgWyAkUkVUUllfQ09VTlQgLWx0ICRNQVhfUkVUUllfQ09VTlQgXSA7IGRvCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IERvd25sb2FkaW5nIHNjcmlwdCBmcm9tICRTQ1JJUFRfVVJMCiAgZ2V0X2NvbnRlbnRzICIkU0NSSVBUX1VSTCIgPiAiJFNDUklQVF9OQU1FIgogIEZJTEVfU0laRT0kKGR1IC1rIC90bXAvJFNDUklQVF9OQU1FIHwgY3V0IC1mMSkKICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmluaXNoZWQgZG93bmxvYWRpbmcgc2NyaXB0LCBzaXplOiAkRklMRV9TSVpFCiAgaWYgWyAkRklMRV9TSVpFIC1ndCAwIF07IHRoZW4KICAgIGJyZWFrCiAgZWxzZQogICAgaWYgW1sgJFJFVFJZX0NPVU5UIC1sdCBNQVhfUkVUUllfQ09VTlQgXV07IHRoZW4KICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOwogICAgICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmlsZVNpemUgaXMgMCwgcmV0cnlDb3VudDogJFJFVFJZX0NPVU5UCiAgICBmaQogIGZpIApkb25lCgppZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbgogIGNobW9kICt4ICIkU0NSSVBUX05BTUUiCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IFJ1bm5pbmcgVXBkYXRlU1NNQWdlbnQgc2NyaXB0IG5vdyAuLi4uCiAgLi8iJFNDUklQVF9OQU1FIiAtLXJlZ2lvbiAiJFJFR0lPTiIKZWxzZQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBVbmFibGUgdG8gZG93bmxvYWQgc2NyaXB0LCBxdWl0dGluZyAuLi4uCmZpCg==",
                "MinInstanceCount": 1,
                "MaxInstanceCount": 1,
                "BlockDeviceMappings": [
                  {
                    "DeviceName": "/dev/xvda",
                    "Ebs": {
                      "Encrypted": "{{Encryption}}"
                    }
                  }
                ],
                "IamInstanceProfileName": { "Ref": "rManagedInstanceProfile" },
                "SubnetId": "{{ GetSubnetId.SubnetId }}",
                "SecurityGroupIds": [
                  "{{ GetSecurityGroup.SecurityGroup }}"
                ]
              }
            },
            {
              "name": "updateOSSoftware",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "Parameters": {
                  "commands": [
                    "set -e",
                    "[ -x \"$(which wget)\" ] && get_contents='wget $1 -O -'",
                    "[ -x \"$(which curl)\" ] && get_contents='curl -s -f $1'",
                    "REGION={{global:REGION}}",
                    "echo $REGION",
                    "OSArchitecture={{OSArchitecture}}",
                    "echo $OSArchitecture",
                    "if [ $REGION = 'ap-northeast-3' ] || [ $REGION = 'eu-north-1' ]",
                    "then",
                    " if [ $OSArchitecture = 'x86_64' ]",
                    " then",
                    "   sudo yum update -y https://s3.{{global:REGION}}.amazonaws.com/amazon-ssm-{{global:REGION}}/latest/linux_amd64/amazon-ssm-agent.rpm",
                    " else",
                    "   sudo yum update -y https://s3.{{global:REGION}}.amazonaws.com/amazon-ssm-{{global:REGION}}/latest/linux_arm64/amazon-ssm-agent.rpm",
                    " fi",
                    "else", 
                    " eval $get_contents https://aws-ssm-downloads-{{global:REGION}}.s3.{{global:REGION}}.amazonaws.com/scripts/aws-update-linux-instance > /tmp/aws-update-linux-instance",
                    " chmod +x /tmp/aws-update-linux-instance",
                    " /tmp/aws-update-linux-instance --include-packages '{{IncludePackages}}' --exclude-packages '{{ExcludePackages}}' 2>&1 | tee /tmp/aws-update-linux-instance.log",
                    "fi"
                  ]
                },
                "OutputS3BucketName": "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/amazon-linux/updateOSSoftware-{{global:DATE_TIME}}"
              }
            },
            {
              "name": "installCloudWatchAgent",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "set -e",
                    "[ -x \"$(which wget)\" ] && get_contents='wget $1 -O -'",
                    "[ -x \"$(which curl)\" ] && get_contents='curl -s -f $1'",
                    "  export OSARCH=$(uname -m)",
                    "  echo \"OSARCH:$OSARCH\"",
                    "if [ \"$OSARCH\" == \"aarch64\" ]; then",
                    " eval $get_contents https://s3.amazonaws.com/amazoncloudwatch-agent/linux/arm64/latest/AmazonCloudWatchAgent.zip > /tmp/AmazonCloudWatchAgent.zip",
                    "elif [ \"$OSARCH\" == \"x86_64\" ]; then",
                    " eval $get_contents https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip > /tmp/AmazonCloudWatchAgent.zip",
                    "fi\n",
                    "cw_agent_dir='AmazonCloudWatchAgent'",
                    "if [ ! -d \"/tmp/$cw_agent_dir\" ]; then",
                    "  unzip -o /tmp/AmazonCloudWatchAgent.zip -d /tmp/$cw_agent_dir",
                    "  cd /tmp/$cw_agent_dir && bash install.sh",
                    "fi"
                  ]
                },
                "OutputS3BucketName" : "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/amazon-linux/installCloudWatchAgent-{{global:DATE_TIME}}"
              }
            },
            {
              "name": "installUnixSoeHardening",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": { "Ref" : "pUnixSoeHardeningDoc" },
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "Parameters": {
                },
                "OutputS3BucketName" : "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/amazon-linux/installUnixSoeHardening-{{ global:DATE_TIME }}"
              }
            },
            {
              "name": "ApplyPatches",
              "action": "aws:runCommand",
              "onFailure": "Abort",
              "timeoutSeconds": 7200,
              
              "maxAttempts": 3,
               "inputs": {
                  "Parameters": {
                     "Operation": "Install",
                     "RebootOption": "NoReboot"
                  },
                  "InstanceIds": [
                     "{{launchInstance.InstanceIds}}"
                  ],
                  "DocumentName": "AWS-RunPatchBaseline"
            }
            },
            {
              "name": "stopInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "stopped"
              }
            },
            {
              "name": "createImage",
              "action": "aws:createImage",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "InstanceId": "{{launchInstance.InstanceIds}}",
                "ImageName": "{{TargetAmiName}}-{{AMIVersion}}-{{global:DATE_TIME}}",
                "NoReboot": true,
                "ImageDescription": "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"
              }
            },
            {
              "name": "startInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "running"
              }
            },
            {
              "name": "findSnapshotForImage",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 300,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "#!/bin/bash \n",
                    "snapId=( $(aws ec2 describe-images --image-ids {{ createImage.ImageId }} --region {{global:REGION}} --output text --query 'Images[*].BlockDeviceMappings[*].Ebs.SnapshotId') )",
                    "echo -n $snapId"
                  ]
                }
              }
            },
            {
              "name": "deleteOnTagValue",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 300,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "#!/bin/bash \n",
                    "deleteontag=$(date -d '+{{RetentionPeriod}} days' '+%Y-%m-%d')",
                    "echo -n $deleteontag"
                  ]
                }
              }
            },
            {
              "name": "tagSnapshot",
              "action": "aws:createTags",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "ResourceType": "EC2",
                "ResourceIds": [
                  "{{ findSnapshotForImage.Output }}"
                ],
                "Tags": [
                  {
                    "Key": "Application",
                    "Value": ""
                  },
                  {
                    "Key": "Compliance",
                    "Value": ""
                  },
                  {
                    "Key": "DeleteOn",
                    "Value": "{{deleteOnTagValue.Output}}"
                  },
                  {
                    "Key": "Environment",
                    "Value": ""
                  },
                  {
                    "Key": "InstanceName",
                    "Value": ""
                  },
                  {
                    "Key": "MountPoint",
                    "Value": ""
                  },
                  {
                    "Key": "Name",
                    "Value": "AMI: {{ createImage.ImageId }}"
                  },
                  {
                    "Key": "encrypted",
                    "Value": "{{Encryption}}"
                  },
                  {
                    "Key": "Owner",
                    "Value": ""
                  },
                  {
                    "Key": "Project",
                    "Value": ""
                  },
                  {
                    "Key": "VolumeName",
                    "Value": ""
                  }
                ]
              }
            },
            {
              "name": "tagImage",
              "action": "aws:createTags",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "ResourceType": "EC2",
                "ResourceIds": [
                  "{{ createImage.ImageId }}"
                ],
                "Tags": [
                  {
                    "Key": "Original_AMI_ID",
                    "Value": "Created from {{ SourceAmiId }}"
                  },
                  
                  {
                    "Key": "os",
                    "Value": "{{OSName}}"
                  },
                  {
                    "Key": "version",
                    "Value": "{{AMIVersion}}"
                  },
                  {
                    "Key": "osservicelevel",
                    "Value": { "Fn::FindInMap" : [ "OSServiceLevelMap", { "Ref" : "pDXCServiceTier" }, "OSServiceLevel"]}
                  },
                  {
                    "Key": "encrypted",
                    "Value": "{{Encryption}}"
                  },
                  {
                    "Key" : "Environment",
                    "Value" : "{{Environment}}"
                  },
                  {
                    "Key" : "osarchitecture",
                    "Value" : "{{OSArchitecture}}"
                  },
                  {
                    "Key": "DeleteOn",
                    "Value": "{{deleteOnTagValue.Output}}"
                  }
                ]
              }
            },
            {
              "name": "terminateInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "onFailure": "Continue",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "terminated"
              }
            }
          ],
          "outputs": [
            "createImage.ImageId"
          ]
        }
      }
    }
  }
}
