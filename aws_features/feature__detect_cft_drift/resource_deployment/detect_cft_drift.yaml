---
AWSTemplateFormatVersion: 2010-09-09
Description: 'A regional template which Detect the drifts on the Cloudformations available in the region and raise a incident is service-now'
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/DetectCftDrift/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
  pDriftDetectCWFrequency:
    Description: '[Required] Keep 1 days. The schedule (Rate) to trigger Detect CFT Drift (Change only if required)'
    Type: String
    Default: 'rate(1 day)'
    AllowedValues: ['rate(1 day)', 'rate(3 days)', rate(7 days), rate(15 days), 'rate(30 days)']
  pDetectDriftIncidentsPriority:
    Description: '[DO NOT CHANGE] Priority of the Drift Incidents in ServiceNow'
    Type: String
    Default: '3'
    AllowedValues: ['1','2','3','4','5']
  pNotifyEmail:
    Description: '[Leave blank if notification not required] Email ID to recieve the drifted cfts information.'
    Type: String
    Default: 'user@example.com'
  pWhiteListCFTs:
    Description: 'Provide the CF StackNames to ignore drift detection.(with comma seperated) eg: testtemplate1, testtemplate2'
    Type: String
    Default: ''
  pWhiteListResources:
    Description: 'Provide the PhysicalResourceIds to ignore drift detection.(with comma seperated) eg: testresource1, testresource2'
    Type: String
    Default: ''
  pComSnowInputTopic:
    Description: 'ssm parameter for servicenow sns topic' 
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/SES/Module/CommonServicenow/ComSnowStdInputArn"

Conditions:
  cEmailExists: !Not [!Equals [!Ref pNotifyEmail, ""]]
  cWhiteListCFTs: !Not [!Equals [!Ref pWhiteListCFTs, ""]]
  cWhiteListResources: !Not [!Equals [!Ref pWhiteListResources, ""]]

Resources:
  rWhiteListCFTsSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureDetectCftDrift/WhiteListCFTs
      Description: "Whitelisted stack names to be ignored for CFT drift check"
      Type: "String"
      Value: !If [cWhiteListCFTs, !Ref pWhiteListCFTs, "AWSMS-NoValue"]
  
  rWhiteListResourcesSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /DXC/FeatureDetectCftDrift/WhiteListResources
      Description: "Whitelisted Resource IDs to be ignored for CFT drift check"
      Type: "String"
      Value: !If [cWhiteListResources, !Ref pWhiteListResources, "AWSMS-NoValue"]
  
  rDetectDriftTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: 'DetectDriftTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublish"
            Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rDetectDriftTopic
      Topics:
        - !Ref rDetectDriftTopic

  rDetectDriftTopic:
    Type: AWS::SNS::Topic
    Condition: cEmailExists
    Properties:
      TopicName: !Join ["-",["DetectCftDriftsAlerts",!Ref "AWS::AccountId",!Ref "AWS::Region"]]
      Subscription:
        - Endpoint: !Ref pNotifyEmail
          Protocol: email
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub rDetectDriftTopic
      - Key: Owner
        Value: DXC

  rDxcmsExecDetectStackDriftEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AWSMS-DetectStackDrifts
      Description: 'Event that triggers detect-cft-drift lambda to Execute DetectStackDrifts in the region'
      ScheduleExpression: !Sub '${pDriftDetectCWFrequency}'
      State: ENABLED
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "rDxcmsDetectCftDriftsLambda"
              - "Arn"
          Id: "DetectStackDrift"
          Input: "{\"RequestType\": \"DetectStackDrift\"}"
    
  rDxcmsViewStackDriftEventsRule:
      Type: AWS::Events::Rule
      Properties:
        Name: AWSMS-ViewStackDrifts
        Description: 'Event that triggers detect-cft-drift lambda to view stack drifts in the region'
        ScheduleExpression: 'rate(15 minutes)'
        State: DISABLED
        Targets:
          -
            Arn:
              Fn::GetAtt:
                - "rDxcmsDetectCftDriftsLambda"
                - "Arn"
            Id: "ViewStackDrift"
            Input: "{\"RequestType\": \"ViewStackDrift\"}"

  rDxcmsDetectStackDriftLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rDxcmsDetectCftDriftsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rDxcmsExecDetectStackDriftEventsRule"
          - "Arn"
  
  rDxcmsViewStackDriftsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rDxcmsDetectCftDriftsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rDxcmsViewStackDriftEventsRule"
          - "Arn"

  rDxcmsDetectCftDriftsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsDetectCftDriftsLambdaRole
      - Key: Owner
        Value: DXC
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: !Join ["-", ["DxcmsDetectCftDriftsPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudformation:DetectStackDrift
                  - sns:Publish
                  - events:DisableRule
                  - events:EnableRule
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-detect-cft-drifts-${AWS::Region}:*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:FeatureCommonServicenowStack-Servicenow-*"
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:DetectCftDriftsAlerts-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/AWSMS-ViewStackDrifts"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AccountFeatureDefinitions"
                  
  rDxcmsDetectCftDriftsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "dxcms-detect-cft-drifts-${AWS::Region}"
      Environment:
        Variables:
          STACK_REGION: !Sub '${AWS::Region}'
          EXECUTION_ACCOUNT: !Sub '${AWS::AccountId}'
          SSMParamWhiteListCft: !Ref rWhiteListCFTsSSMParameter
          SSMParamWhiteListResources: !Ref rWhiteListResourcesSSMParameter
          DetectDriftTopic: !If [cEmailExists, !Ref rDetectDriftTopic, "AWSMS-NoValue"]
          ViewStackDriftRule: "AWSMS-ViewStackDrifts"
          servicenow_topic: !Ref pComSnowInputTopic
      Description: 'Lambda to process ALL deployed cfts & detect the drifted resources, and create a ServiceNow incident'
      Runtime: python3.11
      Handler: dxcms_detect_cft_drift.lambda_handler
      MemorySize: 128
      Role: !GetAtt rDxcmsDetectCftDriftsLambdaRole.Arn
      Timeout: 900
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/detect_cft_drift.zip"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub "dxcms_detect_cft_drift-${AWS::Region}"
      - Key: Owner
        Value: DXC
