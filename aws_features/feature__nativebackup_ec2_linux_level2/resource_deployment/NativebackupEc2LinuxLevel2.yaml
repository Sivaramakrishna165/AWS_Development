---
AWSTemplateFormatVersion: 2010-09-09

Description: DXC Managed Services - AWS Native BackUp for EC2 Linux Instances(Level 2)

Parameters:

  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"

  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"

  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/NativebackupEc2LinuxLevel2/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"

  pPlatformVersion:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/Main/pPlatformVersion
    Description: "[DO NOT CHANGE] SSM Parameter for platform version"
  
  pfCreateNewBackupVault:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Create new Backup Vault for Ec2 Backup."

  pfBackupVaultName:
    Type: String
    Description: "Enter the Backup Vault Name to be create for Ec2"
    Default: 'Ec2LinuxLevel2BackUpVault'

  pfEc2BackupScheduleExpression:
    Type: String
    Default: "cron(15 12 * * ? *)"
    Description: "AWS Backup cron expression."

  pfBackupDeleteAfterDays:
    Type: Number
    Default: 30
    Description: "Days to expire backups from vault."

  pfBackupConditionTagKey:
    Type: String
    Default: "LinuxNativeBackupLevel"
    Description: "Tag:Key associated with the resources to back up."

  pfBackupConditionTagValue:
    Type: String
    Default: "2"
    Description: "Tag:Value associated with the resources to back up."

  pfVaultMinRetentionDays:
    Type: String
    Default: 30
    Description: "Retention period in days that the vault retains backup data and it should be lesser than or equals to pfBackupDeleteAfterDays."

  # pfVaultMaxRetentionDays:
  #   Type: String
  #   #Default: 30
  #   Default: "dummy"
  #   Description: "The maximum retention period that the vault retains its recovery points.
  #                 Note: Leave it default if you don't need this"

  # pfVaultChangeableForDays:
  #   Type: String
  #   Default: "dummy"
  #   Description: "[WARNING] Number of days before the vault lock. After this period, Vault Lock becomes immutable and cannot be changed or deleted.
  #                 NOTE: If this value is mentioned then, LockConfiguration will be Compliance mode otherwise Governance mode.
  #                 Should be minimum 3 or greater"
  
  pSnsTopicName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/Backups/NativeBackupSnsTopic
    Description: Sns topic name for the failed job notifications.

Conditions:

  cCreateNewBackupVault: !Equals [!Ref pfCreateNewBackupVault, "true"]
  cDontCreateNewBackupVault: !Equals [!Ref pfCreateNewBackupVault, "false"]
  # All these will be used in future
  #cComplianceMode: !Not [!Equals [!Ref pfVaultChangeableForDays, "dummy"]]
  #cGovernanceMode: !Equals [!Ref pfVaultChangeableForDays, ""]
  #cVaultMinRetNotDeclared: !Equals [!Ref pfVaultMinRetentionDays, "dummy"]
  #cVaultMaxRetNotDeclared: !Equals [!Ref pfVaultMaxRetentionDays, "dummy"]
  #cVaultLockRequired: !And [!Not [!Equals [!Ref pfVaultMinRetentionDays, ""]] , !Not [!Equals [!Ref pfVaultChangeableForDays, ""]]]

Resources:

  rEc2BkUpIamRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "backup.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
      Description: "Allows AWS Backup to access AWS resources on your behalf to Backup and Restore."
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      Path: /
      RoleName: !Join ["-", ["EC2LinuxLevel2NativeBackup", !Ref "AWS::Region"]]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rEc2BkUpIamRole"
      - Key: Owner
        Value: 'DXC'
      - Key: Purpose
        Value: "Ec2LinuxLevel2Backup"       

  rEc2BackupVault:
    Type: AWS::Backup::BackupVault
    DeletionPolicy: Retain
    Condition: cCreateNewBackupVault
    Properties:
      #AccessPolicy: Json
      BackupVaultName: !Ref pfBackupVaultName
      LockConfiguration:
      #for now we will go with GOVERNANCE mode ONLY
        #ChangeableForDays:  !If [cComplianceMode, !Ref pfVaultChangeableForDays, !Ref "AWS::NoValue"]
        MinRetentionDays: !Ref pfVaultMinRetentionDays
        #MaxRetentionDays: !If [cVaultMaxRetNotDeclared, !Ref "AWS::NoValue", !Ref pfVaultMaxRetentionDays]
      #Notifications: NotificationObjectTyp
      BackupVaultTags:
        "Owner" : "DXC"
      Notifications:
        BackupVaultEvents: 
          - BACKUP_JOB_FAILED
          - BACKUP_JOB_EXPIRED 
        SNSTopicArn: !Ref pSnsTopicName
  
  rDxcmsListLinuxLevel2BackupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsListLinuxLevel2BackupLambdaRole
      - Key: Owner
        Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["DxcmsListLinuxLevel2BackupPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dxcms-list-linux-level2-backup-${AWS::Region}:*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - sts:GetCallerIdentity
                Resource: 
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - backup:StartBackupJob
                  - states:StartExecution
                Resource: 
                  - !GetAtt rEc2BkUpIamRole.Arn
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:${pfBackupVaultName}"
                  - !GetAtt rDxcmsLinuxLevel2BackupSFN.Arn

  
  rDxcmsListLinuxLevel2BackupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "dxcms-list-linux-level2-backup-${AWS::Region}"
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !GetAtt rDxcmsLinuxLevel2BackupSFN.Arn
          IAM_ROLE_ARN: !GetAtt rEc2BkUpIamRole.Arn
          BACKUP_VAULT_NAME: !Ref pfBackupVaultName
          TAG_KEY: !Ref pfBackupConditionTagKey
          TAG_VALUE: !Ref pfBackupConditionTagValue
          RETENTION_PERIOD: !Ref pfBackupDeleteAfterDays
      Description: 'Lambda to List all the linux level 2 backup instance and trigger backup'
      Runtime: python3.11
      Handler: dxcms_list_linux_level2_backup.lambda_handler
      MemorySize: 128
      Role: !GetAtt rDxcmsListLinuxLevel2BackupLambdaRole.Arn
      Timeout: 900
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/dxcms_list_linux_level2_backup.zip"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        Value: DXC

  
  rDxcmsLinuxLevel2BackupEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AWSMS-TakeLinuxLevel2Backup
      Description: 'Event that triggers  lambda for level 2 backup'
      ScheduleExpression: !Ref pfEc2BackupScheduleExpression
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "rDxcmsListLinuxLevel2BackupLambda"
              - "Arn"
          Id: "ListLinuxInstances"


  rDxcmsLinuxLevel2BackupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "rDxcmsListLinuxLevel2BackupLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "rDxcmsLinuxLevel2BackupEventsRule"
          - "Arn"

  rDxcmsLinuxLevel2BackupSFNRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsLinuxLevel2BackupSFNRole
      - Key: Owner
        Value: DXC
      Policies:
        - PolicyName: !Join ["-", ["DxcmsLinuxLevel2BackupsfnPerms", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - backup:DescribeBackupJob
                  - ssm:GetCommandInvocation
                Resource: 
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - backup:StartBackupJob
                  - ssm:SendCommand
                  - sns:publish
                Resource: 
                  - !GetAtt rEc2BkUpIamRole.Arn
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:${pfBackupVaultName}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${rDxcmsLinuxUnfreezeFSDocument}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${rDxcmsLinuxFreezeFSDocument}"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:managed-instance/*"
                  - !Ref pSnsTopicName
                  ###

  rDxcmsLinuxLevel2BackupSFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'dxcms_Linux_Level2_Backup'
      DefinitionS3Location:
        Bucket: !Ref pDXCS3BucketName
        Key: !Sub '${pDXCS3KeyPrefix}/dxcms_linux_level2_backup/dxcms_linux_level2_backup.json'
      DefinitionSubstitutions:
        Instance_fs_freeze_doc: !Ref rDxcmsLinuxFreezeFSDocument
        Topic_arn: !Ref pSnsTopicName
        Backup_vault_name: !Ref pfBackupVaultName
        Iam_role_backup_job: !GetAtt rEc2BkUpIamRole.Arn
        Instance_fs_unfreeze_doc: !Ref rDxcmsLinuxUnfreezeFSDocument

      RoleArn: !GetAtt  rDxcmsLinuxLevel2BackupSFNRole.Arn
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: rDxcmsLinuxLevel2BackupSFN
      - Key: Owner
        Value: DXC   

  rDxcmsLinuxFreezeFSDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Freezes the linux instance file system.
        mainSteps:
          - action: "aws:runShellScript"
            name: runShellScriptFreezeFS
            inputs:
              runCommand: [
                  "#!/bin/bash",
                  "EXIT_STATUS=0",
                  "FILESYSTEM_CONSISTENT='true'",
                  "NUM_FROZEN=0",
                  "NUM_THAWED=0",
                  "sync",
                  "if [ $? -ne 0 ];",
                  "then FILESYSTEM_CONSISTENT=false echo Error syncing the filesystem. We will still try to freeze the filesystem.",
                  "else echo Sync complete.",
                  "fi",
                  "for target in $(findmnt -nlo TARGET -t ext3,ext4)",
                  "do if [ ! $target == \"/\" ];",
                  "then fsfreeze -f $target",
                  "if [ $? -ne 0 ];",
                  "then FILESYSTEM_CONSISTENT=false; echo Could not freeze filesystem $target.",
                  "else let 'NUM_FROZEN+=1'; echo Froze filesystem $target.",
                  "fi",
                  "fi",
                  "echo $NUM_FROZEN",
                  "done"
              ]
      DocumentType: Command
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsLinuxFreezeFSDocument"
      - Key: Owner
        Value: DXC

  rDxcmsLinuxUnfreezeFSDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Unfreezes the linux instance file system.
        parameters:
          Freezedvolumes:
            description: "Freezed volume count"
            type: "String"      
        mainSteps:
          - action: "aws:runShellScript"
            name: runShellScriptUnfreezeFS
            inputs:
              runCommand: [
                "#!/bin/bash",
                "EXIT_STATUS=0",
                "FILESYSTEM_CONSISTENT='true'",
                "NUM_FROZEN={{Freezedvolumes}}",
                "NUM_THAWED=0",
                "for target in $(findmnt -nlo TARGET -t ext3,ext4);",
                "do if [ ! $target == \"/\" ];",
                "then fsfreeze -u $target;",
                "if [ $? -ne 0 ];",
                "then echo Could not thaw filesystem $target",
                "else let 'NUM_THAWED+=1';echo Thawed filesystem $target;",
                "fi",
                "fi",
                "done",
                "if [ $NUM_THAWED -ne $NUM_FROZEN ];",
                "then EXIT_STATUS=1; fi",
                "echo EXIT_STATUS $EXIT_STATUS",
                "exit $EXIT_STATUS",
                  
              ]
      DocumentType: Command
      TargetType: "/AWS::EC2::Instance"
      Tags:
      - Key: Application  
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: "rDxcmsLinuxUnfreezeFSDocument"
      - Key: Owner
        Value: DXC

   