{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates Ubuntu AMI",
  "Parameters": {
    "pDXCS3BucketName": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/pDXCS3BucketName",
      "Description": "[DO NOT CHANGE] SSM Parameter for bucket location"
    },
    "pDXCS3AWSPEDownloadsBucket": {
      "Type": "String",
      "Default": "awspe-downloads",
      "Description": "awspe downloads bucket"
    },
    "pUnixSoeHardeningDoc": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/UnixSoeHardeningDoc/UnixSoeHardeningDocPath",
      "Description": "Unix SOE Hardening Document Name."
    },
    "pDXCServiceTier": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/pDXCServiceTier",
      "Description": "SSM Parameter for Platform Service Tier."
    },
    "pFeatureVersion": {
      "Type": "String",
      "Default": "None",
      "Description": "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
    },
    "pDXCS3KeyPrefix": {
      "Type": "String",
      "Default": "None",
      "Description": "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
    },
    "pAmisRetentionPeriod": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/DXC/Main/AmisRetentionPeriod",
      "Description": "SSM Parameter for Length of Time to Retain Hardened Amis."
    }
  },
  "Mappings": {
    "OSServiceLevelMap": {
      "Gold": {
        "OSServiceLevel" : "GOLD"
      }
      
    }
  },
  "Resources": {
    "rManagedInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ec2TagImage",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeImages",
                    "ec2:DescribeTags",
                    "ec2:CreateTags"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {"Fn::Join": ["", ["arn:aws:s3:::","dxc.customer.config-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::","dxc.customer.config-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"},"/*"]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::",{"Ref": "pDXCS3AWSPEDownloadsBucket"}]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::",{"Ref": "pDXCS3AWSPEDownloadsBucket"},"/*"]]}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "rManagedInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "rManagedInstanceRole"
          }
        ]
      },
      "DependsOn": "rManagedInstanceRole"
    },
    "rAutomationServiceRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": "rManagedInstanceRole",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "passrole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": "rManagedInstanceRole.Arn"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "rGetSourceImage": {
      "Type": "Custom::rGetSourceImage",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": ["", ["arn:aws:lambda:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":function:getSourceImage"]]
        },
        "OSName": "ubuntu18.04",
        "BucketName": {
          "Ref": "pDXCS3BucketName"
        },
        "Region": {
          "Ref": "AWS::Region"
        }
      }
    },
    "rGetAllSourceImage": {
      "Type": "Custom::rGetSourceImage",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": ["", ["arn:aws:lambda:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":function:getSourceImage"]]
        },
        "OSName": "ubuntu",
        "BucketName": {
          "Ref": "pDXCS3BucketName"
        },
        "Region": {
          "Ref":"AWS::Region"
        }
      }
    },
    "rCreateUbuntuAMIAutomation": {
      "Type": "AWS::SSM::Document",
      "DependsOn": [
        "rAutomationServiceRole",
        "rManagedInstanceProfile"
      ],
      "Properties": {
        "DocumentType": "Automation",
        "Content": {
          "schemaVersion": "0.3",
          "description": "Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sysman-ami-walkthrough.html",
          "assumeRole": {
            "Fn::GetAtt": "rAutomationServiceRole.Arn"
          },
          "parameters": {
            "AvailableSourceAmiId": {
              "type": "String",
              "description": "These are the available AMI Id's for selected Region and OS. Please use these to fill up SourceAmiId.",
              "allowedValues": {
                "Fn::GetAtt": [
                  "rGetAllSourceImage",
                  "Image"
                ]
              }
            },
            "SourceAmiId": {
              "type": "String",
              "description": "(REQUIRED) Refer AvailableSourceAmiId section to get correct AMI Id for your OS.",
              "default": "<Enter-AMI-Id>"
            },
            "TargetAmiName": {
              "type": "String",
              "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including 'QS-CoRE-Ubuntu', and the creation time and date.",
              "default": "QS-CoRE-Ubuntu"
            },
            "InstanceType": {
              "type": "String",
              "description": "(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t2.large.",
              "default": "t2.large"
            },
            "IncludePackages": {
              "type": "String",
              "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
              "default": "all"
            },
            "ExcludePackages": {
              "type": "String",
              "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
              "default": "none"
            },
            "OSName": {
              "type": "String",
              "allowedValues": ["ubuntu18.04","ubuntu20.04","ubuntu22.04"]
            },
            "AMIVersion": {
              "type": "String",
              "description": "Represents version of the AMI. Useful when there are multiple AMIs of an operating system in a region.",
              "default": "v1.0"
            },
            "Environment" : {
              "type" : "String",
              "description": "(Required) Represents AMI Environment. Allowed values are ['QA', 'Staging', 'Production']",
              "allowedValues" : [ "QA", "Staging", "Production" ]
            },
            "Encryption": {
              "allowedValues": [
                "true",
                "false"
              ],
              "default": "false",
              "description": "Set True for root volume encryption",
              "type": "String"
            },
            "CustomerBucket": {
              "type": "String",
              "description": "Bucket name where runCommand outputs are saved. By default they are saved in customer config bucket.",
              "default": {
                "Fn::Join": ["", ["dxc.customer.config-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}]]
              }
            },
            "RetentionPeriod": {
              "type": "String",
              "default": { "Ref" : "pAmisRetentionPeriod" },
              "description": "Retention period of the Custom AMI"
            }
            
          },
          "mainSteps": [
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/SubnetId"
              },
              "name": "GetSubnetId",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "SubnetId",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/SecurityGroupId"
              },
              "name": "GetSecurityGroup",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "SecurityGroup",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "maxAttempts": 3,
              "inputs": {
                "Service": "ssm",
                "Api": "get_parameter",
                "Name": "/DXC/Hardening/KeyPair"
              },
              "name": "GetKeyPair",
              "action": "aws:executeAwsApi",
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "outputs": [
                {
                  "Name": "KeyName",
                  "Selector": "$.Parameter.Value",
                  "Type": "String"
                }
              ]
            },
            {
              "name": "launchInstance",
              "action": "aws:runInstances",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "KeyName": "{{ GetKeyPair.KeyName }}",
                "ImageId": "{{SourceAmiId}}",
                "InstanceType": "{{InstanceType}}",
                "UserData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGdldF9jb250ZW50cygpIHsKICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4KICAgICAgICBjdXJsIC1zIC1mICIkMSIKICAgIGVsaWYgWyAteCAiJCh3aGljaCB3Z2V0KSIgXTsgdGhlbgogICAgICAgIHdnZXQgIiQxIiAtTyAtCiAgICBlbHNlCiAgICAgICAgZGllICJObyBkb3dubG9hZCB1dGlsaXR5IChjdXJsLCB3Z2V0KSIKICAgIGZpCn0KCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIgpyZWFkb25seSBUUlVFX1JFR0lPTj0kKGdldF9jb250ZW50cyAiJElERU5USVRZX1VSTCIgfCBhd2sgLUZcIiAnL3JlZ2lvbi8geyBwcmludCAkNCB9JykKcmVhZG9ubHkgREVGQVVMVF9SRUdJT049InVzLWVhc3QtMSIKcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059IgoKcmVhZG9ubHkgU0NSSVBUX05BTUU9ImF3cy1pbnN0YWxsLXNzbS1hZ2VudCIKIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5hbWF6b25hd3MuY29tL3NjcmlwdHMvJFNDUklQVF9OQU1FIgoKaWYgWyAiJFJFR0lPTiIgPSAiY24tbm9ydGgtMSIgXTsgdGhlbgogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24vc2NyaXB0cy8kU0NSSVBUX05BTUUiCmZpCgppZiBbICIkUkVHSU9OIiA9ICJ1cy1nb3Ytd2VzdC0xIiBdOyB0aGVuCiAgU0NSSVBUX1VSTD0iaHR0cHM6Ly9hd3Mtc3NtLWRvd25sb2Fkcy0kUkVHSU9OLnMzLXVzLWdvdi13ZXN0LTEuYW1hem9uYXdzLmNvbS9zY3JpcHRzLyRTQ1JJUFRfTkFNRSIKZmkKCiMgSW5zdGFsbCBkZXBlbmRlbmNpZXMKeXVtIGluc3RhbGwgLXkgdW56aXAKY3VybCAiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2F3cy1jbGkvYXdzY2xpLWJ1bmRsZS56aXAiIC1vICIvdG1wL2F3c2NsaS1idW5kbGUuemlwIgp1bnppcCAvdG1wL2F3c2NsaS1idW5kbGUuemlwIC1kIC90bXAvCi90bXAvYXdzY2xpLWJ1bmRsZS9pbnN0YWxsIC1iIC91c3IvYmluL2F3cwoKIyBHZXQgdGhlIG1ham9yIHZlcmlvbiBudW1iZXIKIyBJZiB0aGlzIGlzIFJIRUw2IGluc3RhbGwgcHl0aG9uMi43ClJIRUxfTUFKT1JfVkVTSU9OPSQoc2VkIC1yZSAncy8uezQwfS8vO3MvLnsxM30kLy8nIC9ldGMvcmVkaGF0LXJlbGVhc2UpCgppZiBbWyAkUkhFTF9NQUpPUl9WRVNJT04gPT0gNiogXV07IHRoZW4KICB5dW0gaW5zdGFsbCAteSBnY2Mgb3BlbnNzbC1kZXZlbCBiemlwMi1kZXZlbAogIHl1bSB1cGRhdGUgLXkgY3VybCBuc3MKICBjZCAvdXNyL3NyYwogIHdnZXQgaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9mdHAvcHl0aG9uLzIuNy4xNi9QeXRob24tMi43LjE2LnRnegogIHRhciAtenh2ZiBQeXRob24tMi43LjE2LnRnegogIGNkIFB5dGhvbi0yLjcuMTYKICAuL2NvbmZpZ3VyZSAtLWVuYWJsZS1vcHRpbWl6YXRpb25zCiAgbWFrZSBhbHRpbnN0YWxsCiAgY3VybCAiaHR0cHM6Ly9ib290c3RyYXAucHlwYS5pby9nZXQtcGlwLnB5ICIgLW8gImdldC1waXAucHkiCiAgL3Vzci9sb2NhbC9iaW4vcHl0aG9uMi43IGdldC1waXAucHkKICAvdXNyL2xvY2FsL2Jpbi9waXAgaW5zdGFsbCBhd3NjbGkKICBleHBvcnQgUEFUSD0kUEFUSDovdXNyL2xvY2FsL2JpbgpmaQpjZCAvdG1wCkZJTEVfU0laRT0wCk1BWF9SRVRSWV9DT1VOVD0zClJFVFJZX0NPVU5UPTAKCndoaWxlIFsgJFJFVFJZX0NPVU5UIC1sdCAkTUFYX1JFVFJZX0NPVU5UIF0gOyBkbwogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBEb3dubG9hZGluZyBzY3JpcHQgZnJvbSAkU0NSSVBUX1VSTAogIGdldF9jb250ZW50cyAiJFNDUklQVF9VUkwiID4gIiRTQ1JJUFRfTkFNRSIKICBGSUxFX1NJWkU9JChkdSAtayAvdG1wLyRTQ1JJUFRfTkFNRSB8IGN1dCAtZjEpCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbmlzaGVkIGRvd25sb2FkaW5nIHNjcmlwdCwgc2l6ZTogJEZJTEVfU0laRQogIGlmIFsgJEZJTEVfU0laRSAtZ3QgMCBdOyB0aGVuCiAgICBicmVhawogIGVsc2UKICAgIGlmIFtbICRSRVRSWV9DT1VOVCAtbHQgTUFYX1JFVFJZX0NPVU5UIF1dOyB0aGVuCiAgICAgIFJFVFJZX0NPVU5UPSQoKFJFVFJZX0NPVU5UKzEpKTsKICAgICAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbGVTaXplIGlzIDAsIHJldHJ5Q291bnQ6ICRSRVRSWV9DT1VOVAogICAgZmkKICBmaQpkb25lCgppZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbgogIGNobW9kICt4ICIkU0NSSVBUX05BTUUiCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IFJ1bm5pbmcgVXBkYXRlU1NNQWdlbnQgc2NyaXB0IG5vdyAuLi4uCiAgLi8iJFNDUklQVF9OQU1FIiAtLXJlZ2lvbiAiJFJFR0lPTiIKZWxzZQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBVbmFibGUgdG8gZG93bmxvYWQgc2NyaXB0LCBxdWl0dGluZyAuLi4uCmZpCg",
                "MinInstanceCount": 1,
                "MaxInstanceCount": 1,
                "BlockDeviceMappings": [
                  {
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                      "Encrypted": "{{Encryption}}"
                    }
                  }
                ],
                "IamInstanceProfileName": {
                  "Ref": "rManagedInstanceProfile"
                },
                "SubnetId": "{{ GetSubnetId.SubnetId }}",
                "SecurityGroupIds": [
                  "{{ GetSecurityGroup.SecurityGroup }}"
                ]
              }
            },
            {
              "name": "updateSoftwareToSupportLinuxPatching",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "OutputS3BucketName": "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/ubuntu/updateSoftwareToSupportLinuxPatching-{{global:DATE_TIME}}",
                "Parameters": {
                  "commands": [
                    "#!/bin/bash \n",
                    "sudo -i",
                    "mkdir /awspe",
                    "  if snap list|grep amazon-ssm-agent; then \n",
                    "    echo \"ssm alreday installed\" \n",
                    "  elif cat /var/log/dpkg.log|grep amazon-ssm-agent; then \n",
                    "    echo \"ssm alreday installed\" \n",
                    "  else \n",
                    "    if [ -d /awspe/ssm ]; then \n",
                    "       echo \"Directory ssm alreday exist\" \n",
                    "    else \n",
                    "      mkdir /awspe/ssm \n",
                    "      cd /awspe/ssm \n",
                    "      wget https://s3.{{global:REGION}}.amazonaws.com/amazon-ssm-{{global:REGION}}/latest/debian_amd64/amazon-ssm-agent.deb \n",
                    "      dpkg -i amazon-ssm-agent.deb\n",
                    "      systemctl enable amazon-ssm-agent\n",
                    "    fi\n",
                    "  fi"
                  ]
                }
              }
            },
            {
              "name": "installCloudWatchAgent",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "set -e",
                    "sudo -i",
                    "[ -x \"$(which wget)\" ] && get_contents='wget $1 -O -'",
                    "[ -x \"$(which curl)\" ] && get_contents='curl -s -f $1'",
                    "if [ ! -d /awspe/cwagent ]; then",
                    "   mkdir -p /awspe/cwagent",
                    "   chmod 777 /awspe/cwagent",
                    "   echo \"directory created\"",
                    "   echo $?",
                    "fi",
                    "eval $get_contents https://s3.{{global:REGION}}.amazonaws.com/amazoncloudwatch-agent-{{global:REGION}}/debian/amd64/latest/amazon-cloudwatch-agent.deb  > /awspe/cwagent/amazon-cloudwatch-agent.deb",
                    "  cd /awspe/cwagent",
                    "dpkg -i -E ./amazon-cloudwatch-agent.deb"
                  ]
                },
                "OutputS3BucketName" : "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/ubuntu/installCloudWatchAgent-{{global:DATE_TIME}}"
              }
            },
            {
              "name": "installAWSCLIV2",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "#!/bin/bash -xe\n",
                    "sudo -i",
                    "  apt-get install -y -q python3",
                    "  apt-get install -y -q unzip",
                    "  if [ ! -d /awspe/awscliv2 ]; then",
                    "    mkdir -p /awspe/awscliv2",
                    "    chmod 777 /awspe/awscliv2",
                    "    echo \"directory created\"",
                    "    echo $?",
                    "    cd /awspe/awscliv2",
                    "    echo $?",
                    "    echo \"directory changed to awscliv2\"",
                    "    echo $?",
                    "    curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" >> /awspe/awscliv2/awscliv2.log",
                    "    echo $?",
                    "    echo \"download completed\"",
                    "    echo $?",
                    "    unzip -o -q awscliv2.zip >> /awspe/awscliv2/awscliv2.log",
                    "    echo $?",
                    "    echo \"unzip completed\"",
                    "    echo $?",
                    "    sudo ./aws/install --update >> /awspe/awscliv2/awscliv2.log",
                    "    echo $?",
                    "    echo \"AWSCLIV2 Installed\"",
                    "    echo $?",
                    "    ln -s /usr/local/bin/aws /usr/bin/aws",
                    "  fi"
                  ]
                },
                "OutputS3BucketName" : "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/ubuntu/installAWSCLIV2-{{global:DATE_TIME}}"
              }
            },
            {
              "name": "installUnixSoeHardening",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": {
                  "Ref": "pUnixSoeHardeningDoc"
                },
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {},
                "OutputS3BucketName": "{{CustomerBucket}}",
                "OutputS3KeyPrefix": "ami-creation/ubuntu/installUnixSoeHardening-{{global:DATE_TIME}}"
              }
            },
            {
              "name": "ApplyPatches",
              "action": "aws:runCommand",
              "onFailure": "Abort",
              "timeoutSeconds": 7200,
              
              "maxAttempts": 3,
               "inputs": {
                  "Parameters": {
                     "Operation": "Install",
                     "RebootOption": "NoReboot"
                  },
                  "InstanceIds": [
                     "{{launchInstance.InstanceIds}}"
                  ],
                  "DocumentName": "AWS-RunPatchBaseline"
              }
            },
            {
              "name": "stopInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "stopped"
              }
            },
            {
              "name": "createImage",
              "action": "aws:createImage",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "InstanceId": "{{launchInstance.InstanceIds}}",
                "ImageName": "{{ TargetAmiName }}-{{AMIVersion}}-{{ global:DATE_TIME }}",
                "NoReboot": true,
                "ImageDescription": "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"
              }
            },
            {
              "name": "startInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "running"
              }
            },
            {
              "name": "findSnapshotForImage",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 300,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{ launchInstance.InstanceIds }}"
                ],
                "Parameters": {
                  "commands": [
                    "#!/bin/bash \n",
                    "snapId=( $(aws ec2 describe-images --image-ids {{ createImage.ImageId }} --region {{global:REGION}} --output text --query 'Images[*].BlockDeviceMappings[*].Ebs.SnapshotId') )",
                    "echo -n $snapId"
                  ]
                }
              }
            },
            {
              "name":"deleteOnTagValue",
              "action":"aws:runCommand",
              "maxAttempts":3,
              "timeoutSeconds":3600,
              "onFailure": "Abort",
              "inputs":{
                "DocumentName":"AWS-RunShellScript",
                "InstanceIds":[
                  "{{launchInstance.InstanceIds}}"
                ],
                "Parameters":{
                  "commands":[
                    "#!/bin/bash \n",
                    "deleteontag=$(date -d '+{{RetentionPeriod}} days' '+%Y-%m-%d')",
                    "echo -n $deleteontag"
                  ]}
                }
            },
            {
              "name": "tagSnapshot",
              "action": "aws:createTags",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "ResourceType": "EC2",
                "ResourceIds": [
                  "{{ findSnapshotForImage.Output }}"
                ],
                "Tags": [
                  {
                    "Key": "Application",
                    "Value": ""
                  },
                  {
                    "Key": "Compliance",
                    "Value": ""
                  },
                  {
                    "Key": "DeleteOn",
                    "Value": "{{deleteOnTagValue.Output}}"
                  },
                  {
                    "Key": "Environment",
                    "Value": ""
                  },
                  {
                    "Key": "InstanceName",
                    "Value": ""
                  },
                  {
                    "Key": "MountPoint",
                    "Value": ""
                  },
                  {
                    "Key": "encrypted",
                    "Value": "{{Encryption}}"
                  },
                  {
                    "Key": "Name",
                    "Value": "AMI: {{ createImage.ImageId }}"
                  },
                  {
                    "Key": "Owner",
                    "Value": ""
                  },
                  {
                    "Key": "Project",
                    "Value": ""
                  },
                  {
                    "Key": "VolumeName",
                    "Value": ""
                  }
                ]
              }
            },
            {
              "name": "tagImage",
              "action": "aws:createTags",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "ResourceType": "EC2",
                "ResourceIds": [
                  "{{ createImage.ImageId }}"
                ],
                "Tags": [
                  {
                    "Key": "Original_AMI_ID",
                    "Value": "Created from {{ SourceAmiId }}"
                  },
                  
                  {
                    "Key": "os",
                    "Value": "{{OSName}}"
                  },
                  {
                    "Key": "version",
                    "Value": "{{AMIVersion}}"
                  },
                  {
                    "Key": "osservicelevel",
                    "Value": { "Fn::FindInMap" : [ "OSServiceLevelMap", { "Ref" : "pDXCServiceTier" }, "OSServiceLevel"]}
                  },
                  {
                    "Key": "encrypted",
                    "Value": "{{Encryption}}"
                  },
                  {
                    "Key" : "Environment",
                    "Value" : "{{Environment}}"
                  },
                  {
                    "Key": "DeleteOn",
                    "Value": "{{deleteOnTagValue.Output}}"
                  }
                ]
              }
            },
            {
              "name": "terminateInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "onFailure": "Continue",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "terminated"
              }
            }
          ],
          "outputs": [
            "createImage.ImageId"
          ]
        }
      }
    }
  }
}