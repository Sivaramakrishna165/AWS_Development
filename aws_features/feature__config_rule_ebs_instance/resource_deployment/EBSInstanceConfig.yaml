---
AWSTemplateFormatVersion: '2010-09-09'
Description: "CF Template to create AWS Config rule which checks (by default)
  whether completed instances have the following tags (with values). It also Checks
  the Backp and Patch Group values if these services are slected in SILVERPLUS.
  in a customer account:
    - Application
    - Name
    - Environment
    - Owner
    - Project
    - Compliance
    - InstanceName
  The instanceRequiredTags parameter can accept other tags - if desired.
  If additional debugging is required, there is a TracingFlag parameter
  that can be set to enable AWS X-Ray tracing."
Parameters:
  TracingFlag:
    Description: "Flag to enable AWS X-Ray tracing (set to Active)
      for debugging. Default setting is PassThrough."
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/CloudWatch/TracingFlag"
  pDXCS3KeyPrefix:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  pFeatureVersion:
      Type: String
      Default: 'None'
      Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
   
  InstanceRequiredTags:
    Description: "Required tags on an EC2 instance that should
      be present for compliance"
    Type: CommaDelimitedList
    Default: "Application, Name, Environment, Owner, Project, Compliance, InstanceName"
  DXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/ConfigRuleEBSInstance/S3AssetBucket
    Description: "[DO NOT CHANGE] SSM Parameter for bucket location"
  pFtEbsInstInstanceIdListToSkip:
    Type: String
    Default: "Blank"
    Description: "List of instances to be skipped from compliance check.For multiple instances use comma separation."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Location of DXC Managed Services Assets:"
        Parameters:
          - DXCS3BucketName
    ParameterLabels:
      DXCS3BucketName:
        default: "S3 Bucket Name:"

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "LambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSubnets
                Effect: Allow
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "arn:aws:s3:::*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::*/AWSLogs/*/Config/*"
              - Effect: Allow
                Action:
                  - "config:Put*"
                  - "config:Get*"
                  - "config:List*"
                  - "config:Describe*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: "*"                
  ConfigPermissionToCallLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - InstanceTagsComplianceCheck
          - Arn
      Action: "lambda:InvokeFunction"
      Principal: "config.amazonaws.com"
  InstanceTagsComplianceCheck:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function that evaluates if completed
        instances contain defined flags for compliance"
      Code:
        S3Bucket: !Ref DXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/config_rule_ebs_instance_tags.zip"
      Handler: "index.lambda_handler"
      Runtime: python3.11
      Timeout: 300
      MemorySize: 384
      TracingConfig:
        Mode: !Ref TracingFlag
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tags:
        -
          Key: "Purpose"
          Value: "Custom Lambda for AWS Config Rule -
            ec2-instances-required-tags"
        -
          Key: "Owner"
          Value: "DXC"
  AWSConfigRule:
    Type: "AWS::Config::ConfigRule"
    Properties:
      Description: Checks whether EC2 instances have required tags.
      InputParameters:
        instanceRequiredTags: !Ref InstanceRequiredTags
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: "CUSTOM_LAMBDA"
        SourceDetails:
          -
            EventSource: "aws.config"
            MessageType: "ConfigurationItemChangeNotification"
        SourceIdentifier:
          Fn::GetAtt:
            - InstanceTagsComplianceCheck
            - Arn
    DependsOn: ConfigPermissionToCallLambda
