"""
    The main purpose of this script is to process 
    all the CSV files that are generated by the 
    low level scripts using YAML configuration file.
    Input Example: {"S3_Bucket":"bucket-for-testing-221", "S3_directory_name":"feature_aws_health_checks/"}
"""

import yaml
import csv
from csv import writer
# import operator
import re
import os
import boto3
import json
import sys
from datetime import datetime
from botocore.config import Config



config=Config(retries=dict(max_attempts=10,mode='standard'))

uniqueID = ""
# table_name = "AWS_HealthCheck"
table_name = os.environ['table_name']

# Global Variable
column_name = ''
condition = ''
threshold = ''
exclusion_instance_dict = {}
unreachable_instance_dict = {}
failed_instance_dict = {}
dynamodb_hc_list = []

s3 = boto3.resource('s3', config=config)


'''
    This function will return the Line 
    number and the error that occured.
'''
def PrintException():
    exc_type, exc_obj, tb = sys.exc_info()
    f = tb.tb_frame
    lineno = tb.tb_lineno
    captureErr = "Line No. : " + str(lineno)  + " | ERROR: " + str(exc_obj)
    return captureErr


'''
    This function is adding one more column to the 
    CSV it is reading and calling the yaml_processing_handler 
    function to determine the status and store it into the result 
    column.
'''
def csv_process(bucket_name, key, local_file_uri):

    print("csv_process called")
    bucket = s3.Bucket(bucket_name)
    hc_list = []
    try:
        for object in bucket.objects.filter(Prefix=key+'aws_health_check_output/'):
            rows = []
            print("",object.key)
            if(object.key).endswith('.csv'):
                print("Object Key: ",object.key)
                filename = (object.key).split("/")[-1]
                print("OS Flavour:", filename)
                os_flavour = (filename.split('-')[0]).replace("_", " ")
                print("File Name: ", os_flavour)
                health_Check_name = (filename.split('-')[1]).replace(".csv", "")
                print("Health_Check_Name: ", health_Check_name)
        
                error_flag = yaml_file_reader(bucket_name, f'{key}aws_health_check_low_level_scripts/', os_flavour, health_Check_name)

                if not error_flag:
                    hc_list.append((f"{os_flavour}-{health_Check_name}").replace(" ", "_"))
                    get_unreachable_instance(f"{os_flavour}-{health_Check_name}")
                    s3_object = s3.Object(bucket_name, object.key)
                    
                    data = s3_object.get()['Body'].read().decode('utf-8').splitlines()
                    fields = csv.reader(data)
        
                    headers = next(fields)
                    headers.append('Result')
                    custom_list = ["" for i in range(len(headers)-1)]
        
                    try:
                        index = headers.index(column_name)
                        instance_id_index = headers.index("Instance_ID")
                        # print (headers)
                    except:
                        print(PrintException())
                        print(object.key)
                    else:
                        #print(f'{unreachable_instance_dict=}')
                        #print(f'{exclusion_instance_dict=}')
                        for row in fields:
                            if row[instance_id_index] in list(exclusion_instance_dict):
                                if exclusion_instance_dict[row[instance_id_index]]:
                                    continue
                                custom_list[instance_id_index] = row[instance_id_index]
                                row = custom_list.copy()
                                row.append("EXCLUDED")
                                rows.append(row)
                                exclusion_instance_dict[row[instance_id_index]] = True

                            elif row[instance_id_index] in list(unreachable_instance_dict):
                                # custom_list[instance_id_index] = row[instance_id_index]
                                # custom_list.append("UNREACHABLE")
                                # rows.append(custom_list)
                                result = yaml_processing_handler(row[index])
                                row.append(result)
                                rows.append(row)
                                unreachable_instance_dict[row[instance_id_index]] = True

                            elif row[instance_id_index] in list(failed_instance_dict):
                                result = yaml_processing_handler(row[index])
                                row.append(result)
                                rows.append(row)
                                failed_instance_dict[row[instance_id_index]] = True

                            else:
                                result = yaml_processing_handler(row[index])
                                row.append(result)
                                rows.append(row)
                        #print(f'{unreachable_instance_dict=}')
                        #print(f'{exclusion_instance_dict=}')

                        for excluded_instance in exclusion_instance_dict:
                            if exclusion_instance_dict[excluded_instance]:
                                continue
                            print(excluded_instance)
                            custom_list[instance_id_index] = excluded_instance
                            row = custom_list.copy()
                            row.append("EXCLUDED")
                            rows.append(row)
                            exclusion_instance_dict[excluded_instance] = True
                        
                        for unreachable_instance in unreachable_instance_dict:
                            if unreachable_instance_dict[unreachable_instance]:
                                continue
                            if exclusion_instance_dict.get(unreachable_instance):
                                continue
                            custom_list[instance_id_index] = unreachable_instance
                            row = custom_list.copy()
                            row.append("UNREACHABLE")
                            rows.append(row)
                            unreachable_instance_dict[unreachable_instance] = True
                        
                        for failed_instance in failed_instance_dict:
                            if failed_instance_dict[failed_instance]:
                                continue
                            custom_list[instance_id_index] = failed_instance
                            row = custom_list.copy()
                            row.append("FAILED_TO_EXECUTE")
                            rows.append(row)
                            failed_instance_dict[failed_instance] = True
                        
                        create_data_processed_report(local_file_uri + filename, headers, rows)
                        upload_status_report(local_file_uri + filename, bucket_name, key+ 'aws_health_check_processed_data_output/'+ filename)
                else:
                    print("Health Check not found")
                    print("Health Check Name:", health_Check_name)

        for dynamodb_hc in dynamodb_hc_list:
            rows = []
            headers = ["Instance_ID", "Result"]
            Os_flavour = dynamodb_hc.split('-')[0].replace("_", " ")
            Health_Check_name = dynamodb_hc.split('-')[1].replace(".csv", "")
            if not(dynamodb_hc in hc_list):
                error_flag = yaml_file_reader(bucket_name, f'{key}aws_health_check_low_level_scripts/', Os_flavour, Health_Check_name)
                if not error_flag:
                    for excluded_instance in exclusion_instance_dict:
                        if exclusion_instance_dict[excluded_instance]:
                            continue
                        #print(excluded_instance)
                        rows.append([excluded_instance, "EXCLUDED"])
                        exclusion_instance_dict[excluded_instance] = True

                get_unreachable_instance(dynamodb_hc)
                for unreachable_instance in unreachable_instance_dict:
                    if unreachable_instance_dict[unreachable_instance]:
                        continue
                    if exclusion_instance_dict.get(unreachable_instance):
                        continue
                    
                    rows.append([unreachable_instance, "UNREACHABLE"])
                    unreachable_instance_dict[unreachable_instance] = True
                
                for failed_instance in failed_instance_dict:
                    if failed_instance_dict[failed_instance]:
                        continue
                    
                    rows.append([failed_instance, "FAILED_TO_EXECUTE"])
                    failed_instance_dict[failed_instance] = True
                
                if rows:
                    create_data_processed_report(local_file_uri + dynamodb_hc, headers, rows)
                    upload_status_report(local_file_uri + dynamodb_hc, bucket_name, key+ 'aws_health_check_processed_data_output/'+ dynamodb_hc+".csv")
                    print(f'{dynamodb_hc=}')

    except:
        exception = PrintException()
        print(exception)


'''
    This function is reading the YAML Configuration 
    file from the S3 bucket and initializing the values 
    to the global variables.
'''
def yaml_file_reader(bucket_name, key, os_flavour, health_Check_name):

    global column_name, condition, threshold, exclusion_instance_dict
    print("yaml_file_reader called")
    exclusion_instance_dict = {}
    error_flag = True
    yml_name = f"{key}{os_flavour}/health_check_config_{os_flavour}.yml"
    try:
        response = boto3.client('s3', config=config).get_object(Bucket=bucket_name, Key= yml_name)
        data = yaml.safe_load(response["Body"])
        # print(data)

        for DORM_Health_Checks in data['DORM_Health_Checks']:
            if (DORM_Health_Checks['DORM_Check_Name'] in [None,'NA'] or DORM_Health_Checks['Check_Id'] in [None,'NA']):
                    put_data(f"{os_flavour} Config YAML", "Reading YAML Health Checks", "DORM_Check_Name or Check_Id not available", "")
                    continue
            for Sub_Check in DORM_Health_Checks['Sub_Checks']:

                if health_Check_name == Sub_Check['Name']:
                    column_name = Sub_Check['Column_Name']
                    condition = Sub_Check['Condition']
                    threshold = Sub_Check['Threshold']
                    exclusion_list = [] if Sub_Check['Exclusion_List'] in [None,'NA'] else Sub_Check['Exclusion_List'].replace(" ", "").split(",")
                    for item in exclusion_list:
                        exclusion_instance_dict[item] = False
                    error_flag = False

                    return error_flag
    except:
        exception = PrintException()
        print(exception)
        print("================================")
        print("Unable to read YAML Config File")
        print("Uri Used: "+yml_name)
        print("================================")
        put_data("S3 Bucket", f"Reading YAML Config File", f"Failed to Read YAML Config File. Config File Key: {yml_name}", exception)
    return error_flag


def get_unreachable_instance(key_name):
    print("get_unreachable_instance called")
    global unreachable_instance_dict, failed_instance_dict
    unreachable_instance_dict = {}
    failed_instance_dict = {}
    key_name = key_name.replace(" ", "_")
    dynamodb = boto3.resource('dynamodb',config=config)
    table = dynamodb.Table(table_name)
    response = table.get_item(TableName=table_name, Key={'AWS_HealthCheck_UUI':uniqueID})
    for item in response['Item']['health_checks'][key_name]:
        if item['TaskName'] == 'Validating Instance':
            unreachable_instance_dict[item['ResourceName'].replace(" ", "").split(":")[1]] = False

        elif item['TaskName'] == 'Performing Health Check':
            failed_instance_dict[item['ResourceName'].replace(" ", "").split(":")[1]] = False
            # print(item['ResourceName'].replace(" ", "").split(":")[1])
    # print(response['Item']['health_checks'][key_name])


def get_hc_list():
    print("get_hc_list called")
    dynamodb = boto3.resource('dynamodb',config=config)
    table = dynamodb.Table(table_name)
    response = table.get_item(TableName=table_name, Key={'AWS_HealthCheck_UUI':uniqueID})
    for hc_name in response['Item']['health_checks']:
        # print(hc_name)
        dynamodb_hc_list.append(hc_name)


'''
    This function takes the value and compares it 
    with the given condition (Global variable) and 
    returns the result weather it is PASS or FAIL.
'''
def yaml_processing_handler(value):

    if condition=="eq":
        result = 'PASS' if (str(value) == str(threshold)) else 'FAIL'

    elif condition=="le":
        try:
            result = 'PASS' if (float(value) <= float(threshold)) else 'FAIL'
        except:
            result = "Invalid Operands"

    elif condition=="ge":
        try:
            result = 'PASS' if (float(value) >= float(threshold)) else 'FAIL'
        except:
            result = "Invalid Operands"

    elif condition=="ne":
        result = 'PASS' if (str(value) != str(threshold)) else 'FAIL'

    elif condition=="gt":
        try:
            result = 'PASS' if (float(value) > float(threshold)) else 'FAIL'
        except:
            result = "Invalid Operands"

    elif condition=="lt":
        try:
            result = 'PASS' if (float(value) < float(threshold)) else 'FAIL'
        except:
            result = "Invalid Operands"

    elif condition=="nomatch":
       result = 'PASS' if re.match("(?!{})".format(threshold),str(value)) else 'FAIL'

    elif condition=="match":
       result = 'PASS' if re.match("{}".format(threshold),str(value)) else 'FAIL'
    
    else:
        result = "condition not found" 

    return result



'''
    This function takes file uri, fields and rows that needs 
    to be added and then creates the CSV file for it.
'''
def create_data_processed_report(file_name, fields, rows):
    print("create_data_processed_report Called")
    try:
        with open(file_name, 'w', newline='') as csvfile: 
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            csvwriter.writerows(rows)
    except:
        exception = PrintException()
        print(exception)
        put_data(f"HealthCheck file: {file_name}", "Creating HealthCheck file", "Failed to Create Processed HealthCheck file", exception)
        print("================================")
        print("Unable to write in a File: "+file_name+'.csv')
        print("================================")


'''
    This function upload the given file uri to 
    the S3 bucket and at particular key location provided.
'''
def upload_status_report(file_uri, bucket_name, key):

    print("upload_status_report Called")
    try:
        s3 = boto3.resource('s3', config=config)
        s3.meta.client.upload_file(file_uri, bucket_name, key)
        print("File Saved at: ", key)
    except:
            exception = PrintException()
            print(exception)
            put_data(f"Processed HealthCheck file: {file_uri}", "Uploading HealthCheck file", "Failed to Upload HealthCheck file", exception)
            print("================================")
            print("Unable to upload CSV File:"+ file_uri)
            print("Uri Used: "+key)
            print("================================")


def put_data(ResourceName, TaskName, Result, Exception):
    
    print("put_data called")
    # global hc_issue_count
    #issue_count = issue_count + 1
    now = datetime.now()
    key_name = os.environ['AWS_LAMBDA_FUNCTION_NAME']
    dynamodb_resource = boto3.resource('dynamodb',config=config)
    table = dynamodb_resource.Table(table_name)
    
    try:  
        table.update_item(
        Key={
            'AWS_HealthCheck_UUI': uniqueID},
        UpdateExpression= f'SET {key_name} = list_append({key_name}, :obj)',
        ExpressionAttributeValues={
            ":obj": [
                    {
                        'ResourceName': ResourceName,
                        'TaskName': TaskName,
                        'Result': Result,
                        'Exception': Exception,
                        'Timestamp': now.strftime("%d/%m/%Y %H:%M:%S")
                    }
                ]}
        )
    except:
        print(PrintException())
        print("Error during table.update_item")


def hc_get_data(key_name):
    print("hc_get_data called")
    try:
        dynamodb = boto3.resource('dynamodb',config=config)
        table = dynamodb.Table(table_name)
        response = table.get_item(TableName=table_name, Key={'AWS_HealthCheck_UUI':uniqueID})
        if key_name not in response['Item']:
            print(f"Unable to find {key_name} key")
            hc_put_key(key_name)
    except:
        print(PrintException())


def hc_put_key(hc_name):

    print("hc_put_key called")
    dynamodb_resource = boto3.resource('dynamodb',config=config)
    table = dynamodb_resource.Table(table_name)
    try:
        response = table.update_item(
        Key={
            'AWS_HealthCheck_UUI': uniqueID},
            UpdateExpression=f'SET {hc_name} = :obj',
            ExpressionAttributeValues={":obj": []}
            )
    except:
        print(PrintException())
        print("Error during table.put_item")


def token(event, task_token):

    sf = boto3.client('stepfunctions')
    sf_output = json.dumps(event)
    # task_token = event['token']

    sf_response = sf.send_task_success(
        taskToken=task_token,
        output=str(sf_output)
    )

    return sf_response


def lambda_handler(event, context):
    # TODO implement  
    print("Received Event: ", event)
    try:
        global uniqueID
        task_token = event['token']
        event = event["Payload"]
        uniqueID = event["uniqueID"]
        hc_get_data(os.environ['AWS_LAMBDA_FUNCTION_NAME'])

        get_hc_list()
        # local_file_uri = R"C:\Users\akushwaha25\OneDrive - DXC Production\Desktop\\"
        local_file_uri = "/tmp/"
        csv_process(event['S3_Bucket'], event['S3_directory_name']+ "aws_server_health_check/", local_file_uri)
    except:
        exception = PrintException()
        print(exception)
        put_data("", "", "Something went wrong", exception)
        print("================================")
        print("Error Occurred.")
        print("================================")

    #return event
    return token(event, task_token)



if __name__ == "__main__":
    event1 = {
  "uniqueID": "healthCheckJobId_37bdbaac-407e-11ed-9606-77b420fae44b",
  "S3_Bucket": "dxc.338395754338.ap-southeast-1.health-checks",
  "S3_directory_name": "feature_aws_health_checks/"
  }
    # event1 = {"S3_Bucket":"bucket-for-testing-221", "S3_directory_name":"feature_aws_health_checks/"}   
    lambda_handler(event1, "")