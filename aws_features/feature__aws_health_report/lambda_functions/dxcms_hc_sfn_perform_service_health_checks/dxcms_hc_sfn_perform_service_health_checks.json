{
    "Comment": "This Step Function will Perform the Service Health Checks on the AWS services.",
    "StartAt": "generate_service_report",
    "States": {
      "generate_service_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_service_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 300,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_service_report_error"
          }
        ],
        "Next": "Wait"
      },
      "generate_service_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_service_report Function"
        },
        "Next": "Notify_Failure"
      },
      "Wait": {
        "Type": "Wait",
        "Seconds": 300,
        "Next": "generate_unused_eips_report"
      },
      "generate_unused_eips_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_unused_eips_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_unused_eips_report_error"
          }
        ],
        "Next": "generate_unused_volume_report"
      },
      "generate_unused_eips_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_unused_eips_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_unused_volume_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_unused_volume_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_unused_volume_report_error"
          }
        ],
        "Next": "generate_snapshot_count_report"
      },
      "generate_unused_volume_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_unused_volume_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_snapshot_count_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_snapshot_count_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_snapshot_count_report_error"
          }
        ],
        "Next": "snapshot_deleteOn_tag_report"
      },
      "generate_snapshot_count_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "snapshot_count_report Function"
        },
        "Next": "Notify_Failure"
      },
      "snapshot_deleteOn_tag_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${snapshot_deleteOn_tag_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "snapshot_deleteOn_tag_report_error"
          }
        ],
        "Next": "generate_backup_available_report"
      },
      "snapshot_deleteOn_tag_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "snapshot_deleteOn_tag_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_backup_available_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_backup_available_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_backup_available_report_error"
          }
        ],
        "Next": "generate_cost_spike_report"
      },
      "generate_backup_available_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_backup_available_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_cost_spike_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_cost_spike_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_cost_spike_report_error"
          }
        ],
        "Next": "generate_rds_capacity_report"
      },
      "generate_cost_spike_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_cost_spike_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_rds_capacity_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_rds_capacity_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_rds_capacity_report_error"
          }
        ],
        "Next": "generate_snow_communication_report"
      },
      "generate_rds_capacity_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_rds_capacity_report Function"
        },
        "Next": "Notify_Failure"
      },
      "generate_snow_communication_report": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${generate_snow_communication_report}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "generate_snow_communication_report_error"
          }
        ],
        "Next": "service_hc_data_processing"
      },
      "generate_snow_communication_report_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "generate_snow_communication_report Function"
        },
        "Next": "Notify_Failure"
      },
      "service_hc_data_processing": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${service_hc_data_processing}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "service_hc_data_processing_error"
          }
        ],
        "Next": "service_hc_result"
      },
      "service_hc_data_processing_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "service_hc_data_processing Function"
        },
        "Next": "Notify_Failure"
      },
      "service_hc_result": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${service_hc_result}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 1
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "service_hc_result_error"
          }
        ],
        "End": true
      },
      "service_hc_result_error": {
        "Type": "Pass",
        "Parameters": {
          "Cause.$": "$.Cause",
          "State.$": "$$.State",
          "ErrorMessageFrom": "service_hc_result Function"
        },
        "Next": "Notify_Failure"
      },
      "Notify_Failure": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sns:publish",
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "IntervalSeconds": 3,
            "MaxAttempts": 1,
            "BackoffRate": 1.5
          }
        ],
        "Parameters": {
          "Message.$": "$",
          "TopicArn": "${Notify_Failure}"
        },
        "End": true
      }
    }
  }