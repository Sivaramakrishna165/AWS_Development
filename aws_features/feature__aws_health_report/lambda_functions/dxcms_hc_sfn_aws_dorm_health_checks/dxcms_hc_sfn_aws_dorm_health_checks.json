{
  "Comment": "Master flow for AWS Dorm Health Checks.",
  "StartAt": "generate_server_report",
  "States": {
    "generate_server_report": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${generate_server_report}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "generate_server_report_error"
        }
      ],
      "Next": "Wait"
    },
    "generate_server_report_error": {
      "Type": "Pass",
      "Parameters": {
        "Cause.$": "$.Cause",
        "State.$": "$$.State",
        "ErrorMessageFrom": "generate_server_report Function"
      },
      "Next": "Notify_Failure"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "generate_unique_name_for_health_check_SFN"
    },
    "generate_unique_name_for_health_check_SFN": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${generate_unique_name_for_health_check_SFN}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "generate_unique_name_for_health_check_SFN_error"
        }
      ],
      "Next": "Call_SFN_to_perform_health_check"
    },
    "generate_unique_name_for_health_check_SFN_error": {
      "Type": "Pass",
      "Parameters": {
        "Cause.$": "$.Cause",
        "State.$": "$$.State",
        "ErrorMessageFrom": "generate_unique_name_for_health_check_SFN Function"
      },
      "Next": "Notify_Failure"
    },
    "Call_SFN_to_perform_health_check": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${Call_SFN_to_perform_health_check}",
        "Name.$": "$.SubSFName",
        "Input": {
          "S3_Bucket.$": "$.S3_Bucket",
          "S3_directory_name.$": "$.S3_directory_name",
          "uniqueID.$":"$.uniqueID"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "Call_SFN_to_perform_health_check_error"
        }
      ],
      "ResultPath": "$.Output",
      "Next": "put_processing_output"
    },
    "Call_SFN_to_perform_health_check_error": {
      "Type": "Pass",
      "Parameters": {
        "Cause.$": "$.Cause",
        "State.$": "$$.State",
        "ErrorMessageFrom": "Call_SFN_to_perform_health_check"
      },
      "Next": "Notify_Failure"
    },
    "put_processing_output": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${put_processing_output}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "put_processing_output_error"
        }
      ],
      "Next": "send_data_to_cloudops_s3"
    },
    "put_processing_output_error": {
      "Type": "Pass",
      "Parameters": {
        "Cause.$": "$.Cause",
        "State.$": "$$.State",
        "ErrorMessageFrom": "put_processing_output Function"
      },
      "Next": "Notify_Failure"
    },    
    "send_data_to_cloudops_s3": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${send_data_to_cloudops_s3}",
        "Payload": {
          "Payload.$": "$",
          "token.$": "$$.Task.Token"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "IntervalSeconds": 3,
          "BackoffRate": 2,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.Runtime",
            "States.TaskFailed",
            "States.Permissions",
            "States.Timeout",
            "Lambda.Unknown"
          ],
          "Next": "send_data_to_cloudops_s3_error"
        }
      ],
      "End": true
    },
    "send_data_to_cloudops_s3_error": {
      "Type": "Pass",
      "Parameters": {
        "Cause.$": "$.Cause",
        "State.$": "$$.State",
        "ErrorMessageFrom": "send_data_to_cloudops_s3 Function"
      },
      "Next": "Notify_Failure"
    },   
    "Notify_Failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 3,
          "MaxAttempts": 1,
          "BackoffRate": 1.5
        }
      ],
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${Notify_Failure}"
      },
      "End": true
    }
  }
}