AWSTemplateFormatVersion: 2010-09-09
Description: "This stack checks the OS CIS Compliance for all the Instances having Tag:Compliance"
Parameters:
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/OsCisComplianceCheck/S3AssetBucket
    Description: SSM Parameter for bucket location
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
  
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack" 

  pNotifyEmail:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /DXC/Notification/DXCNotifyEmail
    Description: "Email address for getting Notifications of OS non-Compliance Instances"

  pDXCAWSMSSnowTopicUrl:    
    Default: 'DXC-AWSMS-Offerings-SecretKeys'
    Description: 'Secrets Manager entry to use for service now (sending notifications via snow)'
    Type : String

  pLogGroupName:
    Type: String
    Default: /DXC/Instance-OS-CIS
    Description: "[Required] to update logs InstanceCISLogs to CloudwatchLog"

  pLogStreamOSCISCompliance:
    Type: String
    Default: OS-CIS-Compliance
    Description: "[Required] to update logs in InstanceCISCompliance stream for CloudwatchLog"

  pLogStreamOSCISnonCompliance:
    Type: String
    Default: OS-CIS-nonCompliance 
    Description: "[Required] to update logs in LogStreamnonCompliance stream for CloudwatchLog"

  pInstanceOSCISUpdateFrequency: 
    AllowedValues:
      - "rate(30 days)"
      - "rate(15 days)"
      - "rate(7 days)"
    Default: "rate(30 days)"
    Description: "[Required] The schedule (Rate) to trigger rInstanceOSCISComplianceLambda"
    Type: String

  pS3BucketForOSCISCompliance:
    Type: String
    Default: "dxc.customer.oscis.compliance-"    
    Description: "[DO NOT CHANGE] S3 bucket for uploading the corecm logs for oscis compliance instances"  

Conditions: 
  cCreateTopic: !Or
    - !Not [!Equals [!Ref pDXCAWSMSSnowTopicUrl, ""]]
    - !Not [!Equals [!Ref pNotifyEmail, ""]]
  cSnowURLexists: !Not [!Equals [!Ref pDXCAWSMSSnowTopicUrl, ""]]
  cEmailExists: !Not [!Equals [!Ref pNotifyEmail, ""]]

Resources:
  rOSCISComplianceLinuxDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Check OS CIS Compliance for Linux instances.'                   
        mainSteps:
        - action: aws:runShellScript
          name: runCommands
          precondition:
            StringEquals:
            - platformType
            - Linux
          inputs:
            timeoutSeconds: '300'
            runCommand:
            - "if [ -d /var/opt/soe/local/harden ]; then\n"
            - "export dirtime=`date '+%m%d%Y_%H%M%S'`\n"
            - "export dirdate=`date '+%m-%d-%Y'`\n"
            - "echo \"Current date:\" $dirtime\n"
            - "cd /var/opt/soe/local/harden\n"
            - "sudo chmod 777 /var/opt/soe/local/harden/data\n"
            - "TOKEN=`curl -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 600'`\n"
            - "INSTANCEID=`curl -H 'X-aws-ec2-metadata-token: '$TOKEN -v 'http://169.254.169.254/latest/meta-data/instance-id'`\n"
            - "bucketaccount=$(aws sts get-caller-identity --query 'Account' --output text)\n"
            - "echo \"bucketaccount:\"$bucketaccount\n"
            - "bucketregion=`curl -H 'X-aws-ec2-metadata-token: '$TOKEN -v 'http://169.254.169.254/latest/meta-data/placement/availability-zone'`\n"
            - "bucketregion=${bucketregion%?}\n"
            - "echo \"bucketregion is:\"$bucketregion\n"
            - "dirname=${INSTANCEID}'_'$dirtime\n"
            - "sudo mkdir /$dirname\n"
            - "sudo /opt/soe/local/bin/perl /opt/soe/local/harden/bin/harden.pl -p CISEnhanced -o Audit &\n"
            - "cd /var/opt/soe/local/harden/data\n"
            - "sudo cp *.txt *.log /$dirname\n"
            - "sudo tar -zcvf /$dirname.tar.gz /$dirname\n"
            - "sudo chmod 777 /$dirname.tar.gz\n"
            - "echo \"Core is installed for:\"$INSTANCEID\n"
            - "echo corecm installed\n"
            - "bucketname=dxc.customer.oscis.compliance-$bucketaccount-$bucketregion\n"
            - "echo \"bucketname is:\"$bucketname\n"
            - "case $bucketregion in\n"
            - "\"eu-south-1\")\n"
            - "aws s3 cp /$dirname.tar.gz s3://$bucketname/$dirdate/compliance/ --endpoint-url https://s3.$bucketregion.amazonaws.com\n"
            - ";;\n"
            - "*)\n"
            - "aws s3 cp /$dirname.tar.gz s3://$bucketname/$dirdate/compliance/\n"
            - ";;\n"
            - "esac\n"
            - "else\n"
            - "export dirtime=`date '+%m%d%Y_%H%M%S'`\n"
            - "export dirdate=`date '+%m-%d-%Y'`\n"
            - "echo \"Current date:\" $dirtime\n"
            - "TOKEN=`curl -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 600'`\n"
            - "INSTANCEID=`curl -H 'X-aws-ec2-metadata-token: '$TOKEN -v 'http://169.254.169.254/latest/meta-data/instance-id'`\n"          
            - "bucketaccount=$(aws sts get-caller-identity --query 'Account' --output text)\n"
            - "echo \"bucketaccount:\"$bucketaccount\n"
            - "bucketregion=`curl -H 'X-aws-ec2-metadata-token: '$TOKEN -v 'http://169.254.169.254/latest/meta-data/placement/availability-zone'`\n"
            - "bucketregion=${bucketregion%?}\n"
            - "echo \"bucketregion is:\"$bucketregion\n"
            - "dirname=${INSTANCEID}'_'$dirtime\n"
            - "sudo mkdir /$dirname\n"
            - "sudo touch /$dirname.txt /$dirname\n"
            - "sudo chmod 777 /$dirname.txt\n"
            - "echo \"Core is installed for:\"$INSTANCEID\n"
            - "echo corecm installed\n"
            - "bucketname=dxc.customer.oscis.compliance-$bucketaccount-$bucketregion\n"
            - "echo \"bucketname is:\"$bucketname\n"
            - "case $bucketregion in\n"
            - "\"eu-south-1\")\n"
            - "aws s3 cp /$dirname.txt s3://$bucketname/$dirdate/non-compliance/ --endpoint-url https://s3.eu-south-1.amazonaws.com\n"
            - ";;\n"
            - "*)\n"                                    
            - "aws s3 cp /$dirname.txt s3://$bucketname/$dirdate/non-compliance/\n"
            - ";;\n"
            - "esac\n"            
            - "fi"
      DocumentType: Command
      Name: 'dxc-awsms-Check-OS-CIS-ComplianceLinuxDocument'

  rOSCISComplianceWindowsDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Check OS CIS Compliance for Windows instances.'                   
        mainSteps:
        - action: aws:runPowerShellScript
          name: runCommands
          precondition:
            StringEquals:
            - platformType
            - Windows
          inputs:
            timeoutSeconds: '300'
            runCommand:
            - "if((Test-Path C:\\SUPPORT\\CoRECM) -and (Test-Path HKLM:\\SOFTWARE\\DXC\\CoRECM))"
            -  "{"
            -  "   Write-Host corecm installed"
            -  "   $TOKEN = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '600'} -Method PUT -Uri http://169.254.169.254/latest/api/token)"
            -  "   $ins = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $TOKEN} -Method GET -Uri http://169.254.169.254/latest/meta-data/instance-id)"
            -  "   $insid = $ins"
            -  "   $resultdate = Get-Date -Format MMddyyyy_hms"
            -  "   $bucketdate = Get-Date -Format MM-dd-yyyy"
            -  "   $dirname = $insid+'_'+$resultdate"
            -  "   Write-Host $dirname"
            -  "   New-Item -ItemType Directory c:\\$dirname"
            -  "   Copy-Item C:\\SUPPORT\\CoRECM\\reports\\ c:\\$dirname -recurse -Force"
            -  "   cd  C:\\SUPPORT\\CoRECM"
            -  "   .\\wcreportgen.ps1 -DetectBaseline -ReportFormat CSV"
            -  "   cd C:\\SUPPORT\\CoRECM\\reports"
            -  "   Compress-Archive -Path c:\\$dirname -DestinationPath c:\\$dirname\\$dirname.zip"
            -  "   $bucketaccount = (Get-STSCallerIdentity).Account"
            -  "   $bucketregion = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $TOKEN} -Method GET -Uri http://169.254.169.254/latest/meta-data/placement/region)"
            -  "   $bucketname =  \"dxc.customer.oscis.compliance-\"+$bucketaccount+\"-\"+$bucketregion"
            -  "   Write-Host $bucketname"
            -  "   aws s3 cp C:\\$dirname\\$dirname.zip s3://$bucketname/$bucketdate/compliance/"
            -  "}"
            -  "else"
            -  "{"
            -  "   Write-Host corecm not installed"
            -  "   $TOKEN = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '600'} -Method PUT -Uri http://169.254.169.254/latest/api/token)"
            -  "   $ins = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $TOKEN} -Method GET -Uri http://169.254.169.254/latest/meta-data/instance-id)"
            -  "   $insid = $ins"
            -  "   $bucketdate = Get-Date -Format MM-dd-yyyy"
            -  "   $resultdate = Get-Date -Format MMddyyyy_hms"
            -  "   $bucketaccount = (Get-STSCallerIdentity).Account"
            -  "   $bucketregion = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $TOKEN} -Method GET -Uri http://169.254.169.254/latest/meta-data/placement/region)"
            -  "   $bucketname =  \"dxc.customer.oscis.compliance-\"+$bucketaccount+\"-\"+$bucketregion"
            -  "   $dirname = $insid+'_'+$resultdate"
            -  "   New-Item -ItemType Directory c:\\$dirname"
            -  "   New-Item c:\\$dirname\\$dirname.txt"
            -  "   aws s3 cp c:\\$dirname\\$dirname.txt s3://$bucketname/$bucketdate/non-compliance/"
            - "}"
      DocumentType: Command
      Name: 'dxc-awsms-Check-OS-CIS-ComplianceWindowsDocument'

  rS3OSCISComplianceBucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketEncryption:
         ServerSideEncryptionConfiguration:
         - ServerSideEncryptionByDefault:
             SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

                   
  rS3OSCISComplianceBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ["", [!Ref pS3BucketForOSCISCompliance, !Ref "AWS::AccountId", "-", !Ref "AWS::Region" ]]
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter90Day
            ExpirationInDays: 90
            Status: 'Enabled'
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3OSCISComplianceBucketLogs
        LogFilePrefix: accesslogs-            
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt rInstanceOSCISComplianceLambda.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "rS3OSCISComplianceBucket"
        - Key: Owner
          Value: DXC

  rS3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rInstanceOSCISComplianceLambda
      SourceAccount: !Ref 'AWS::AccountId'
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${pS3BucketForOSCISCompliance}${AWS::AccountId}-${AWS::Region}

  rInstanceOSCISComplianceLambda:
    Type: "AWS::Lambda::Function"    
    Properties:
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/os_cis_compliance_check.zip"
      Environment:
        Variables:
          log_group_name: !Ref pLogGroupName
          log_stream_compliance: !Ref pLogStreamOSCISCompliance
          log_stream_non_compliance: !Ref pLogStreamOSCISnonCompliance
          snstopic: !Ref rSNSPublicOSCISnonComplianceTopic
      FunctionName: dxcms-os-cis-compliance-check
      Description: "This function check the EC2 Instances are OS Compliance with CIS"
      Handler: dxcms-os-cis-compliance-check.main
      Role: !GetAtt rOSCISComplianceLambdaRole.Arn
      Runtime: python3.11
      Timeout: "300"    
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "rInstanceOSCISComplianceLambda"
        - Key: Owner
          Value: DXC

  rOSCISComplianceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - 
          PolicyName: !Join ["-", ["dxcms-InstanceOSCISComplianceCheckRole",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - Effect: Allow
                Action: "sns:Publish"
                Resource: !Ref rSNSPublicOSCISnonComplianceTopic
              - Effect: Allow
                Action:
                  - "ec2:CreateTags"
                Resource: "*"
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                  - 's3:PutObject'
                Resource:
                  - !Sub arn:aws:s3:::${pS3BucketForOSCISCompliance}${AWS::AccountId}-${AWS::Region}
                  - !Sub arn:aws:s3:::${pS3BucketForOSCISCompliance}${AWS::AccountId}-${AWS::Region}/*
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "rOSCISComplianceLambdaRole"
        - Key: Owner
          Value: DXC
  
  rInstanceOSCISLogGroupName:
    Type: "AWS::Logs::LogGroup"
    DependsOn: rInstanceOSCISComplianceLambda
    Properties:
      LogGroupName: !Ref pLogGroupName
      RetentionInDays: 90

  rInstanceOSCISLogStreamCompliance:
    Type: "AWS::Logs::LogStream"
    DependsOn: rInstanceOSCISLogGroupName
    Properties:
      LogGroupName: !Ref pLogGroupName
      LogStreamName: !Ref pLogStreamOSCISCompliance

  rInstanceOSCISLogStreamnonCompliance:
    Type: AWS::Logs::LogStream
    DependsOn: rInstanceOSCISLogGroupName
    Properties:
      LogGroupName: !Ref pLogGroupName
      LogStreamName: !Ref pLogStreamOSCISnonCompliance

  rOSCISComplianceRoledoc:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - "events.amazonaws.com"
                - "s3.amazonaws.com"
        Version: "2012-10-17"
      Policies:
        - 
          PolicyName: !Join ["-", ["dxcms-InstanceOSCISComplianceCheckRoledoc",!Ref "AWS::AccountId", !Ref "AWS::Region"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:                            
              - Effect: Allow
                Action: 
                  - ssm:SendCommand
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/dxc-awsms-Check-OS-CIS-ComplianceWindowsDocument
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/dxc-awsms-Check-OS-CIS-ComplianceLinuxDocument
              
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub "rOSCISComplianceRoledoc"
        - Key: Owner
          Value: DXC

  rInstanceOSCISSSMScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Event Rule for OS CIS Compliance check on EC2 Instances"
      ScheduleExpression: !Sub '${pInstanceOSCISUpdateFrequency}'
      State: "ENABLED"
      Targets:
        -
          Arn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/dxc-awsms-Check-OS-CIS-ComplianceLinuxDocument
          Id: 'dxc-awsms-Check-OS-CIS-ComplianceLinuxDocument'
          RoleArn: !GetAtt rOSCISComplianceRoledoc.Arn
          RunCommandParameters:
            RunCommandTargets: 
              -
                Key: tag:OS-CIS-Compliance
                Values: 
                  - "False"
                  - "True"
        -
          Arn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/dxc-awsms-Check-OS-CIS-ComplianceWindowsDocument
          Id: 'dxc-awsms-Check-OS-CIS-ComplianceWindowsDocument'
          RoleArn: !GetAtt rOSCISComplianceRoledoc.Arn
          RunCommandParameters:
            RunCommandTargets: 
              -
                Key: tag:OS-CIS-Compliance
                Values: 
                  - "False"
                  - "True"

  rSNSPublicOSCISnonComplianceTopic:
    Type: AWS::SNS::Topic
    Condition: cCreateTopic
    Properties:
      TopicName: !Join ["-",["dxcms-OS-CIS-instance-nonCompliance-topic",!Ref "AWS::AccountId",!Ref "AWS::Region"]]
      Subscription:
        - !If
          - cEmailExists
          - Endpoint: !Ref pNotifyEmail
            Protocol: email
          - !Ref 'AWS::NoValue'
        - !If
          - cSnowURLexists
          - Endpoint: !Sub '{{resolve:secretsmanager:${pDXCAWSMSSnowTopicUrl}:SecretString:snowurl}}'
            Protocol: https
          - !Ref 'AWS::NoValue'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackName'
      - Key: Name
        Value: !Sub rSNSPublicOSCISnonComplianceTopic
      - Key: Owner
        Value: DXC

  rSNSPublicOSCISnonComplianceTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Condition: cCreateTopic
    Properties:
      PolicyDocument:
        Id: 'SNSPublicOSCISnonComplianceTopicPolicy'
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublish"
            Effect: Allow
            Principal:
              Service: 'events.amazonaws.com'
            Action:
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref rSNSPublicOSCISnonComplianceTopic
      Topics:
        - !Ref rSNSPublicOSCISnonComplianceTopic

Outputs: 
  InstanceOSCISLogGroupName: 
    Value: !Ref pLogGroupName
    Description: 'OS CIS Compliance report available in this CloudWatch LogGroup'

  InstanceOSCISLogStreamCompliance:
    Value: !Ref pLogStreamOSCISCompliance
    Description: 'LogStream has the Compliance report'
  
  InstanceOSCISLogStreamnonCompliance:
    Value: !Ref pLogStreamOSCISnonCompliance
    Description: 'LogStream has the nonCompliance report'
  
  CustomerBucketOSCISCompliance:
    Value: !Join ["", [!Ref pS3BucketForOSCISCompliance, !Ref "AWS::AccountId", "-", !Ref "AWS::Region" ]]
    Description: 'S3 bucket for uploading the corecm logs for cis compliance instances'