{
    "Comment": "A state machine to perform diagnosis for Lambda Anomaly usecase",
    "StartAt": "FetchLambdaExecutionDetails",
    "States": {
      "FetchLambdaExecutionDetails": {
        "Comment": "This step will fetch the execution details for all the lambda function executed in last 20 mins",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${FetchLambdaExecutionDetails}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "FetchLambdaExecutionDetailsError"
          }
        ],
        "Next": "LambdaAnomalyFilter"
      },
      "FetchLambdaExecutionDetailsError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "FetchLambdaExecutionDetails Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "LambdaAnomalyFilter": {
        "Comment": "This step will filter the execution details based on the filter value",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${LambdaAnomalyFilter}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "LambdaAnomalyFilterError"
          }
        ],
        "Next": "DynamoDbLogging"
      },
      "LambdaAnomalyFilterError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "LambdaAnomalyFilter Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "DynamoDbLogging": {
        "Comment": "This step will log the LAD Diagnosis result in the DynamoDB Table.",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${DynamoDbLogging}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token",
            "Execution.$": "$$.Execution.Id",
            "StateMachine.$": "$$.StateMachine.Name"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "DynamoDbLoggingError"
          }
        ],
        "Next": "SendEmail"
      },
      "DynamoDbLoggingError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "DynamoDbLogging Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "SendEmail": {
        "Comment": "This step will send an email with the diagnosis results",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${SendEmail}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "SendEmailError"
          }
        ],
        "Next": "SnowDescriptionInput"
      },
      "SendEmailError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "SendEmail Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "SnowDescriptionInput": {
        "Comment": "This step forms the input payload for the ServiceNow",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${SnowDescriptionInput}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "SnowDescriptionInputError"
          }
        ],
        "Next": "TriggerNotificationSFN"
      },
      "SnowDescriptionInputError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "SnowDescriptionInput Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSFN": {
        "Comment": "This step triggers the notification step function with the required input",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${TriggerNotificationSFN}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSFNError"
          }
        ],
        "End": true
      },
      "TriggerNotificationSFNError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TriggerNotificationSFN Function"
        },
        "Next": "TriggerNotificationSfnWError"
      },
      "TriggerNotificationSfnWError": {
        "Comment": "This step will trigger notification sfn if states caught an error",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "Parameters": {
          "FunctionName": "${TriggerNotificationSfnWError}",
          "Payload": {
            "Payload.$": "$",
            "token.$": "$$.Task.Token"
          }
        },
        "TimeoutSeconds": 900,
        "Retry": [
          {
            "ErrorEquals": [
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "IntervalSeconds": 3,
            "BackoffRate": 2,
            "MaxAttempts": 3
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.DataLimitExceeded",
              "States.Runtime",
              "States.TaskFailed",
              "States.Permissions",
              "States.Timeout",
              "Lambda.Unknown"
            ],
            "Next": "TriggerNotificationSfnWErrorError"
          }
        ],
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "TriggerNotificationSfnWErrorError": {
        "Type": "Pass",
        "Parameters": {
          "Error.$": "$.Error",
          "Cause.$": "$.Cause",
          "Execution.$": "$$.Execution.Id",
          "StateMachine.$": "$$.StateMachine.Name",
          "ErrorMessageFrom": "TriggerNotificationSfnWError Function"
        },
        "Next": "NotifyForLambdaFunctionFailure"
      },
      "NotifyForLambdaFunctionFailure": {
        "Comment": "This step will send an error notification email via SNS.",
        "Type": "Task",
        "Resource": "${NotifyForLambdaFunctionFailure}",
        "TimeoutSeconds": 900,
        "End": true
      }
    }
  }