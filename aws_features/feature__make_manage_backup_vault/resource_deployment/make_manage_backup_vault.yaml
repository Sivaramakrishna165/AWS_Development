AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the resources required for the make manage backup vault functionality 
Parameters:
  pFeatureVersion:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] Version of the Feature. To be Filled by creating/parent stack"
    
  pDXCS3KeyPrefix:
    Type: String
    Default: 'None'
    Description: "[DO NOT CHANGE] S3 path to the Lambda_functions of Feature. To be Filled by creating/parent stack"
    
  #pSESLayerArn:
  #  Type : 'AWS::SSM::Parameter::Value<String>'
  #  Default: /DXC/SES/SESLayerLambdaArn
  #  Description: "SSM parameter for Lambda Layer ARN"
    
  pDXCS3BucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/SES/Module/MakeManageBackupVault/S3AssetBucket
    Description: SSM Parameter for bucket location
    
  pTracingFlag:    
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/DXC/CloudWatch/TracingFlag"
    Description: "Flag to enable AWS X-Ray tracing (set to Active) for debugging. Default setting is PassThrough."
    
  pMMBackupVaultLastStateName:    
    Type: String
    Default: "UpdateBackupVaultNotifications"
    Description: "Parameter for BackupVault Make Manage Last State Name"
    
  pMMBackupVaultOutputLocation:    
    Type: String
    Default: "deploy/ft-make-manage-backup-vault/output/backup-vault-info-summary-report.csv"
    Description: "BackupVault Make Manage Output/report file location (s3key)"
    
  pDXCS3CustomerBucketName:
    Type: "AWS::SSM::Parameter::Value<String>" 
    Default: /DXC/CustomerBucket
    Description: "[DO NOT CHANGE] SSM Parameter for Customer bucket location"        
    
  # AWSPE-6465 When you create a state machine with logging enabled, 
  # Step Functions must update your CloudWatch Logs resource policy with the 
  # log group you specify. To avoid reaching the CloudWatch Logs resource policy size limit, 
  # prefix your CloudWatch Logs log group names with /aws/vendedlogs/
  pMMBackupVaultVendedStepFunctionLogGroup:
    Description: BackupVault MM Step Function CloudWatch Log Group
    Default: /aws/vendedlogs/stepfunction/MMBackupVaultStepFunction
    Type: String
  ##pCommonIncidentTopic:
  ##  Description: SSM Param to create the Incidents in Service-Now with priroity fetched from DDB - FtCloudWatchAlarmsIncidentPriorities
  ##  Type: "AWS::SSM::Parameter::Value<String>" 
  ##  Default: /DXC/Alarms/CreateIncident-Default
  pLogGroupName:
    Type: String
    Description: 'Do Not Change - The log group to which MM backup vault lambda writes logs'
    Default: 'MMBackupVault'
  pLogStreamName:
    Type: String
    Description: 'Do Not Change - The log stream to which MM UpdateBackupVaultNotifications lambda write logs'
    Default: 'MMBackupVaultMessages'
    
Resources:
  
  rMMBackupVaultVendedStepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: !Ref pMMBackupVaultVendedStepFunctionLogGroup

  rMMBackupVaultLastStateName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/DXC/SES/Module/MakeManageBackupVault/MakeManageBackupVaultLastStateName"
      Type: String
      Value: !Ref pMMBackupVaultLastStateName
      Description: "SSM Parameter for BackupVault Make Manage Last State Name (CreateAlarm)" 

  rMMBackupVaultOutputLocation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/DXC/SES/Module/MakeManageBackupVault/MakeManageBackupVaultOutputLocation"
      Type: "String"
      Value:  !Ref pMMBackupVaultOutputLocation
      Description: "Make Manage BackupVault Output/report file location (s3key)"

############## Creation of Log group and Log stream ##############

  rMMBackupVaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        RetentionInDays: 90
        LogGroupName: !Ref pLogGroupName
        Tags:
          - Key: "Owner"
            Value: "DXC"
          - Key: "Application"
            Value: "AWS Managed Services"
            
  rMMBackupVaultLogStream:
    Type: "AWS::Logs::LogStream"
    DependsOn: rMMBackupVaultLogGroup
    Properties:
        LogGroupName: !Ref pLogGroupName
        LogStreamName: !Ref pLogStreamName

################## Creation of Dynamodb tables ###################
  rMMBackupVaultParameterSetDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "ParameterSetName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ParameterSetName"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: "BackupVault Make Manage - BackupVault property settings values"
      TableName: FtMMBackupVaultParameterSet

  rMMBackupVaultReportDdbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "BackupVaultName"
          AttributeType: "S"
        - AttributeName: "StateName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "BackupVaultName"
          KeyType: "HASH"
        - AttributeName: "StateName"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: "Purpose"
          Value: "BackupVault Make Manage - Processed MM BackupVault report"
      TableName: FtMMBackupVaultReport
      
################## Processor Lambda function ###################

  rMMBackupVaultLambdaProcessorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultLambdaProcessorPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:TagResource"
                Resource: 
                  #- "*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultParameterSet"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultReport"
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: 
                  - !Ref rMMBackupVaultStepFunction
              - Effect: "Allow"
                Action:
                  - "backup:ListTags"
                  - "backup:TagResource"
                Resource: 
                  - !Ref rMMBackupVaultStepFunction
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:*"
                  
  rMMBackupVaultProcLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-lambda-processor'
      Description: "MM BackupVault - Lambda that Processes the Dynamodb tables for the backup vault"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/mm_backup_vault_lambda_processor.zip"
      Environment: 
        Variables:           
          MMBkupVltInfoTableName: !Ref rMMBackupVaultParameterSetDdbTable
          #MMDdbAlarmsTableName: !Ref rMMBackupVaultAlarmsDdbTable
          MMBkupVltRepTableName: !Ref rMMBackupVaultReportDdbTable
          StateFunArn: !GetAtt rMMBackupVaultStepFunction.Arn
          MMBkupVltLogGroupName: !Ref pLogGroupName
          MMBkupVltLogStreamName: !Ref pLogStreamName
      Handler: "dxc_mm_backup_vault_lambda_processor.lambda_handler"
      Runtime: python3.11
      #Layers:
      #  - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultLambdaProcessorRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "MM that Processes the Backup Vault Dynamodb tables"
        -
          Key: "Owner"
          Value: "DXC"

################## sm1 backup vault access policy Lambda Function ################### 
 
  rMMBackupVaultAccessPolicyLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultAccessPolicy-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"                                    
              - Effect: "Allow"
                Action:
                  - "backup:DescribeBackupVault"
                  - "backup:PutBackupVaultAccessPolicy"
                  - "backup:GetBackupVaultAccessPolicy"
                  - "backup:DeleteBackupVaultAccessPolicy"
                Resource:
                  #- "*"
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:*" 
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  #- "dynamodb:TagResource"
                Resource: 
                  #- "*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultParameterSet"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultReport"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: 
                  #- "*"
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rMMBackupVaultStepFunction-*"

  rMMBackupVaultAccessPolicyLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-sm1-AccessPolicy'
      Description: "MM BackupVault - To apply an access policy to a backup vault"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm1_mm_backup_vault_access_policy.zip"
      Handler: "dxc_mm_backup_vault_access_policy.lambda_handler"
      Runtime: python3.11
      #Layers:
      #  - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultAccessPolicyLambdaRole.Arn
      #Environment: 
      #  Variables: 
      #    MMDdbInfoTableName: !Ref rMMBackupVaultParameterSetDdbTable
      #    MMDdbRepTableName: !Ref rMMBackupVaultReportDdbTable
      #    MMDdbLogGroupName: !Ref pLogGroupName
      #    MMDdbLogStreamName: !Ref pLogStreamName
      Tags:
        -
          Key: "Purpose"
          Value: "MM Backup Vault Lambda to apply an access policy"
        -
          Key: "Owner"
          Value: "DXC"

################## Enable/Disable BackupVaultTags Lambda Function ###################
 
  rMMBackupVaultBackupVaultTagsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultBackupVaultTagsLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "backup:DescribeBackupVault"
                  - "backup:ListTags"
                  - "backup:TagResource"
                  - "backup:UntagResource"
                Resource:
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:*" 
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:TagResource"
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultParameterSet"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultReport"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"


  rMMBackupVaultBackupVaultTagsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-sm2-BackupVaultTags'
      Description: "MM BackupVault - To apply tags to a backup vault"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm2_mm_backup_vault_backup_vault_tags.zip"
      #Environment: 
      #  Variables: 
      #    MMDdbInfoTableName: !Ref rMMBackupVaultParameterSetDdbTable
      #    MMDdbRepTableName: !Ref rMMBackupVaultReportDdbTable
      #    MMDdbLogGroupName: !Ref pLogGroupName
      #    MMDdbLogStreamName: !Ref pLogStreamName          
      Handler: "dxc_mm_backup_vault_backup_vault_tags.lambda_handler"
      Runtime: python3.11
      #Layers:
      #  - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultBackupVaultTagsLambdaRole.Arn
      Tags:
        -
          Key: "Purpose"
          Value: "MM BackupVault Lambda to apply tags to a backup vault"
        -
          Key: "Owner"
          Value: "DXC"          

################## Lock Config Lambda function ################### 
 
  rMMBackupVaultLockConfigLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultLockConfigLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "backup:PutBackupVaultLockConfiguration"
                  - "backup:DescribeBackupVault"
                  - "backup:ListBackupVaults"
                  - "backup:DeleteBackupVaultLockConfiguration"
                Resource: 
                  #- "*"
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault*" 
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:TagResource"
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultParameterSet"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultReport"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: 
                  #-"*"
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rMMBackupVault*"
                  
  rMMBackupVaultLockConfigLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-sm3-vault-lock'
      Description: "MM BackupVault - Creates or updates a vault lock for a backup vault"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm3_mm_backup_vault_lock_config.zip"
      Handler: "dxc_mm_backup_vault_sm3_lock_config.lambda_handler"
      Runtime: python3.11
      #Layers:
      #  - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultLockConfigLambdaRole.Arn
      #Environment:
      #  Variables:
      #    MMDdbInfoTableName: !Ref rMMBackupVaultParameterSetDdbTable
      #    MMDdbAlarmsTableName: !Ref rMMBackupVaultAlarmsDdbTable
      #    MMDdbRepTableName: !Ref rMMBackupVaultReportDdbTable
      #    CommonIncidentTopic: !Ref pCommonIncidentTopic
      #    MMDdbLogGroupName: !Ref pLogGroupName
      #    MMDdbLogStreamName: !Ref pLogStreamName          
      Tags:
        -
          Key: "Purpose"
          Value: "MM BackupVault Lambda for lock configuration"
        -
          Key: "Owner"
          Value: "DXC"

################## Notifications Lambda function ################### 
# Note the AWS docs are incorrect.  The correct Actions are plural for backup:DeleteBackupVaultNotifications and backup:GetBackupVaultNotifications
 
  rMMBackupVaultNotificationsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultNotificationsLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "backup:PutBackupVaultNotifications"
                  - "backup:DeleteBackupVaultNotifications"
                  - "backup:GetBackupVaultNotifications"
                Resource:
                  - !Sub "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:*" 
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultParameterSet"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FtMMBackupVaultReport"
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rMMBackupVault*"
                  
  rMMBackupVaultNotificationsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-sm4-notifications'
      Description: "MM BackupVault - Creates or updates notifications on a backup vault"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm4_mm_backup_vault_notifications.zip"
      Handler: "dxc_mm_backup_vault_sm4_notifications.lambda_handler"
      Runtime: python3.11
      #Layers:
      #  - !Ref pSESLayerArn      
      Timeout: 900
      MemorySize: 128
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultNotificationsLambdaRole.Arn
      #Environment:
      #  Variables:
      #    MMDdbInfoTableName: !Ref rMMBackupVaultParameterSetDdbTable
      #    MMDdbAlarmsTableName: !Ref rMMBackupVaultAlarmsDdbTable
      #    MMDdbRepTableName: !Ref rMMBackupVaultReportDdbTable
      #    CommonIncidentTopic: !Ref pCommonIncidentTopic
      #    MMDdbLogGroupName: !Ref pLogGroupName
      #    MMDdbLogStreamName: !Ref pLogStreamName          
      Tags:
        -
          Key: "Purpose"
          Value: "MM BackupVault Lambda for Notifications"
        -
          Key: "Owner"
          Value: "DXC"

################## Report Lambda Function ###################

  rMMBackupVaultSummaryReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      #ManagedPolicyArns:
      #  - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: "/"
      Policies:
        -
          PolicyName: "MMBackupVaultSummaryReportLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "backup:TagResource"
                  - "ssm:GetParameter"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                Resource: 
                - !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}/*
                #- !Sub arn:aws:s3:::${pDXCS3CustomerBucketName}/deploy/ft-make-manage-backup-vault/output/*
              - Effect: "Allow"
                Action:
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource: "*"

  rMMBackupVaultSummaryReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'dxc-awsms-mm-backup-vault-sm5-summary-report'
      Description: "MM BackupVault - To create and store the BackupVault summary reports"
      Code:
        S3Bucket: !Ref pDXCS3BucketName
        S3Key: !Sub "${pDXCS3KeyPrefix}/sm5_mm_backup_vault_summary_report.zip"
      Handler: "dxc_mm_backup_vault_sm5_summary_report.lambda_handler"
      Runtime: python3.11
      Timeout: 900
      MemorySize: 128
      #Layers:
      #  - !Ref pSESLayerArn      
      TracingConfig:
        Mode: !Ref pTracingFlag
      Role: !GetAtt rMMBackupVaultSummaryReportLambdaRole.Arn
      Environment: 
        Variables: 
          MMNBRepTableName: !Ref rMMBackupVaultReportDdbTable
          MMNBOutputLocation: !Ref rMMBackupVaultOutputLocation
          pDXCS3CustomerBucketName :  !Ref pDXCS3CustomerBucketName
            
      Tags:
        -
          Key: "Purpose"
          Value: "MM BackupVault Summary Report"
        -
          Key: "Owner"
          Value: "DXC"          
          


################## Trigger For Invoking Update Lambda Function ################### 
 
  #rMMBackupVaultUpdateAlarmsLambdaTrigger:
  #  Type: AWS::Lambda::EventSourceMapping
  #  Properties:
  #    BatchSize: 1
  #    Enabled: True
  #    EventSourceArn: !GetAtt rMMBackupVaultAlarmsDdbTable.StreamArn
  #    FunctionName: !GetAtt rMMBackupVaultUpdateAlarms.Arn
  #    StartingPosition: LATEST

################## Event Rule For Invoking the Processor Lambda ###################

  rMMBackupVaultTriggerdRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Event that triggers MM Backup Vault Processor Lambda"
      EventPattern:
        detail-type:
          - "Tag Change on Resource"
        source:
          - "aws.tag"
        detail:
          changed-tag-keys:
            - "dxc_backupvault_make_manage"
          service:
            - "backup"
          resource-type:
            - "backup-vault"
          tags:
            dxc_backupvault_make_manage:
              - "True"
              - "true"
              - "TRUE"
      Targets:
        -
          Arn: !GetAtt rMMBackupVaultProcLambda.Arn
          Id: "MMDdbLambdaExecRule"
          
################## Processor Lambda Resource Based Policy - Event Rule ###################

  rMMBackupVaultProcLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "rMMBackupVaultProcLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rMMBackupVaultTriggerdRule.Arn          

################## Step Function ###################

  rMMBackupVaultStepFunctionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: MMBackupVaultStepFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"

  rMMBackupVaultStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: "rMMBackupVaultStepFunctionLambdaExecutionRole"
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Make Manage BackupVault StateMachine",
          "StartAt": "StateMachineBackupVaultAccessPolicy",
          "States": {
            "StateMachineBackupVaultAccessPolicy": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMBackupVaultAccessPolicyLambda.Arn}:$LATEST",
                "Payload": {
                  "BackupVaultName.$": "$.BackupVaultName",
                  "ParameterSetName.$": "$.ParameterSetName",
                  "TaskToken.$": "$$.Task.Token"                  
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "ResultPath": "$.Payload",
                  "Next": "StateMachineBackupVaultSummaryReport"
              } ],
              "Next": "StateMachineBackupVaultBackupVaultTags"
            },
            "StateMachineBackupVaultBackupVaultTags": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMBackupVaultBackupVaultTagsLambda.Arn}:$LATEST",
                "Payload": {
                  "BackupVaultName.$": "$.BackupVaultName",
                  "ParameterSetName.$": "$.ParameterSetName",
                  "TaskToken.$": "$$.Task.Token"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "ResultPath": "$.Payload",
                  "Next": "StateMachineBackupVaultSummaryReport"
              } ],
              "Next": "StateMachineBackupVaultLockConfig"
            },
            "StateMachineBackupVaultLockConfig": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMBackupVaultLockConfigLambda.Arn}:$LATEST",
                "Payload": {
                  "BackupVaultName.$": "$.BackupVaultName",
                  "ParameterSetName.$": "$.ParameterSetName",
                  "TaskToken.$": "$$.Task.Token"            
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "ResultPath": "$.Payload",
                  "Next": "StateMachineBackupVaultSummaryReport"
              }],
              "Next": "StateMachineBackupVaultNotifications"
            },
            "StateMachineBackupVaultNotifications": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Parameters": {
                "FunctionName": "${rMMBackupVaultNotificationsLambda.Arn}:$LATEST",
                "Payload": {
                  "BackupVaultName.$": "$.BackupVaultName",
                  "ParameterSetName.$": "$.ParameterSetName",
                  "TaskToken.$": "$$.Task.Token"            
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Catch": [ {
                  "ErrorEquals": [ "States.TaskFailed" ],
                  "ResultPath": "$.Payload",
                  "Next": "StateMachineBackupVaultSummaryReport"
              }],
              "Next": "StateMachineBackupVaultSummaryReport"
            },
            "StateMachineBackupVaultSummaryReport": {
              "Type": "Task",
              "Resource":  "${rMMBackupVaultSummaryReportLambda.Arn}",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 700,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      RoleArn: !GetAtt rMMBackupVaultStepFunctionLambdaExecutionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt rMMBackupVaultVendedStepFunctionLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
      Tags:
        -
          Key: "Purpose"
          Value: "MakeManage BackupVault Step Function"
        -
          Key: "Owner"
          Value: "DXC"
